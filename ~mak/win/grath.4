\ Andrey Filatkin, af@forth.org.ru

\ REQUIRE DBG_INCLUDED lib\include\spf_navigator.f 

\ REQUIRE OFD_STR ~mak\fdialog.4 

REQUIRE [UNDEFINED] lib\include\tools.f
REQUIRE { ~mak\locals.f
REQUIRE CASE ~mak\case.f
\- #define : #define  HEADER  CONSTANT-CODE COMPILE,  0 PARSE EVALUATE , ; 
REQUIRE $! ~mak\place.f

REQUIRE CASE-INS lib\ext\caseins.f

\ REQUIRE FILE-SIZE ~mak/lib/ftools.4 

~mak/win/RWINAPI.4 
~mak/win/DTYPS.F 

~mak/win/COLOR.F 

\ USER32DLL WAPI1: GetDC	GetDC

\- IMAGE-BASE 0 GetModuleHandleA CONSTANT IMAGE-BASE

\- Z" : Z" POSTPONE S"  POSTPONE DROP  ; IMMEDIATE

[IFNDEF] :NONAME
: :NONAME ( C: -- colon-sys ) ( S: -- xt ) \ 94 CORE EXT
  LATEST ?DUP IF 1+ C@ C-SMUDGE C! SMUDGE THEN
  HERE DUP TO LAST-NON [COMPILE] ]
;
[THEN]

\- /STRING : /STRING DUP >R - SWAP R> + SWAP ;


[UNDEFINED] /MSG
[IF]

0
8 FIELD MSG.hwnd
4 FIELD MSG.message
8 FIELD MSG.wParam
8 FIELD MSG.lParam
4 FIELD MSG.time
8 FIELD MSG.pt
4 FIELD MSG.ex
CONSTANT /MSG
[THEN]


[UNDEFINED] /WNDCLASS
[IF]

0
4 FIELD .cbSize
4 FIELD .style
8 FIELD .lpfnWndProc
4 FIELD .cbClsExtra
4 FIELD .cbWndExtra
8 FIELD .hInstance
8 FIELD .hIcon
8 FIELD .hCursor
8 FIELD .hbrBackground
8 FIELD .lpszMenuName
8 FIELD .lpszClassName
8 FIELD .hIconSm
CONSTANT /WNDCLASS
[THEN]

DECIMAL
\- MainMenu  0 VALUE MainMenu

CREATE MSG1  /MSG ALLOT

: LOWORD ( lpar -- loword ) 0x0FFFF AND ;
: HIWORD ( lpar -- hiword ) 0x10000 /  ;


\ *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\***
\ **\\\\\ 
\ ***\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*

 S" GRATH.LOG" W/O CREATE-FILE-SHARED THROW CONSTANT GRATH.LOG

VARIABLE UP_WIN
VARIABLE LEFT_WIN
VARIABLE WIDTH_WIN
VARIABLE HEIGHT_WIN
VARIABLE WIND
0 VALUE Myhwnd

: SET_SIZE_WIN \ SizeTheWindow
  100 UP_WIN !  100 LEFT_WIN !
  200  4 * WIDTH_WIN ! 200 HEIGHT_WIN ! ;

 SET_SIZE_WIN

VARIABLE PIC

2 3 LSHIFT CONSTANT G_BUF_MAX

CREATE G_BUF G_BUF_MAX CELLS ALLOT
CREATE R_BUF G_BUF_MAX CELLS ALLOT
CREATE B_BUF G_BUF_MAX CELLS ALLOT
CREATE  _BUF G_BUF_MAX CELLS ALLOT
0 VALUE X_BUF

0 VALUE G_BUF_COUNT
0 VALUE R_BUF_COUNT
0 VALUE B_BUF_COUNT
0 VALUE  _BUF_COUNT
0 VALUE   BUF_COUNT
50 VALUE G-STEP

CREATE G_PS /PS ALLOT  G_PS /PS ERASE

IMAGE-BASE CONSTANT HINST  \ Instance 

: isotropy_establish ( -- )
  PIC @ MM_ISOTROPIC RSetMapMode     DROP
  PIC @ 1000 DUP 0 RSetWindowExtEx DROP
  PIC @ 400 DUP 0 RSetViewportExtEx DROP
\  PIC @   HHZZ   WWZZ  0 RSetViewportOrgEx DROP
\  PIC @ 100  100  0 RSetViewportOrgEx DROP
\  PIC @ HEIGHT_WIN @ 2 /         WIDTH_WIN @ 2 /  0  RSetViewportExtEx DROP
\  PIC @ HEIGHT_WIN @ 2 / NEGATE  WIDTH_WIN @ 2 /  0  RSetViewportOrgEx DROP
  ;


\  должна быть установлена переменная PIC

1 6 LSHIFT CONSTANT G_BUF_MAX

CREATE G_BUF G_BUF_MAX CELLS ALLOT
CREATE R_BUF G_BUF_MAX CELLS ALLOT
CREATE B_BUF G_BUF_MAX CELLS ALLOT
CREATE  _BUF G_BUF_MAX CELLS ALLOT
0 VALUE X_BUF

0 VALUE G_BUF_COUNT
0 VALUE R_BUF_COUNT
0 VALUE B_BUF_COUNT
0 VALUE  _BUF_COUNT
0 VALUE   BUF_COUNT
50 VALUE G-STEP

: G_PIC ( -- )
   BUF_COUNT 2 < IF EXIT THEN
   PIC @   WIDTH_WIN @ 2* WIDTH_WIN @ 4 / +  X_BUF @ 400 +  HEIGHT_WIN @ * 400 /  0 RMoveToEx DROP
   BUF_COUNT 1
 DO
  PIC @
   WIDTH_WIN @ 2* WIDTH_WIN @ 4 / +  I G-STEP * -
   X_BUF I CELLS + @  400 +  HEIGHT_WIN @ * 400 /
 RLineTo DROP
   LOOP
;

: TO-GRATH
 X_BUF X_BUF CELL+  BUF_COUNT CELLS MOVE
 X_BUF !
 BUF_COUNT 1+ G_BUF_MAX UMIN TO BUF_COUNT
;    


: OSI \ f7_ed
   PIC @ 
   BLACK_PEN GetStockObject
	RSelectObject DROP
   PIC @   WIDTH_WIN @ 2* WIDTH_WIN @ 4 / + HEIGHT_WIN @ 2* 0  RMoveToEx DROP
   PIC @   WIDTH_WIN @ 2* WIDTH_WIN @ 4 / + 0   RLineTo   DROP
   PIC @   WIDTH_WIN @ 2* WIDTH_WIN @ 4 / + HEIGHT_WIN @  0  RMoveToEx DROP
   PIC @   0 HEIGHT_WIN @  RLineTo   DROP
;

: TO-GR ( n -- )
\  WHITE_PEN GetStockObject PIC @ SWAP RSelectObject DROP
  PIC @ ^WHITE PenColor
  G_PIC \  DROP \ ??? PIC @ PenColor
 TO-GRATH 
  G_PIC OSI
;

: face_draw
\      SP@ SP0 !
      WIND @ GetDC PIC !
      isotropy_establish
  G_BUF_COUNT TO   BUF_COUNT   G_BUF TO X_BUF  PIC @ ^GREEN PenColor
  G_PIC    BUF_COUNT TO G_BUF_COUNT
  R_BUF_COUNT TO   BUF_COUNT   R_BUF TO X_BUF  PIC @ ^RED PenColor
  G_PIC    BUF_COUNT TO R_BUF_COUNT
  B_BUF_COUNT TO   BUF_COUNT   B_BUF TO X_BUF  PIC @ ^BLUE PenColor
  G_PIC    BUF_COUNT TO B_BUF_COUNT
\  F7_ED
    OSI
;


: TO-G  ( n -- )
\    F7_ED
  G_BUF_COUNT TO   BUF_COUNT   G_BUF TO X_BUF TO-GR \  ^GREEN  TO-GR
    BUF_COUNT TO G_BUF_COUNT  face_draw
;

: TO-R  ( n -- )
\    F7_ED
  R_BUF_COUNT TO   BUF_COUNT   R_BUF TO X_BUF TO-GR \  ^RED  TO-GR
    BUF_COUNT TO R_BUF_COUNT  face_draw
;

: TO-B  ( n -- )
\    F7_ED
  B_BUF_COUNT TO   BUF_COUNT   B_BUF TO X_BUF TO-GR \  ^BLUE  TO-GR
    BUF_COUNT TO B_BUF_COUNT  face_draw
;


\ :NONAME { upp  hwnd msg  wpar lpar  \ hdc hout -- } 
:NONAME {  hwnd msg  wpar lpar  \ hdc hout -- } 

 DECIMAL
\       H-STDOUT TO hout  GRATH.LOG TO H-STDOUT

\ CR ." P=" hwnd H. msg H. wpar H. lpar H.  
\ CR ." hout="  hout H.
 msg CASE 
   WM_SIZE OF
     lpar $0FFFF AND WIDTH_WIN !
     lpar $10000 / $0FFFF AND HEIGHT_WIN !
      0
   ENDOF    \ 2  


\   WM_SETFOCUS OF  EdHWnd SetFocus DROP  0  ENDOF   \ 3

   WM_PAINT  OF
     hwnd  WIND !
     WIND @ G_PS RBeginPaint PIC !
     isotropy_establish
\     3 TO bChange
     face_draw
    \ c_hands_draw
     WIND @ G_PS REndPaint DROP
 hwnd  msg wpar lpar RDefWindowProcA

\     0
   ENDOF

\    DUP WM_DESTROY = IF TRUE TO EDIT-END TRUE TO ED_WATE THEN

\        THEN

 hwnd  msg wpar lpar RDefWindowProcA
     \ need for swap with case parameter
     \ and defwinproc parameter
  SWAP
 ENDCASE

\ hout TO H-STDOUT
\  upp TlsIndex!
\ RDROP \ R>  TlsIndex!
;

WNDPROC: MyWndProc

: MessageLoop
  BEGIN
   MSG1 0 0 0  RGetMessageA
  WHILE
    MSG1 TranslateMessage DROP
    MSG1 DispatchMessageA DROP

  REPEAT
;


\- WinClassName :  WinClassName   S" SP-FORTH GRATH" DROP ;


: GrathRegisterClass
 \ fill the class structure

 HERE   /WNDCLASS ALLOT

    /WNDCLASS			OVER .cbSize        L!
    CS_HREDRAW CS_VREDRAW OR    OVER .style         L!
    ['] MyWndProc           OVER .lpfnWndProc   !
    0                           OVER .cbClsExtra    L!
    0                           OVER .cbWndExtra    L!
    HINST                       OVER .hInstance     !
    HINST 1 RLoadIconA DUP >R    OVER .hIcon         !
			R>	OVER .hIconSm		!
    0 IDC_ARROW RLoadCursorA     OVER .hCursor       !
    WHITE_BRUSH GetStockObject  OVER .hbrBackground !
    0                           OVER .lpszMenuName  !
    WinClassName               OVER .lpszClassName !
 
  RegisterClassExA ." RegisterClassExA=" DUP H.

DROP \  0= ABORT" #Class was not registered!"

\     /WNDCLASS NEGATE ALLOT
;


     GrathRegisterClass


: TASK_GRATH
[ $48 C, $81 C, $EC C,  $3000 L, ] \    subq    $0x18000,%rsp  
  CALLBACKIN
   DECIMAL

 0
  WinClassName
  DUP
 WS_OVERLAPPEDWINDOW   WS_VISIBLE  OR  


   UP_WIN @  LEFT_WIN @       \ vertical, horizontal position
  WIDTH_WIN @ HEIGHT_WIN @    \ window height, width


  0
  0 \ MainMenu                      \ handle to menu, or child-window identifier
  HINST                         \ handle to application instance
  0                             \ pointer to window-creation data

 RCreateWindowExA
  TO Myhwnd

  Myhwnd UpdateWindow  DROP
  5 Myhwnd RShowWindow  DROP        \ вывести WIND на экран


  MessageLoop

;

: GR-S
     ['] TASK_GRATH TSTART DROP \  START_EDITED TSTART DROP
 ;

