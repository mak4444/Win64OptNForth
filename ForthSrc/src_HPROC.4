\- DOCREATE	: DOCREATE	R> ;
\- DOCONSTANT	: DOCONSTANT	R> @ ;
\- DOVALUE	: DOTVALUE	R> @ ;
\- DOVECT 	: DOVECT	R> PERFORM ;

\- DOFIELD	: DOFIELD	R> L@ + ;

' DOCREATE TO 'DOCREATE
' DOCONSTANT TO 'DOCONSTANT
' DOVALUE TO 'DOVALUE
' DOVECT TO 'DOVECT
' DOFIELD TO 'DOFIELD

VARIABLE &INPUT
VARIABLE &INPUT?

VARIABLE &OUTPUT

CREATE &START_INIT ' NOOP ,
\ CREATE DP ' DPBuff ,
VARIABLE DP

VARIABLE EMITVAR

TIMAGE-BASE CONSTANT IMAGE-BASE

T: THERE DP @ ;

T: ALLOT DP +! ;

T: DP! DP ! ;

T: ,   THERE ! 8 ALLOT ;

T: L, THERE L! 4 ALLOT ;

T: W, THERE W! 2 ALLOT ;

T: C, THERE C! 1 ALLOT ;

' EMIT_M ->DEFER EMIT

: TYPE_M ( c-addr1 u --- )
\ Output the string starting at c-addr and length u to the terminal.
\ CC_LINES
  0 ?DO COUNT EMIT LOOP DROP
;

: TYPE1 ( c-addr u -- ) \ 94
  H-STDOUT \ DUP 0= IF DROP 2DROP BREAK
  WRITE-FILE DROP \ THROW  !!!!!
;

' TYPE_M ->DEFER TYPE

: CR1 	$d EMIT	$a EMIT ;
' CR1 ->defer CR

VARIABLE TEXTINPUEX
VARIABLE IVANTID

0 VALUE BOOTSERV
0 VALUE VOLUME

: KEY?EX ( -- flg )
 ;

: SHIFT@  ;
: CTL@  ;
: ALT@  ;

' KEY?EX ->DEFER KEY?

' OS_KEY ->DEFER KEY

: TAB	9  EMIT ;

T: HALIGNED  1+  1 ANDC ;
T: IALIGNED  3 + 3 ANDC ;
T: QALIGNED  7 + 7 ANDC ;

CREATE ALIGN-BYTES 8 ,

T: ALIGNED ( addr -- a-addr ) \ 94
\ a-addr - Ð¿ÐµÑ€Ð²Ñ‹Ð¹ Ð²Ñ‹Ñ€Ð¾Ð²Ð½ÐµÐ½Ð½Ñ‹Ð¹ Ð°Ð´Ñ€ÐµÑ, Ð±Ð¾Ð»ÑŒÑˆÐ¸Ð¹ Ð¸Ð»Ð¸ Ñ€Ð°Ð²Ð½Ñ‹Ð¹ addr.
  ALIGN-BYTES @ DUP 0= IF 1+ DUP ALIGN-BYTES ! THEN
  2DUP
  MOD DUP IF - + ELSE 2DROP THEN ;

: (S")  ( --- c-addr u )
\ Runtime part of S"
\ It returns address and length of an in-line counted string.
  R>  COUNT 2DUP + >R ;

\+ '(S") ' (S") TO '(S")

: (Z")  ( --- c-addr u )
\ Runtime part of S"
\ It returns address and length of an in-line counted string.
  R>  COUNT OVER + 1+ >R ;

: (C")  ( --- c-addr )
   R> DUP COUNT +  >R ;

\+ '(C") ' (C") TO '(C")

: DEPTH ( -- n ) \ 94
  SP@ SP0 @ - NEGATE  3 ARSHIFT ;

\ T: ERASE 0 FILL ;

: WCOUNT DUP W@ SWAP 2+ SWAP ;

: SPACE BL EMIT ;

: 0MAX 0 MAX ;

: 3DUP DUP 2OVER ROT ;

: BOUNDS OVER + SWAP ;

: U<= U> 0= ;

: CS-ROLL  2* 1+ DUP>R ROLL R> ROLL ;

: D2*      ( D -- D*2 )        2DUP D+     ;
: DABS     ( d -- ud )         DUP 0< IF DNEGATE THEN  ;

: U/MOD 0 SWAP UM/MOD ;
: */MOD \ n1 n2 n3 -- rem quot                          6.1.0110
\ *G Multiply n1 by n2 to give a double precision result, and then
\ ** divide it by n3 returning the remainder and quotient. The point
\ ** of this operation is to avoid loss of precision.
 >R M* R> FM/MOD ;

: */ ( n1 n2 n3 -- n4 ) \ 94
\ Ð£Ð¼Ð½Ð¾Ð¶Ð¸Ñ‚ÑŒ n1 Ð½Ð° n2, Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ð¿Ñ€Ð¾Ð¼ÐµÐ¶ÑƒÑ‚Ð¾Ñ‡Ð½Ñ‹Ð¹ Ð´Ð²Ð¾Ð¹Ð½Ð¾Ð¹ Ñ€ÐµÐ·ÑƒÐ»ÑŒÑ‚Ð°Ñ‚ d.
\ Ð Ð°Ð·Ð´ÐµÐ»Ð¸Ñ‚ÑŒ d Ð½Ð° n3, Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ñ‡Ð°ÑÑ‚Ð½Ð¾Ðµ n4.
  */MOD NIP
;


\ : U/ ( n1 n2 -- n1*n2 ) U/MOD  NIP ;

\ : UMOD ( n1 n2 -- n1%n2 )  U/MOD DROP ;

: MOVE ( addr1 addr2 u -- ) \ 94	
  >R 2DUP SWAP R@ + U<
  IF 2DUP U<
     IF R> CMOVE> ELSE R> CMOVE THEN
  ELSE R> CMOVE THEN ;

255 CONSTANT MAXCOUNTED   \ maximum length of contents of a counted string


: "CLIP"        ( a1 n1 -- a1 n1' )   \ clip a string to between 0 and MAXCOUNTED
                MAXCOUNTED MIN 0 MAX ;

: PLACE         ( addr len dest -- )
                SWAP "CLIP" SWAP
                2DUP 2>R
                CHAR+ SWAP MOVE
                2R> C! ;

: $!   PLACE ;

: +PLACE        ( addr len dest -- ) \ append string addr,len to counted
                                     \ string dest
                >R "CLIP" MAXCOUNTED  R@ C@ -  MIN R>
                                        \ clip total to MAXCOUNTED string
                2DUP 2>R

                COUNT + SWAP MOVE
                2R> +! ;

: $+!  +PLACE ;

: C+PLACE       ( c1 a1 -- )    \ append char c1 to the counted string at a1
                DUP 1+! COUNT + 1- C! ;

: $C+! C+PLACE  ;

: +NULL         ( a1 -- )       \ append a NULL just beyond the counted chars
                COUNT + 0 SWAP C! ;


: zplace        \ caddr len zaddr --
\ *G Copy the string caddr/len to zaddr as a 0 terminated string.
  2dup + >r				\ save location of zero
  swap move				\ copy string
  0 r> c!				\ terminate afterwards in case of overlap
;

: COMPARE ( addr1 u1 addr2 u2 --- diff )
\ Compare two strings. diff is negative if addr1 u1 is smaller, 0 if it
\ is equal and positive if it is greater than addr2 u2.

  ROT 2DUP - >R        
  MIN DUP IF
   >R
   BEGIN
    OVER C@ OVER C@ - IF
     SWAP C@ SWAP C@ -
		 2RDROP	EXIT
    THEN 
    1+ SWAP 1+ SWAP
    R> 1- DUP >R 0=
   UNTIL R>
  THEN DROP
  2DROP R> NEGATE
;

: SCAN ( c-addr1 u1 c --- c-addr2 u2 )
\ Find the first occurrence of character c in the string c-addr1 u1
\ c-addr2 u2 is the remaining part of the string starting with that char.
\ It is a zero-length string if c was not found.
  BEGIN
   OVER
  WHILE
   ROT DUP C@ >R OVER R> =
   IF -ROT DROP
   BREAK
   1+ -ROT SWAP 1- SWAP
  REPEAT DROP
;

: SEARCH ( c-addr1 u1 c-addr2 u2 -- c-addr3 u3 flag ) \ 94 STRING
    2>R 2DUP
    BEGIN
      DUP 1+ R@ >
    WHILE
      OVER 2R@ TUCK COMPARE 0=
      IF 2RDROP 2SWAP 2DROP TRUE EXIT THEN
      1- SWAP 1+ SWAP
    REPEAT 2RDROP 2DROP 0
;

: REL@ ( ADDR -- ADDR' )
         DUP SL@ + ;

: <'>
R>  1+ DUP 4 + >R  REL@ 4 + ;

T: >BODY 5 + ;

$20 CONSTANT BL
8 CONSTANT CELL
0 CONSTANT FALSE
-1 CONSTANT TRUE


: CATCH ( i*x xt -- j*x 0 | i*x n ) \ 94 EXCEPTION
\  <SET-EXC-HANDLER>

  SP@ >R  HANDLER @  >R
  RP@ HANDLER !
  EXECUTE
  R> HANDLER !
  RDROP
  0
;

' CATCH TO 'CATCH

: THROW
  ?DUP
  IF
   ( SAVEERR )  HANDLER @ \ A@ 
     ?DUP
     IF
      RP!
        R> HANDLER !
        R> SWAP >R
        SP! DROP R>
     ELSE
\ FATAL-HANDLER
 THEN
  THEN
;

' THROW TO 'THROW 

T: ABORT -1 THROW ;

: ?THROW        \ k*x flag throw-code -- k*x|i*x n
\ *G Perform a *\fo{THROW} of value *\i{throw-code} if flag is non-zero.
  SWAP IF THROW THEN DROP
;

: SHORT? ( n -- -129 < n < 128 )
  0x80 + 0x100 U< ;

: LONG? ( n -- -2147483648<n<2147483647 )
	$80000000 + $100000000 U< ;

: HH.
  DUP 0xF ANDC
  IF DUP 0xF AND >R
	4 RSHIFT
	T_RECURSE R>
  THEN
    DUP 10 < 0= IF 7 + THEN 48 + EMIT
;


T: BYE 0 HALT ;


: ASCII-Z     ( addr len buff -- buff-z )        \ make an ascii string
   DUP >R $! R> COUNT OVER + 0 SWAP C! ;

: ZCOUNT        \ zaddr -- zaddr len
\ *G A version of *\fo{COUNT} for zero terminated strings, returning
\ ** the address of the first character and the length.
  dup
  begin
    dup c@ ( 0<> )
   while
     1+
  repeat
  over -
;

: ASCIIZ> ZCOUNT ;

$400 VALUE /SysPad

0 VALUE SysPadBuff
0 VALUE SysPAD
0 VALUE SysPadEdge

: NEWSYSPADGET	\ u -- addr
  dup /SysPad u>
  IF  -419 throw  THEN

  SysPad  SysPadEdge UMIN OVER - 
  DUP SysPADBuff U<
  IF DROP SysPadEdge OVER - THEN
  NIP DUP TO SysPad

;

