;/
;/: DO-VOC R> 1 ANDC

DOsubVOC:
/*	mov	%rax,-0x08(%rbp)	\ 40A755 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 40A759 8F 45 F0 
/*	movq	$-0x2,%rax	\ 40A75C 	*/.byte 0x48,0xC7,0xC0,0xFE,0xFF,0xFF,0xFF
/*	and	-0x10(%rbp),%rax	\ 40A763 	*/.byte 0x48,0x23,0x45,0xF0
/*	mov	%rax,0x401586  { SLEEP+4B9  } (%rip)	\ 40A767 	*/.byte 0x48,0x89,0x5,0x18,0x6E,0xFF,0xFF
;/ CONTEXT ! ;
/*	mov	-0x08(%rbp),%rax	\ 40A76E 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40A772 C3 
;/
;/: ?PAIRS        \ x1 x1 --
;/  XOR -22 ?THROW ;


quePAIRS:
/*	xor	0x00(%rbp),%rax	\ 40A773 	*/.byte 0x48,0x33,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 40A777 	*/.byte 0x48,0x89,0x45,0x0
/*	movq	$-0x16,%rax	\ 40A77B 	*/.byte 0x48,0xC7,0xC0,0xEA,0xFF,0xFF,0xFF
	call	0x401FB7  { ?THROW } 	\ 40A782 E8 30 78 FF FF 
	ret		\ 40A787 C3 
;/
;/T: DEFINITIONS  ( --- )
;/\ Set the definitions wordlist to the last wordlist in the search order.
;/  CONTEXT @ CURRENT ! ;


DEFINITIONS:
/*	mov	%rax,-0x08(%rbp)	\ 40A788 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401586  { SLEEP+4B9  } (%rip),%rax	\ 40A78C 	*/.byte 0x48,0x8B,0x5,0xF3,0x6D,0xFF,0xFF
/*	mov	%rax,0x40160E  { SLEEP+541  } (%rip)	\ 40A793 	*/.byte 0x48,0x89,0x5,0x74,0x6E,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 40A79A 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40A79E C3 
;/
;/T: ALIGN HERE ALIGNED DP! ;


ALIGN:
/*	mov	%rax,-0x08(%rbp)	\ 40A79F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40A7A3 	*/.byte 0x48,0x8B,0x5,0xA6,0x6E,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40A7AA 	*/.byte 0x48,0x89,0x5,0xC4,0x7B,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40A7B1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401842  { ALIGNED } 	\ 40A7B5 E8 88 70 FF FF 
/*	mov	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40A7BA 	*/.byte 0x48,0x89,0x5,0x8F,0x6E,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40A7C1 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40A7C5 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40A7C9 C3 
;/T: HALIGN HERE HALIGNED DP! ;


HALIGN:
/*	mov	%rax,-0x08(%rbp)	\ 40A7CA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40A7CE 	*/.byte 0x48,0x8B,0x5,0x7B,0x6E,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40A7D5 	*/.byte 0x48,0x89,0x5,0x99,0x7B,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40A7DC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40181B  { HALIGNED } 	\ 40A7E0 E8 36 70 FF FF 
/*	mov	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40A7E5 	*/.byte 0x48,0x89,0x5,0x64,0x6E,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40A7EC 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40A7F0 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40A7F4 C3 
;/
;/0 VALUE SOURCE-ID


SOURCEsubID:
	call	0x400AF4  { DOVALUE } 	\ 40A7F5 E8 FA 62 FF FF 

	DQ 0x0
;/
;/ATIB VALUE TIB

TIB:
	call	0x400AF4  { DOVALUE } 	\ 40A802 E8 ED 62 FF FF 

	DQ 0x1110+fimg
;/
;/: #TIB #ATIB TIB ATIB = CELL AND + ;

hashTIB:
/*	mov	%rax,-0x08(%rbp)	\ 40A80F 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401340  { SLEEP+273  } (%rip),%rax	\ 40A813 	*/.byte 0x48,0x8D,0x5,0x26,0x6B,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40A81A 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40A81E 	*/.byte 0x48,0x8B,0x5,0xE2,0xFF,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40A825 	*/.byte 0x48,0x89,0x45,0xE8
/*	lea	0x401110  { SLEEP+43  } (%rip),%rax	\ 40A829 	*/.byte 0x48,0x8D,0x5,0xE0,0x68,0xFF,0xFF
/*	xor	-0x18(%rbp),%rax	\ 40A830 	*/.byte 0x48,0x33,0x45,0xE8
/*	subq	$0x01,%rax	\ 40A834 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40A838 	*/.byte 0x48,0x19,0xC0
/*	and	$0x8,%eax	\ 40A83B 	*/.byte 0x25,0x8,0x0,0x0,0x0
/*	add	-0x10(%rbp),%rax	\ 40A840 	*/.byte 0x48,0x3,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 40A844 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40A848 C3 
;/
;/: SOURCE! ( c-addr u -- ) 
;/ SWAP TO TIB  #TIB ! ;


SOURCEsave:
/*	mov	0x00(%rbp),%rdx	\ 40A849 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40A84D 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,0x40A807  { TIB+5  } (%rip)	\ 40A851 	*/.byte 0x48,0x89,0x15,0xAF,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40A858 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x401340  { SLEEP+273  } (%rip),%rax	\ 40A85C 	*/.byte 0x48,0x8D,0x5,0xDD,0x6A,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 40A863 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40A867 	*/.byte 0x48,0x8B,0x5,0x99,0xFF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40A86E 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x401110  { SLEEP+43  } (%rip),%rax	\ 40A872 	*/.byte 0x48,0x8D,0x5,0x97,0x68,0xFF,0xFF
/*	xor	-0x10(%rbp),%rax	\ 40A879 	*/.byte 0x48,0x33,0x45,0xF0
/*	subq	$0x01,%rax	\ 40A87D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40A881 	*/.byte 0x48,0x19,0xC0
/*	and	$0x8,%eax	\ 40A884 	*/.byte 0x25,0x8,0x0,0x0,0x0
/*	add	-0x08(%rbp),%rax	\ 40A889 	*/.byte 0x48,0x3,0x45,0xF8
/*	mov	0x00(%rbp),%rdx	\ 40A88D 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rdx,(%rax)	\ 40A891 	*/.byte 0x48,0x89,0x10
/*	mov	0x08(%rbp),%rax	\ 40A894 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40A898 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 40A89C C3 
;/
;/: SOURCE TIB #TIB @ ;


SOURCE:
/*	mov	%rax,-0x08(%rbp)	\ 40A89D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40A8A1 	*/.byte 0x48,0x8B,0x5,0x5F,0xFF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40A8A8 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x401340  { SLEEP+273  } (%rip),%rax	\ 40A8AC 	*/.byte 0x48,0x8D,0x5,0x8D,0x6A,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40A8B3 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40A8B7 	*/.byte 0x48,0x8B,0x5,0x49,0xFF,0xFF,0xFF
/*	mov	%rax,-0x20(%rbp)	\ 40A8BE 	*/.byte 0x48,0x89,0x45,0xE0
/*	lea	0x401110  { SLEEP+43  } (%rip),%rax	\ 40A8C2 	*/.byte 0x48,0x8D,0x5,0x47,0x68,0xFF,0xFF
/*	xor	-0x20(%rbp),%rax	\ 40A8C9 	*/.byte 0x48,0x33,0x45,0xE0
/*	subq	$0x01,%rax	\ 40A8CD 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40A8D1 	*/.byte 0x48,0x19,0xC0
/*	and	$0x8,%eax	\ 40A8D4 	*/.byte 0x25,0x8,0x0,0x0,0x0
/*	add	-0x18(%rbp),%rax	\ 40A8D9 	*/.byte 0x48,0x3,0x45,0xE8
/*	mov	(%rax),%rax	\ 40A8DD 	*/.byte 0x48,0x8B,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40A8E0 	*/.byte 0x48,0x8D,0x6D,0xF0
	ret		\ 40A8E4 C3 
;/
;/
;/: EndOfChunk ( -- flag )
;/ >IN @ SOURCE NIP < 0=        \ >IN 


EndOfChunk:
/*	mov	%rax,-0x08(%rbp)	\ 40A8E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401310  { SLEEP+243  } (%rip),%rax	\ 40A8E9 	*/.byte 0x48,0x8B,0x5,0x20,0x6A,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40A8F0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A89D  { SOURCE } 	\ 40A8F4 E8 A4 FF FF FF 
/*	cmp	0x08(%rbp),%rax	\ 40A8F9 	*/.byte 0x48,0x3B,0x45,0x8
	setNle	%al	\ 40A8FD F 9F C0 
/*		neg	%al	\ 40A900 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 40A902 	*/.byte 0x48,0xF,0xBE,0xC0
/*	subq	$0x01,%rax	\ 40A906 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40A90A 	*/.byte 0x48,0x19,0xC0
/*	lea	0x10(%rbp),%rbp	\ 40A90D 	*/.byte 0x48,0x8D,0x6D,0x10
;/;
	ret		\ 40A911 C3 
;/\ T\EOF
;/
;/: IsDelimiter ( char -- flag )
;/ BL 1+ < ;


IsDelimiter:
/*	mov	%rax,-0x08(%rbp)	\ 40A912 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x21,%eax	\ 40A916 	*/.byte 0xB8,0x21,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 40A91B 	*/.byte 0x48,0x3B,0x45,0xF8
	setNle	%al	\ 40A91F F 9F C0 
/*		neg	%al	\ 40A922 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 40A924 	*/.byte 0x48,0xF,0xBE,0xC0
	ret		\ 40A928 C3 
;/
;/: CharAddr ( -- c-addr )
;/  SOURCE DROP >IN @ +


CharAddr:
	call	0x40A89D  { SOURCE } 	\ 40A929 E8 6F FF FF FF 
/*	mov	0x401310  { SLEEP+243  } (%rip),%rax	\ 40A92E 	*/.byte 0x48,0x8B,0x5,0xDB,0x69,0xFF,0xFF
/*	add	0x00(%rbp),%rax	\ 40A935 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40A939 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40A93D C3 
;/
;/: PeekChar ( -- char )
;/  CharAddr C@


PeekChar:
	call	0x40A929  { CharAddr } 	\ 40A93E E8 E6 FF FF FF 
/*	movzb	(%rax),%eax	\ 40A943 	*/.byte 0xF,0xB6,0x0
;/;
	ret		\ 40A946 C3 
;/
;/: GetChar ( -- char flag )
;/ EndOfChunk


GetChar:
	call	0x40A8E5  { EndOfChunk } 	\ 40A947 E8 99 FF FF FF 
;/ IF 0 FALSE
	test	%rax,%rax	\ 40A94C 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40A94F 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40A953 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40A977  { GetChar+30  } 	\ 40A957 	*/.byte 0xF,0x84,0x1A,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40A95D 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x0,-0x10(%rbp)	\ 40A961 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 40A969 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40A96E 	*/.byte 0x48,0x8D,0x6D,0xF0
;/	ELSE PeekChar TRUE THEN ;
/*	jmp	0x40A98B  { GetChar+44  } 	\ 40A972 	*/.byte 0xE9,0x14,0x0,0x0,0x0
	call	0x40A93E  { PeekChar } 	\ 40A977 E8 C2 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40A97C 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1,%rax	\ 40A980 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40A987 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40A98B C3 
;/
;/: OnDelimiter ( -- flag )
;/	GetChar SWAP IsDelimiter AND ;


OnDelimiter:
	call	0x40A947  { GetChar } 	\ 40A98C E8 B6 FF FF FF 
/*	mov	0x00(%rbp),%rdx	\ 40A991 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40A995 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40A999 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	$0x21,%eax	\ 40A99D 	*/.byte 0xB8,0x21,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 40A9A2 	*/.byte 0x48,0x3B,0x45,0xF8
	setNle	%al	\ 40A9A6 F 9F C0 
/*		neg	%al	\ 40A9A9 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 40A9AB 	*/.byte 0x48,0xF,0xBE,0xC0
/*	and	0x00(%rbp),%rax	\ 40A9AF 	*/.byte 0x48,0x23,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40A9B3 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40A9B7 C3 
;/
;/: SkipDelimiters ( -- ) \ 
;/	BEGIN	OnDelimiter


SkipDelimiters:
	call	0x40A98C  { OnDelimiter } 	\ 40A9B8 E8 CF FF FF FF 
;/	WHILE	>IN 1+!
	test	%rax,%rax	\ 40A9BD 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40A9C0 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40A9C4 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40A9E5  { SkipDelimiters+2D  } 	\ 40A9C8 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40A9CE 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401310  { SLEEP+243  } (%rip),%rax	\ 40A9D2 	*/.byte 0x48,0x8D,0x5,0x37,0x69,0xFF,0xFF
/*	incq	(%rax)	\ 40A9D9 	*/.byte 0x48,0xFF,0x0
/*	mov	-0x08(%rbp),%rax	\ 40A9DC 	*/.byte 0x48,0x8B,0x45,0xF8
;/	REPEAT >IN @   >IN_WORD ! ;
/*	jmp	0x40A9B8  { SkipDelimiters } 	\ 40A9E0 	*/.byte 0xE9,0xD3,0xFF,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 40A9E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401310  { SLEEP+243  } (%rip),%rax	\ 40A9E9 	*/.byte 0x48,0x8B,0x5,0x20,0x69,0xFF,0xFF
/*	mov	%rax,0x401318  { SLEEP+24B  } (%rip)	\ 40A9F0 	*/.byte 0x48,0x89,0x5,0x21,0x69,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 40A9F7 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40A9FB C3 
;/
;/: OnNotDelimiter ( -- flag )
;/  GetChar SWAP IsDelimiter 0= AND ;


OnNotDelimiter:
	call	0x40A947  { GetChar } 	\ 40A9FC E8 46 FF FF FF 
/*	mov	0x00(%rbp),%rdx	\ 40AA01 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40AA05 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40AA09 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	$0x21,%eax	\ 40AA0D 	*/.byte 0xB8,0x21,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 40AA12 	*/.byte 0x48,0x3B,0x45,0xF8
	setNle	%al	\ 40AA16 F 9F C0 
/*		neg	%al	\ 40AA19 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 40AA1B 	*/.byte 0x48,0xF,0xBE,0xC0
/*	subq	$0x01,%rax	\ 40AA1F 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40AA23 	*/.byte 0x48,0x19,0xC0
/*	and	0x00(%rbp),%rax	\ 40AA26 	*/.byte 0x48,0x23,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AA2A 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40AA2E C3 
;/
;/: SkipWord ( -- ) \ 
;/ BEGIN	OnNotDelimiter


SkipWord:
	call	0x40A9FC  { OnNotDelimiter } 	\ 40AA2F E8 C8 FF FF FF 
;/ WHILE	>IN 1+!
	test	%rax,%rax	\ 40AA34 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40AA37 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AA3B 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40AA5C  { SkipWord+2D  } 	\ 40AA3F 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40AA45 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401310  { SLEEP+243  } (%rip),%rax	\ 40AA49 	*/.byte 0x48,0x8D,0x5,0xC0,0x68,0xFF,0xFF
/*	incq	(%rax)	\ 40AA50 	*/.byte 0x48,0xFF,0x0
/*	mov	-0x08(%rbp),%rax	\ 40AA53 	*/.byte 0x48,0x8B,0x45,0xF8
;/ REPEAT ;
/*	jmp	0x40AA2F  { SkipWord } 	\ 40AA57 	*/.byte 0xE9,0xD3,0xFF,0xFF,0xFF
	ret		\ 40AA5C C3 
;/
;/
;/: ParseWord ( -- c-addr u )
;/ CharAddr >IN @  SkipWord


ParseWord:
	call	0x40A929  { CharAddr } 	\ 40AA5D E8 C7 FE FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40AA62 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401310  { SLEEP+243  } (%rip),%rax	\ 40AA66 	*/.byte 0x48,0x8B,0x5,0xA3,0x68,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40AA6D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40AA2F  { SkipWord } 	\ 40AA71 E8 B9 FF FF FF 
;/ >IN @ - NEGATE ;
/*	mov	%rax,-0x08(%rbp)	\ 40AA76 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401310  { SLEEP+243  } (%rip),%rax	\ 40AA7A 	*/.byte 0x48,0x8B,0x5,0x8F,0x68,0xFF,0xFF
/*	sub	-0x08(%rbp),%rax	\ 40AA81 	*/.byte 0x48,0x2B,0x45,0xF8
	ret		\ 40AA85 C3 
;/
;/: PSKIP ( char "ccc<char>" -- )
;/\ 
;/  BEGIN
;/    DUP GetChar >R = R> AND


PSKIP:
/*	mov	%rax,-0x08(%rbp)	\ 40AA86 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40AA8A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A947  { GetChar } 	\ 40AA8E E8 B4 FE FF FF 
	Push	%rax	\ 40AA93 50 
/*	mov	0x00(%rbp),%rax	\ 40AA94 	*/.byte 0x48,0x8B,0x45,0x0
/*	xor	0x08(%rbp),%rax	\ 40AA98 	*/.byte 0x48,0x33,0x45,0x8
/*	subq	$0x01,%rax	\ 40AA9C 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40AAA0 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,0x08(%rbp)	\ 40AAA3 	*/.byte 0x48,0x89,0x45,0x8
	pop	%rax	\ 40AAA7 58 
/*	and	0x08(%rbp),%rax	\ 40AAA8 	*/.byte 0x48,0x23,0x45,0x8
	test	%rax,%rax	\ 40AAAC 48 85 C0 
/*	mov	0x10(%rbp),%rax	\ 40AAAF 	*/.byte 0x48,0x8B,0x45,0x10
;/  WHILE
/*	lea	0x18(%rbp),%rbp	\ 40AAB3 	*/.byte 0x48,0x8D,0x6D,0x18
/*	jz	0x40AAD4  { PSKIP+4E  } 	\ 40AAB7 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
;/    >IN 1+!
/*	mov	%rax,-0x08(%rbp)	\ 40AABD 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401310  { SLEEP+243  } (%rip),%rax	\ 40AAC1 	*/.byte 0x48,0x8D,0x5,0x48,0x68,0xFF,0xFF
/*	incq	(%rax)	\ 40AAC8 	*/.byte 0x48,0xFF,0x0
/*	mov	-0x08(%rbp),%rax	\ 40AACB 	*/.byte 0x48,0x8B,0x45,0xF8
;/  REPEAT DROP
/*	jmp	0x40AA86  { PSKIP } 	\ 40AACF 	*/.byte 0xE9,0xB2,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40AAD4 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AAD8 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40AADC C3 
;/
;/: PARSE-NAME ( -- c-addr u )
;/  SkipDelimiters


PARSEsubNAME:
	call	0x40A9B8  { SkipDelimiters } 	\ 40AADD E8 D6 FE FF FF 
;/  ParseWord
	call	0x40AA5D  { ParseWord } 	\ 40AAE2 E8 76 FF FF FF 
;/  >IN @ 1+ #TIB @ MIN >IN !   \ 
/*	mov	%rax,-0x08(%rbp)	\ 40AAE7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401310  { SLEEP+243  } (%rip),%rax	\ 40AAEB 	*/.byte 0x48,0x8B,0x5,0x1E,0x68,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 40AAF2 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 40AAF6 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x401340  { SLEEP+273  } (%rip),%rax	\ 40AAFA 	*/.byte 0x48,0x8D,0x5,0x3F,0x68,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40AB01 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40AB05 	*/.byte 0x48,0x8B,0x5,0xFB,0xFC,0xFF,0xFF
/*	mov	%rax,-0x20(%rbp)	\ 40AB0C 	*/.byte 0x48,0x89,0x45,0xE0
/*	lea	0x401110  { SLEEP+43  } (%rip),%rax	\ 40AB10 	*/.byte 0x48,0x8D,0x5,0xF9,0x65,0xFF,0xFF
/*	xor	-0x20(%rbp),%rax	\ 40AB17 	*/.byte 0x48,0x33,0x45,0xE0
/*	subq	$0x01,%rax	\ 40AB1B 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40AB1F 	*/.byte 0x48,0x19,0xC0
/*	and	$0x8,%eax	\ 40AB22 	*/.byte 0x25,0x8,0x0,0x0,0x0
/*	add	-0x18(%rbp),%rax	\ 40AB27 	*/.byte 0x48,0x3,0x45,0xE8
/*	mov	(%rax),%rax	\ 40AB2B 	*/.byte 0x48,0x8B,0x0
/*	cmp	-0x10(%rbp),%rax	\ 40AB2E 	*/.byte 0x48,0x3B,0x45,0xF0
/*	cmovNle/*	cmov	-0x10(%rbp),%rax	\ 40AB32 	*/.byte 0x48,0xF,0x4F,0x45,0xF0
/*	mov	%rax,0x401310  { SLEEP+243  } (%rip)	\ 40AB37 	*/.byte 0x48,0x89,0x5,0xD2,0x67,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 40AB3E 	*/.byte 0x48,0x8B,0x45,0xF8
;/;
	ret		\ 40AB42 C3 
;/
;/: SkipUpTo ( char -- ) \ 
;/  BEGIN
;/    DUP GetChar >R <> R> AND


SkipUpTo:
/*	mov	%rax,-0x08(%rbp)	\ 40AB43 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40AB47 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A947  { GetChar } 	\ 40AB4B E8 F7 FD FF FF 
	Push	%rax	\ 40AB50 50 
/*	mov	0x00(%rbp),%rax	\ 40AB51 	*/.byte 0x48,0x8B,0x45,0x0
/*	xor	0x08(%rbp),%rax	\ 40AB55 	*/.byte 0x48,0x33,0x45,0x8
/*		negq	%rax	\ 40AB59 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40AB5C 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,0x08(%rbp)	\ 40AB5F 	*/.byte 0x48,0x89,0x45,0x8
	pop	%rax	\ 40AB63 58 
/*	and	0x08(%rbp),%rax	\ 40AB64 	*/.byte 0x48,0x23,0x45,0x8
	test	%rax,%rax	\ 40AB68 48 85 C0 
/*	mov	0x10(%rbp),%rax	\ 40AB6B 	*/.byte 0x48,0x8B,0x45,0x10
;/  WHILE
/*	lea	0x18(%rbp),%rbp	\ 40AB6F 	*/.byte 0x48,0x8D,0x6D,0x18
/*	jz	0x40AB90  { SkipUpTo+4D  } 	\ 40AB73 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
;/    >IN 1+!
/*	mov	%rax,-0x08(%rbp)	\ 40AB79 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401310  { SLEEP+243  } (%rip),%rax	\ 40AB7D 	*/.byte 0x48,0x8D,0x5,0x8C,0x67,0xFF,0xFF
/*	incq	(%rax)	\ 40AB84 	*/.byte 0x48,0xFF,0x0
/*	mov	-0x08(%rbp),%rax	\ 40AB87 	*/.byte 0x48,0x8B,0x45,0xF8
;/  REPEAT DROP
/*	jmp	0x40AB43  { SkipUpTo } 	\ 40AB8B 	*/.byte 0xE9,0xB3,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40AB90 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AB94 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40AB98 C3 
;/
;/: PARSE ( char "ccc<char>" -- c-addr u ) \ 94 CORE EXT
;/  CharAddr >IN @


PARSE:
	call	0x40A929  { CharAddr } 	\ 40AB99 E8 8B FD FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40AB9E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401310  { SLEEP+243  } (%rip),%rdx	\ 40ABA2 	*/.byte 0x48,0x8B,0x15,0x67,0x67,0xFF,0xFF
/*	mov	%rdx,-0x08(%rbp)	\ 40ABA9 	*/.byte 0x48,0x89,0x55,0xF8
;/  ROT SkipUpTo
/*	xchg	%rdx,%rax	\ 40ABAD 	*/.byte 0x48,0x92
/*	mov	0x00(%rbp),%rax	\ 40ABAF 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rdx,0x00(%rbp)	\ 40ABB3 	*/.byte 0x48,0x89,0x55,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40ABB7 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40AB43  { SkipUpTo } 	\ 40ABBB E8 83 FF FF FF 
;/  >IN @ - NEGATE
/*	mov	%rax,-0x08(%rbp)	\ 40ABC0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401310  { SLEEP+243  } (%rip),%rax	\ 40ABC4 	*/.byte 0x48,0x8B,0x5,0x45,0x67,0xFF,0xFF
/*	sub	-0x08(%rbp),%rax	\ 40ABCB 	*/.byte 0x48,0x2B,0x45,0xF8
;/  >IN 1+!
/*	mov	%rax,-0x08(%rbp)	\ 40ABCF 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401310  { SLEEP+243  } (%rip),%rax	\ 40ABD3 	*/.byte 0x48,0x8D,0x5,0x36,0x67,0xFF,0xFF
/*	incq	(%rax)	\ 40ABDA 	*/.byte 0x48,0xFF,0x0
/*	mov	-0x08(%rbp),%rax	\ 40ABDD 	*/.byte 0x48,0x8B,0x45,0xF8
;/;
	ret		\ 40ABE1 C3 
;/
;/
;/: SEARCH-NFA1 ( c-addr u wid --- 0 | nfa )
;/	@


SEARCHsubNFA1:
/*	mov	(%rax),%rax	\ 40ABE2 	*/.byte 0x48,0x8B,0x0
;/	BEGIN   DUP
/*	mov	%rax,-0x08(%rbp)	\ 40ABE5 	*/.byte 0x48,0x89,0x45,0xF8
	test	%rax,%rax	\ 40ABE9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40ABEC 	*/.byte 0x48,0x8B,0x45,0xF8
;/	WHILE
/*	jz	0x40AC50  { SEARCH-NFA1+6E  } 	\ 40ABF0 	*/.byte 0xF,0x84,0x5A,0x0,0x0,0x0
;/	>R 2DUP	R@ COUNT COMPARE 0= 
	Push	%rax	\ 40ABF6 50 
/*	mov	0x00(%rbp),%rax	\ 40ABF7 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	0x08(%rbp),%rdx	\ 40ABFB 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rdx,-0x08(%rbp)	\ 40ABFF 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 40AC03 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	(%rsp),%rax	\ 40AC07 	*/.byte 0x48,0x8B,0x4,0x24
/*	lea	0x01(%rax),%rdx	\ 40AC0B 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40AC0F 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x18(%rbp)	\ 40AC13 	*/.byte 0x48,0x89,0x55,0xE8
/*	lea	-0x18(%rbp),%rbp	\ 40AC17 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x401C3C  { COMPARE } 	\ 40AC1B E8 1C 70 FF FF 
/*	subq	$0x01,%rax	\ 40AC20 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40AC24 	*/.byte 0x48,0x19,0xC0
;/		IF 2DROP R>
	test	%rax,%rax	\ 40AC27 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40AC2A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AC2E 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40AC3E  { SEARCH-NFA1+5C  } 	\ 40AC32 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
	pop	%rax	\ 40AC38 58 
/*	lea	0x08(%rbp),%rbp	\ 40AC39 	*/.byte 0x48,0x8D,0x6D,0x8
;/		BREAK
	ret		\ 40AC3D C3 
;/ 	R> CDR
/*	mov	%rax,-0x08(%rbp)	\ 40AC3E 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40AC42 58 
/*	mov	-0x08(%rax),%rax	\ 40AC43 	*/.byte 0x48,0x8B,0x40,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40AC47 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	REPEAT
/*	jmp	0x40ABE5  { SEARCH-NFA1+3  } 	\ 40AC4B 	*/.byte 0xE9,0x95,0xFF,0xFF,0xFF
;/	2DROP DROP 0 \ Not found.
/*	mov	$0x0,%eax	\ 40AC50 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	0x10(%rbp),%rbp	\ 40AC55 	*/.byte 0x48,0x8D,0x6D,0x10
;/;
	ret		\ 40AC59 C3 
;/
;/' SEARCH-NFA1 ->DEFER SEARCH-NFA


SEARCHsubNFA:
	call	0x400B02  { DOVECT } 	\ 40AC5A E8 A3 5E FF FF 
	.quad 0x40ABE2  { SEARCH-NFA1 } 

;/
;/: SEARCH-WORDLIST1 ( c-addr u wid --- 0 | xt 1 xt -1)
;/\ Search the wordlist with address wid for the name c-addr u.
;/\ Return 0 if not found, the execution token xt and -1 for non-immediate
;/\ words and xt and 1 for immediate words.
;/        SEARCH-NFA DUP

SEARCHsubWORDLIST1:
	call	0x40AC5A  { SEARCH-NFA } 	\ 40AC67 E8 EE FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40AC6C 	*/.byte 0x48,0x89,0x45,0xF8
	test	%rax,%rax	\ 40AC70 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40AC73 	*/.byte 0x48,0x8B,0x45,0xF8
;/	IF	DUP NAME> SWAP
/*	jz	0x40ACA1  { SEARCH-WORDLIST1+3A  } 	\ 40AC77 	*/.byte 0xF,0x84,0x24,0x0,0x0,0x0
/*	mov	%rax,%rdx	\ 40AC7D 	*/.byte 0x48,0x89,0xC2
/*	mov	-0x18(%rax),%rax	\ 40AC80 	*/.byte 0x48,0x8B,0x40,0xE8
/*	mov	%rax,-0x08(%rbp)	\ 40AC84 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x10(%rdx),%rax	\ 40AC88 	*/.byte 0x48,0x8D,0x42,0xF0
/*	mov	(%rax),%eax	\ 40AC8C 	*/.byte 0x8B,0x0
/*	and	$0x1,%eax	\ 40AC8E 	*/.byte 0x25,0x1,0x0,0x0,0x0
;/		NAME>F L@ 1 AND 1- 1 OR
/*	lea	-0x01(%rax),%rax	\ 40AC93 	*/.byte 0x48,0x8D,0x40,0xFF
/*	or	$0x1,%rax	\ 40AC97 	*/.byte 0x48,0xD,0x1,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40AC9D 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	THEN
;/
;/;
	ret		\ 40ACA1 C3 
;/
;/' SEARCH-WORDLIST1 ->DEFER SEARCH-WORDLIST


SEARCHsubWORDLIST:
	call	0x400B02  { DOVECT } 	\ 40ACA2 E8 5B 5E FF FF 
	.quad 0x40AC67  { SEARCH-WORDLIST1 } 

;/
;/: SFIND ( addr len --- addr len 0| xt 1|xt -1 )
;/\ Search all word lists in the search order for the name in the
;/\ counted string at c-addr. If not found return the name address and 0.
;/\ If found return the execution token xt and -1 if the word is non-immediate
;/\ and 1 if the word is immediate.
;/\ ." SFIND=<"
;/  CONTEXT

SFIND:
/*	mov	%rax,-0x08(%rbp)	\ 40ACAF 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401586  { SLEEP+4B9  } (%rip),%rax	\ 40ACB3 	*/.byte 0x48,0x8D,0x5,0xCC,0x68,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40ACBA 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  BEGIN	DUP @ \ DUP H.
/*	mov	%rax,-0x08(%rbp)	\ 40ACBE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%rax	\ 40ACC2 	*/.byte 0x48,0x8B,0x0
	test	%rax,%rax	\ 40ACC5 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40ACC8 	*/.byte 0x48,0x8B,0x45,0xF8
;/  WHILE	>R
/*	jz	0x40AD2D  { SFIND+7E  } 	\ 40ACCC 	*/.byte 0xF,0x84,0x5B,0x0,0x0,0x0
	Push	%rax	\ 40ACD2 50 
/*	mov	0x00(%rbp),%rax	\ 40ACD3 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	0x08(%rbp),%rdx	\ 40ACD7 	*/.byte 0x48,0x8B,0x55,0x8
;/	2DUP  R@  @  SEARCH-WORDLIST ?DUP
/*	mov	%rdx,-0x08(%rbp)	\ 40ACDB 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 40ACDF 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	(%rsp),%rax	\ 40ACE3 	*/.byte 0x48,0x8B,0x4,0x24
/*	mov	(%rax),%rax	\ 40ACE7 	*/.byte 0x48,0x8B,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40ACEA 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x40ACA2  { SEARCH-WORDLIST } 	\ 40ACEE E8 AF FF FF FF 
	call	0x4007EC  { ?DUP } 	\ 40ACF3 E8 F4 5A FF FF 
;/	IF    RDROP 2NIP EXIT \ Exit if found.
	test	%rax,%rax	\ 40ACF8 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40ACFB 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40ACFF 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40AD1B  { SFIND+6C  } 	\ 40AD03 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	lea	0x08(%rsp),%rsp	\ 40AD09 	*/.byte 0x48,0x8D,0x64,0x24,0x8
/*	mov	0x00(%rbp),%rdx	\ 40AD0E 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rdx,0x10(%rbp)	\ 40AD12 	*/.byte 0x48,0x89,0x55,0x10
/*	lea	0x10(%rbp),%rbp	\ 40AD16 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 40AD1A C3 
;/	THEN
;/	R> CELL+
/*	mov	%rax,-0x08(%rbp)	\ 40AD1B 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40AD1F 58 
/*	lea	0x08(%rax),%rax	\ 40AD20 	*/.byte 0x48,0x8D,0x40,0x8
/*	lea	-0x08(%rbp),%rbp	\ 40AD24 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  REPEAT @
/*	jmp	0x40ACBE  { SFIND+F  } 	\ 40AD28 	*/.byte 0xE9,0x91,0xFF,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40AD2D 	*/.byte 0x48,0x8B,0x0
;/;
	ret		\ 40AD30 C3 
;/
;/: ?STACK ( -> ) \ 
;/ SP@ SP0 @ SWAP U< IF SP0 @ SP! -4 THROW THEN


queSTACK:
	call	0x400465  { SP@ } 	\ 40AD31 E8 2F 57 FF FF 
/*	mov	0x401628  { ORIGVIEWLINK+12  } (%rip),%rdx	\ 40AD36 	*/.byte 0x48,0x8B,0x15,0xEB,0x68,0xFF,0xFF
/*	mov	%rdx,-0x08(%rbp)	\ 40AD3D 	*/.byte 0x48,0x89,0x55,0xF8
/*	cmp	%rax,-0x08(%rbp)	\ 40AD41 	*/.byte 0x48,0x39,0x45,0xF8
/*	sbb	%rax,%rax	\ 40AD45 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40AD48 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40AD4B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AD4F 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40AD81  { ?STACK+50  } 	\ 40AD53 	*/.byte 0xF,0x84,0x28,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40AD59 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401628  { ORIGVIEWLINK+12  } (%rip),%rax	\ 40AD5D 	*/.byte 0x48,0x8B,0x5,0xC4,0x68,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40AD64 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400471  { SP! } 	\ 40AD68 E8 4 57 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40AD6D 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x4,%rax	\ 40AD71 	*/.byte 0x48,0xC7,0xC0,0xFC,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40AD78 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 40AD7C E8 AF 71 FF FF 
;/\  SP@ HERE - 0xE00 U< IF ." STACK: MAM" ABORT THEN
;/;
	ret		\ 40AD81 C3 
;/
;/' NOOP ->DEFER MEM_TST


MEM_TST:
	call	0x400B02  { DOVECT } 	\ 40AD82 E8 7B 5D FF FF 
	.quad 0x400404  { NOOP } 

;/
;/: INTERPRET_ ( -> ) \ 
;/  SAVEERR? ON

INTERPRET_:
/*	movq	$-0x1,0x401330  { SLEEP+263  } (%rip)	\ 40AD8F 	*/.byte 0x48,0xC7,0x5,0x96,0x65,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
;/  BEGIN	PARSE-NAME \  ." <" 2DUP  TYPE ." >"
	call	0x40AADD  { PARSE-NAME } 	\ 40AD9A E8 3E FD FF FF 
;/  DUP
/*	mov	%rax,-0x08(%rbp)	\ 40AD9F 	*/.byte 0x48,0x89,0x45,0xF8
	test	%rax,%rax	\ 40ADA3 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40ADA6 	*/.byte 0x48,0x8B,0x45,0xF8
;/  WHILE
/*	jz	0x40AE08  { INTERPRET_+79  } 	\ 40ADAA 	*/.byte 0xF,0x84,0x58,0x0,0x0,0x0
;/
;/ SFIND ?DUP
	call	0x40ACAF  { SFIND } 	\ 40ADB0 E8 FA FE FF FF 
	call	0x4007EC  { ?DUP } 	\ 40ADB5 E8 32 5A FF FF 
;/	IF     STATE @ =
	test	%rax,%rax	\ 40ADBA 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40ADBD 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40ADC1 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40ADFE  { INTERPRET_+6F  } 	\ 40ADC5 	*/.byte 0xF,0x84,0x33,0x0,0x0,0x0
/*	xor	0x4010F8  { SLEEP+2B  } (%rip),%rax	\ 40ADCB 	*/.byte 0x48,0x33,0x5,0x26,0x63,0xFF,0xFF
/*	subq	$0x01,%rax	\ 40ADD2 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40ADD6 	*/.byte 0x48,0x19,0xC0
;/		IF COMPILE,
	test	%rax,%rax	\ 40ADD9 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40ADDC 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40ADE0 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40ADF4  { INTERPRET_+65  } 	\ 40ADE4 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x40A089  { COMPILE, } 	\ 40ADEA E8 9A F2 FF FF 
;/		ELSE EXECUTE \ LLL @ IF ." {L}" 0 LLL ! THEN
/*	jmp	0x40ADF9  { INTERPRET_+6A  } 	\ 40ADEF 	*/.byte 0xE9,0x5,0x0,0x0,0x0
	call	0x40047D  { EXECUTE } 	\ 40ADF4 E8 84 56 FF FF 
;/		THEN
;/	ELSE 	?SLITERAL
/*	jmp	0x40AE03  { INTERPRET_+74  } 	\ 40ADF9 	*/.byte 0xE9,0x5,0x0,0x0,0x0
	call	0x40A6F0  { ?SLITERAL } 	\ 40ADFE E8 ED F8 FF FF 
;/        THEN
;/
;/\    ?STACK  MEM_TST \  CACHBREAK
;/  REPEAT 2DROP
/*	jmp	0x40AD9A  { INTERPRET_+B  } 	\ 40AE03 	*/.byte 0xE9,0x92,0xFF,0xFF,0xFF
/*	mov	0x08(%rbp),%rax	\ 40AE08 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40AE0C 	*/.byte 0x48,0x8D,0x6D,0x10
;/;
	ret		\ 40AE10 C3 
;/
;/
;/\ - &INTERPRET_ VARIABLE  &INTERPRET_
;/
;/\ CREATE IIII ' INTERPRET_ ,
;/\ CREATE &INTERPRET ' INTERPRET_ ,
;/\ : INTERPRET &INTERPRET PERFORM ;
;/' INTERPRET_ ->DEFER INTERPRET


INTERPRET:
	call	0x400B02  { DOVECT } 	\ 40AE11 E8 EC 5C FF FF 
	.quad 0x40AD8F  { INTERPRET_ } 

;/
;/: .ID ( NFA -- )   COUNT TYPE ;

dotID:
/*	lea	0x01(%rax),%rdx	\ 40AE1E 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40AE22 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40AE26 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40AE2A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40177E  { TYPE } 	\ 40AE2E E8 4B 69 FF FF 
	ret		\ 40AE33 C3 
;/
;/
;/VARIABLE _fp1

	DQ 0x0
	DB 0x0,0x0,0x0,0x0
;/VARIABLE _fp2
	DQ 0x0
;/VARIABLE _addr 4 ALLOT
	DQ 0x0
	DB 0x0,0x0,0x0,0x0
;/VARIABLE _dos
	DQ 0x0
	DB 0x0,0x0,0x0,0x0
;/CREATE LT  $0A0A0A0A ,
	DQ 0xA0A0A0A
;/
;/
;/: READ-LINE ( c-addr u1 fileid -- u2 flag ior ) \ 94 FILE
;/  OVER 0= IF DROP NIP TRUE 0 BREAK

READsubLINE:
/*	mov	%rax,-0x08(%rbp)	\ 40AE68 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40AE6C 	*/.byte 0x48,0x8B,0x45,0x0
/*	subq	$0x01,%rax	\ 40AE70 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40AE74 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40AE77 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40AE7A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40AE9A  { READ-LINE+32  } 	\ 40AE7E 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40AE84 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rax,0x08(%rbp)	\ 40AE88 	*/.byte 0x48,0x89,0x45,0x8
/*	movq	$-0x1,0x00(%rbp)	\ 40AE8C 	*/.byte 0x48,0xC7,0x45,0x0,0xFF,0xFF,0xFF,0xFF
/*	mov	$0x0,%eax	\ 40AE94 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 40AE99 C3 
;/  _dos 0!
/*	movq	$0x0,0x40AE58  { .ID+3A  } (%rip)	\ 40AE9A 	*/.byte 0x48,0xC7,0x5,0xB3,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0
;/  DUP >R
/*	mov	%rax,-0x08(%rbp)	\ 40AEA5 	*/.byte 0x48,0x89,0x45,0xF8
	Push	%rax	\ 40AEA9 50 
/*	mov	-0x08(%rbp),%rax	\ 40AEAA 	*/.byte 0x48,0x8B,0x45,0xF8
;/  FILE-POSITION IF 2DROP 0 0 THEN _fp1 ! _fp2 !
	call	0x400E34  { FILE-POSITION } 	\ 40AEAE E8 81 5F FF FF 
	test	%rax,%rax	\ 40AEB3 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40AEB6 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AEBA 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40AED1  { READ-LINE+69  } 	\ 40AEBE 	*/.byte 0xF,0x84,0xD,0x0,0x0,0x0
/*	movq	$0x0,0x00(%rbp)	\ 40AEC4 	*/.byte 0x48,0xC7,0x45,0x0,0x0,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 40AECC 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	mov	%rax,0x40AE38  { .ID+1A  } (%rip)	\ 40AED1 	*/.byte 0x48,0x89,0x5,0x60,0xFF,0xFF,0xFF
/*	lea	0x40AE40  { .ID+22  } (%rip),%rax	\ 40AED8 	*/.byte 0x48,0x8D,0x5,0x61,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rdx	\ 40AEDF 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rdx,(%rax)	\ 40AEE3 	*/.byte 0x48,0x89,0x10
/*	mov	0x10(%rbp),%rax	\ 40AEE6 	*/.byte 0x48,0x8B,0x45,0x10
/*	mov	%rax,0x40AE48  { .ID+2A  } (%rip)	\ 40AEEA 	*/.byte 0x48,0x89,0x5,0x57,0xFF,0xFF,0xFF
;/\  1+ \ LTL @ +
;/  OVER _addr !
/*	mov	0x08(%rbp),%rax	\ 40AEF1 	*/.byte 0x48,0x8B,0x45,0x8
/*	mov	(%rsp),%rax	\ 40AEF5 	*/.byte 0x48,0x8B,0x4,0x24
;/  R@ READ-FILE   ?DUP  IF NIP RDROP 0 0 ROT EXIT THEN
/*	lea	0x08(%rbp),%rbp	\ 40AEF9 	*/.byte 0x48,0x8D,0x6D,0x8
	call	0x400C48  { READ-FILE } 	\ 40AEFD E8 46 5D FF FF 
	call	0x4007EC  { ?DUP } 	\ 40AF02 E8 E5 58 FF FF 
	test	%rax,%rax	\ 40AF07 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40AF0A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AF0E 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40AF43  { READ-LINE+DB  } 	\ 40AF12 	*/.byte 0xF,0x84,0x2B,0x0,0x0,0x0
/*	lea	0x08(%rsp),%rsp	\ 40AF18 	*/.byte 0x48,0x8D,0x64,0x24,0x8
/*	mov	%rax,0x00(%rbp)	\ 40AF1D 	*/.byte 0x48,0x89,0x45,0x0
/*	movq	$0x0,-0x08(%rbp)	\ 40AF21 	*/.byte 0x48,0xC7,0x45,0xF8,0x0,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 40AF29 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	mov	-0x08(%rbp),%rdx	\ 40AF2E 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 40AF32 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40AF36 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rdx,0x00(%rbp)	\ 40AF3A 	*/.byte 0x48,0x89,0x55,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40AF3E 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40AF42 C3 
;/  DUP >R 0= IF RDROP RDROP 0 0 0 EXIT THEN \ были в конце файла
/*	mov	%rax,-0x08(%rbp)	\ 40AF43 	*/.byte 0x48,0x89,0x45,0xF8
	Push	%rax	\ 40AF47 50 
/*	mov	-0x08(%rbp),%rax	\ 40AF48 	*/.byte 0x48,0x8B,0x45,0xF8
/*	subq	$0x01,%rax	\ 40AF4C 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40AF50 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40AF53 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40AF56 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AF5A 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40AF8C  { READ-LINE+124  } 	\ 40AF5E 	*/.byte 0xF,0x84,0x28,0x0,0x0,0x0
/*	lea	0x08(%rsp),%rsp	\ 40AF64 	*/.byte 0x48,0x8D,0x64,0x24,0x8
/*	lea	0x08(%rsp),%rsp	\ 40AF69 	*/.byte 0x48,0x8D,0x64,0x24,0x8
/*	mov	%rax,-0x08(%rbp)	\ 40AF6E 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x0,-0x10(%rbp)	\ 40AF72 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x0,0x0,0x0
/*	movq	$0x0,-0x18(%rbp)	\ 40AF7A 	*/.byte 0x48,0xC7,0x45,0xE8,0x0,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 40AF82 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x18(%rbp),%rbp	\ 40AF87 	*/.byte 0x48,0x8D,0x6D,0xE8
	ret		\ 40AF8B C3 
;/  _addr @ R@
/*	mov	%rax,-0x08(%rbp)	\ 40AF8C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40AE48  { .ID+2A  } (%rip),%rax	\ 40AF90 	*/.byte 0x48,0x8B,0x5,0xB1,0xFE,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40AF97 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	(%rsp),%rax	\ 40AF9B 	*/.byte 0x48,0x8B,0x4,0x24
/*	mov	%rax,-0x18(%rbp)	\ 40AF9F 	*/.byte 0x48,0x89,0x45,0xE8
;/
;/ LT 1 SEARCH
/*	lea	0x40AE60  { .ID+42  } (%rip),%rax	\ 40AFA3 	*/.byte 0x48,0x8D,0x5,0xB6,0xFE,0xFF,0xFF
/*	mov	%rax,-0x20(%rbp)	\ 40AFAA 	*/.byte 0x48,0x89,0x45,0xE0
/*	mov	$0x1,%eax	\ 40AFAE 	*/.byte 0xB8,0x1,0x0,0x0,0x0
/*	lea	-0x20(%rbp),%rbp	\ 40AFB3 	*/.byte 0x48,0x8D,0x6D,0xE0
	call	0x401DBF  { SEARCH } 	\ 40AFB7 E8 3 6E FF FF 
;/  IF   \ найден разделитель строк
	test	%rax,%rax	\ 40AFBC 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40AFBF 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40AFC3 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40B043  { READ-LINE+1DB  } 	\ 40AFC7 	*/.byte 0xF,0x84,0x76,0x0,0x0,0x0
;/     OVER 1- C@ 13 = _dos !
/*	mov	0x00(%rbp),%rax	\ 40AFCD 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzb	-0x01(%rax),%eax	\ 40AFD1 	*/.byte 0xF,0xB6,0x40,0xFF
/*	xor	$0xD,%rax	\ 40AFD5 	*/.byte 0x48,0x35,0xD,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40AFDB 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40AFDF 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,0x40AE58  { .ID+3A  } (%rip)	\ 40AFE2 	*/.byte 0x48,0x89,0x5,0x6F,0xFE,0xFF,0xFF
/*	mov	0x40AE48  { .ID+2A  } (%rip),%rax	\ 40AFE9 	*/.byte 0x48,0x8B,0x5,0x58,0xFE,0xFF,0xFF
/*		negq	%rax	\ 40AFF0 	*/.byte 0x48,0xF7,0xD8
;/     DROP _addr @ -     DUP   
/*	add	0x00(%rbp),%rax	\ 40AFF3 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 40AFF7 	*/.byte 0x48,0x89,0x45,0x0
;/     1+ U>D _fp2 @ _fp1 @ D+
/*	lea	0x01(%rax),%rax	\ 40AFFB 	*/.byte 0x48,0x8D,0x40,0x1
	call	0x40059B  { U>D } 	\ 40AFFF E8 97 55 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B004 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40AE40  { .ID+22  } (%rip),%rax	\ 40B008 	*/.byte 0x48,0x8B,0x5,0x31,0xFE,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40B00F 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40AE38  { .ID+1A  } (%rip),%rax	\ 40B013 	*/.byte 0x48,0x8B,0x5,0x1E,0xFE,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 40B01A 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4006ED  { D+ } 	\ 40B01E E8 CA 56 FF FF 
;/      RDROP R> REPOSITION-FILE DROP
/*	lea	0x08(%rsp),%rsp	\ 40B023 	*/.byte 0x48,0x8D,0x64,0x24,0x8
/*	mov	%rax,-0x08(%rbp)	\ 40B028 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40B02C 58 
/*	lea	-0x08(%rbp),%rbp	\ 40B02D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400E7B  { REPOSITION-FILE } 	\ 40B031 E8 45 5E FF FF 
/*	mov	0x00(%rbp),%rax	\ 40B036 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40B03A 	*/.byte 0x48,0x8D,0x6D,0x8
;/  ELSE \ не найден разделитель строк
/*	jmp	0x40B04D  { READ-LINE+1E5  } 	\ 40B03E 	*/.byte 0xE9,0xA,0x0,0x0,0x0
;/     2DROP
	pop	%rax	\ 40B043 58 
/*	lea	0x08(%rsp),%rsp	\ 40B044 	*/.byte 0x48,0x8D,0x64,0x24,0x8
/*	lea	0x08(%rbp),%rbp	\ 40B049 	*/.byte 0x48,0x8D,0x6D,0x8
;/     R>  RDROP  \ если строка прочитана не полностью - будет разрезана
;/  THEN
;/  _dos @ + 0 MAX
/*	add	0x40AE58  { .ID+3A  } (%rip),%rax	\ 40B04D 	*/.byte 0x48,0x3,0x5,0x4,0xFE,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 40B054 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40B058 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 40B05D 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovl/*	cmov	-0x08(%rbp),%rax	\ 40B061 	*/.byte 0x48,0xF,0x4C,0x45,0xF8
;/  TRUE 0
/*	mov	%rax,-0x08(%rbp)	\ 40B066 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1,-0x10(%rbp)	\ 40B06A 	*/.byte 0x48,0xC7,0x45,0xF0,0xFF,0xFF,0xFF,0xFF
/*	mov	$0x0,%eax	\ 40B072 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40B077 	*/.byte 0x48,0x8D,0x6D,0xF0
;/;
	ret		\ 40B07B C3 
;/
;/CREATE FILE-BUFF $101 ALLOT

	DQ 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DB 0x0
;/
;/: OPEN-FILE ( c-addr u fam -- fileid ior )
;/\ Открыть файл с именем, заданным строкой c-addr u, с методом доступа fam.
;/\ Смысл значения fam определен реализацией.
;/\ Если файл успешно открыт, ior ноль, fileid его идентификатор, и файл
;/\ позиционирован на начало.
;/\ Иначе ior - определенный реализацией код результата ввода/вывода,
;/\ и fileid неопределен.
;/  >R FILE-BUFF ASCII-Z  R>

OPENsubFILE:
	Push	%rax	\ 40B17D 50 
/*	lea	0x40B07C  { READ-LINE+214  } (%rip),%rax	\ 40B17E 	*/.byte 0x48,0x8D,0x5,0xF7,0xFE,0xFF,0xFF
	call	0x402098  { ASCII-Z } 	\ 40B185 E8 E 6F FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B18A 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40B18E 58 
/*	lea	-0x08(%rbp),%rbp	\ 40B18F 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  ZOPEN-FILE
	call	0x400CAC  { ZOPEN-FILE } 	\ 40B193 E8 14 5B FF FF 
;/;
	ret		\ 40B198 C3 
;/
;/: OPEN-FILE-SHARED ( c-addr u fam -- fileid ior )
;/  >R FILE-BUFF ASCII-Z  R>


OPENsubFILEsubSHARED:
	Push	%rax	\ 40B199 50 
/*	lea	0x40B07C  { READ-LINE+214  } (%rip),%rax	\ 40B19A 	*/.byte 0x48,0x8D,0x5,0xDB,0xFE,0xFF,0xFF
	call	0x402098  { ASCII-Z } 	\ 40B1A1 E8 F2 6E FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B1A6 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40B1AA 58 
/*	lea	-0x08(%rbp),%rbp	\ 40B1AB 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  ZOPEN-FILE-SHARED
	call	0x400D02  { ZOPEN-FILE-SHARED } 	\ 40B1AF E8 4E 5B FF FF 
;/;
	ret		\ 40B1B4 C3 
;/
;/: CREATE-FILE ( c-addr u fam -- fileid ior )
;/  >R FILE-BUFF ASCII-Z  R>


CREATEsubFILE:
	Push	%rax	\ 40B1B5 50 
/*	lea	0x40B07C  { READ-LINE+214  } (%rip),%rax	\ 40B1B6 	*/.byte 0x48,0x8D,0x5,0xBF,0xFE,0xFF,0xFF
	call	0x402098  { ASCII-Z } 	\ 40B1BD E8 D6 6E FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B1C2 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40B1C6 58 
/*	lea	-0x08(%rbp),%rbp	\ 40B1C7 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  ZCREATE-FILE
	call	0x400D58  { ZCREATE-FILE } 	\ 40B1CB E8 88 5B FF FF 
;/;
	ret		\ 40B1D0 C3 
;/
;/: CREATE-FILE-SHARED ( c-addr u fam -- fileid ior )
;/  >R FILE-BUFF ASCII-Z  R>


CREATEsubFILEsubSHARED:
	Push	%rax	\ 40B1D1 50 
/*	lea	0x40B07C  { READ-LINE+214  } (%rip),%rax	\ 40B1D2 	*/.byte 0x48,0x8D,0x5,0xA3,0xFE,0xFF,0xFF
	call	0x402098  { ASCII-Z } 	\ 40B1D9 E8 BA 6E FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B1DE 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40B1E2 58 
/*	lea	-0x08(%rbp),%rbp	\ 40B1E3 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  ZCREATE-FILE-SHARED
	call	0x400DAE  { ZCREATE-FILE-SHARED } 	\ 40B1E7 E8 C2 5B FF FF 
;/;
	ret		\ 40B1EC C3 
;/
;/VARIABLE ID_SHIFT

	DQ 0x0
	DB 0x0,0x0,0x0
;/: ID_SHIFT@ ID_SHIFT @ ;

ID_SHIFTload:
/*	mov	%rax,-0x08(%rbp)	\ 40B1F8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40B1F0  { CREATE-FILE-SHARED+1F  } (%rip),%rax	\ 40B1FC 	*/.byte 0x48,0x8B,0x5,0xED,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40B203 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40B207 C3 
;/
;/\ : JKEY#  #JKEY >CPF WPF> ;
;/\ : GKEY#  JKEY#  DUP $200 AND ID_SHIFT ! $1FF AND ;
;/\ : GKEY?#  #GKEY? >CPF PF> ;
;/
;/0 VALUE UTT?


UTTque:
	call	0x400AF4  { DOVALUE } 	\ 40B208 E8 E7 58 FF FF 

	DQ 0x0
;/
;/: CR_C	$D EMIT $A EMIT ;

CR_C:
/*	mov	%rax,-0x08(%rbp)	\ 40B215 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xD,%eax	\ 40B219 	*/.byte 0xB8,0xD,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40B21E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 40B222 E8 E8 64 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B227 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xA,%eax	\ 40B22B 	*/.byte 0xB8,0xA,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40B230 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 40B234 E8 D6 64 FF FF 
	ret		\ 40B239 C3 
;/
;/: ACCEPT0 ( C-ADDR +N -- +N' ) \ GET LINE FROM TERM'L
;/   OVER + 1- OVER      \ SA EA A


ACCEPT0:
/*	add	0x00(%rbp),%rax	\ 40B23A 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	-0x01(%rax),%rax	\ 40B23E 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 40B242 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40B246 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40B24A 	*/.byte 0x48,0x8D,0x6D,0xF8
;/   BEGIN
;/ KEY       \ SA EA A C
	call	0x4017FB  { KEY } 	\ 40B24E E8 A8 65 FF FF 
;/   DUP $D <>
/*	mov	%rax,-0x08(%rbp)	\ 40B253 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xD,%rax	\ 40B257 	*/.byte 0x48,0x35,0xD,0x0,0x0,0x0
/*		negq	%rax	\ 40B25D 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40B260 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,-0x10(%rbp)	\ 40B263 	*/.byte 0x48,0x89,0x45,0xF0
;/  OVER $A <> AND
/*	mov	-0x08(%rbp),%rax	\ 40B267 	*/.byte 0x48,0x8B,0x45,0xF8
/*	xor	$0xA,%rax	\ 40B26B 	*/.byte 0x48,0x35,0xA,0x0,0x0,0x0
/*		negq	%rax	\ 40B271 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40B274 	*/.byte 0x48,0x19,0xC0
/*	and	-0x10(%rbp),%rax	\ 40B277 	*/.byte 0x48,0x23,0x45,0xF0
	test	%rax,%rax	\ 40B27B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40B27E 	*/.byte 0x48,0x8B,0x45,0xF8
;/  WHILE
/*	jz	0x40B418  { ACCEPT0+1DE  } 	\ 40B282 	*/.byte 0xF,0x84,0x90,0x1,0x0,0x0
;/       DUP 27 = IF  DROP DUP C@ EMIT  ELSE
/*	mov	%rax,-0x08(%rbp)	\ 40B288 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x1B,%rax	\ 40B28C 	*/.byte 0x48,0x35,0x1B,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40B292 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40B296 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40B299 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40B29C 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40B2B7  { ACCEPT0+7D  } 	\ 40B2A0 	*/.byte 0xF,0x84,0x11,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40B2A6 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzb	(%rax),%eax	\ 40B2AA 	*/.byte 0xF,0xB6,0x0
	call	0x40170F  { EMIT } 	\ 40B2AD E8 5D 64 FF FF 
/*	jmp	0x40B3FE  { ACCEPT0+1C4  } 	\ 40B2B2 	*/.byte 0xE9,0x47,0x1,0x0,0x0
;/       DUP EMIT
/*	mov	%rax,-0x08(%rbp)	\ 40B2B7 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40B2BB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 40B2BF E8 4B 64 FF FF 
;/       DUP   8  = IF BL EMIT EMIT
/*	mov	%rax,-0x08(%rbp)	\ 40B2C4 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x8,%rax	\ 40B2C8 	*/.byte 0x48,0x35,0x8,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40B2CE 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40B2D2 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40B2D5 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40B2D8 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40B319  { ACCEPT0+DF  } 	\ 40B2DC 	*/.byte 0xF,0x84,0x37,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40B2E2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20,%eax	\ 40B2E6 	*/.byte 0xB8,0x20,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40B2EB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 40B2EF E8 1B 64 FF FF 
	call	0x40170F  { EMIT } 	\ 40B2F4 E8 16 64 FF FF 
;/                     2- >R OVER 1- R> UMAX ELSE
/*	lea	-0x02(%rax),%rax	\ 40B2F9 	*/.byte 0x48,0x8D,0x40,0xFE
	Push	%rax	\ 40B2FD 50 
/*	mov	0x08(%rbp),%rax	\ 40B2FE 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	-0x01(%rax),%rax	\ 40B302 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 40B306 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40B30A 58 
/*	cmp	-0x08(%rbp),%rax	\ 40B30B 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovb/*	cmov	-0x08(%rbp),%rax	\ 40B30F 	*/.byte 0x48,0xF,0x42,0x45,0xF8
/*	jmp	0x40B3FE  { ACCEPT0+1C4  } 	\ 40B314 	*/.byte 0xE9,0xE5,0x0,0x0,0x0
;/       DUP   $7F  = IF BL EMIT EMIT
/*	mov	%rax,-0x08(%rbp)	\ 40B319 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x7F,%rax	\ 40B31D 	*/.byte 0x48,0x35,0x7F,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40B323 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40B327 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40B32A 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40B32D 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40B36E  { ACCEPT0+134  } 	\ 40B331 	*/.byte 0xF,0x84,0x37,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40B337 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20,%eax	\ 40B33B 	*/.byte 0xB8,0x20,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40B340 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 40B344 E8 C6 63 FF FF 
	call	0x40170F  { EMIT } 	\ 40B349 E8 C1 63 FF FF 
;/                     2- >R OVER 1- R> UMAX ELSE
/*	lea	-0x02(%rax),%rax	\ 40B34E 	*/.byte 0x48,0x8D,0x40,0xFE
	Push	%rax	\ 40B352 50 
/*	mov	0x08(%rbp),%rax	\ 40B353 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	-0x01(%rax),%rax	\ 40B357 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 40B35B 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40B35F 58 
/*	cmp	-0x08(%rbp),%rax	\ 40B360 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovb/*	cmov	-0x08(%rbp),%rax	\ 40B364 	*/.byte 0x48,0xF,0x42,0x45,0xF8
/*	jmp	0x40B3FE  { ACCEPT0+1C4  } 	\ 40B369 	*/.byte 0xE9,0x90,0x0,0x0,0x0
;/
;/       DUP 9  = IF  DROP DUP 8 SPACE
/*	mov	%rax,-0x08(%rbp)	\ 40B36E 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x9,%rax	\ 40B372 	*/.byte 0x48,0x35,0x9,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40B378 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40B37C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40B37F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40B382 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40B3E9  { ACCEPT0+1AF  } 	\ 40B386 	*/.byte 0xF,0x84,0x5D,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40B38C 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40B390 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x8,%eax	\ 40B394 	*/.byte 0xB8,0x8,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40B399 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401969  { SPACE } 	\ 40B39D E8 C7 65 FF FF 
;/                    >R OVER R>    \ SA EA SA A
	Push	%rax	\ 40B3A2 50 
/*	mov	0x08(%rbp),%rax	\ 40B3A3 	*/.byte 0x48,0x8B,0x45,0x8
/*	mov	%rax,%rdx	\ 40B3A7 	*/.byte 0x48,0x89,0xC2
	pop	%rax	\ 40B3AA 58 
/*	mov	%rax,-0x08(%rbp)	\ 40B3AB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 40B3AF 	*/.byte 0x48,0x89,0x55,0xF0
;/                    TUCK  -   \ SA EA SA A-SA
/*		negq	%rax	\ 40B3B3 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 40B3B6 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40B3BA 	*/.byte 0x48,0x89,0x45,0xF0
;/                    8 / 1+ 8 * +  ELSE
/*	mov	$0x8,%eax	\ 40B3BE 	*/.byte 0xB8,0x8,0x0,0x0,0x0
/*	mov	%rax,%rcx	\ 40B3C3 	*/.byte 0x48,0x89,0xC1
/*	mov	-0x10(%rbp),%rax	\ 40B3C6 	*/.byte 0x48,0x8B,0x45,0xF0
	dw 9948h		\ 40B3CA 48 99 
/*		idivq	%rcx	\ 40B3CC 	*/.byte 0x48,0xF7,0xF9
/*	lea	0x01(%rax),%rax	\ 40B3CF 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 40B3D3 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x8,%eax	\ 40B3D7 	*/.byte 0xB8,0x8,0x0,0x0,0x0
/*		imulq	-0x10(%rbp)	\ 40B3DC 	*/.byte 0x48,0xF7,0x6D,0xF0
/*	add	-0x08(%rbp),%rax	\ 40B3E0 	*/.byte 0x48,0x3,0x45,0xF8
/*	jmp	0x40B3FE  { ACCEPT0+1C4  } 	\ 40B3E4 	*/.byte 0xE9,0x15,0x0,0x0,0x0
;/	OVER  C! THEN THEN THEN   THEN
/*	mov	%rax,-0x08(%rbp)	\ 40B3E9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40B3ED 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	-0x08(%rbp),%dl	\ 40B3F1 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 40B3F4 	*/.byte 0x88,0x10
/*	mov	0x00(%rbp),%rax	\ 40B3F6 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40B3FA 	*/.byte 0x48,0x8D,0x6D,0x8
;/	1+ OVER UMIN  \ SA EA A
/*	lea	0x01(%rax),%rax	\ 40B3FE 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	%rax,-0x08(%rbp)	\ 40B402 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40B406 	*/.byte 0x48,0x8B,0x45,0x0
/*	cmp	-0x08(%rbp),%rax	\ 40B40A 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovNbe/*	cmov	-0x08(%rbp),%rax	\ 40B40E 	*/.byte 0x48,0xF,0x47,0x45,0xF8
;/   REPEAT                          \ SA EA A C
/*	jmp	0x40B24E  { ACCEPT0+14  } 	\ 40B413 	*/.byte 0xE9,0x36,0xFE,0xFF,0xFF
;/
;/   DROP NIP SWAP -
/*	mov	0x00(%rbp),%rax	\ 40B418 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	0x10(%rbp),%rdx	\ 40B41C 	*/.byte 0x48,0x8B,0x55,0x10
/*	mov	%rax,0x10(%rbp)	\ 40B420 	*/.byte 0x48,0x89,0x45,0x10
/*	mov	%rdx,%rax	\ 40B424 	*/.byte 0x48,0x89,0xD0
/*		negq	%rax	\ 40B427 	*/.byte 0x48,0xF7,0xD8
/*	add	0x10(%rbp),%rax	\ 40B42A 	*/.byte 0x48,0x3,0x45,0x10
/*	lea	0x18(%rbp),%rbp	\ 40B42E 	*/.byte 0x48,0x8D,0x6D,0x18
;/
;/ CR ;
	call	0x4017B0  { CR } 	\ 40B432 E8 79 63 FF FF 
	ret		\ 40B437 C3 
;/
;/: ACCEPT1 ( c-addr +n1 -- +n2 ) \ 94
;/\ Ввести строку максимальной длины до +n1 символов.
;/\ Исключительная ситуация возникает, если +n1 0 или больше 32767.
;/\ Отображать символы по мере ввода.
;/\ Ввод прерывается, когда получен символ "конец строки".
;/\ Ничего не добавляется в строку.
;/\ +n2 - длина строки, записанной по адресу c-addr.
;/  H-STDIN READ-FILE DROP


ACCEPT1:
/*	mov	%rax,-0x08(%rbp)	\ 40B438 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x400B0F  { H-STDIN+5  } (%rip),%rax	\ 40B43C 	*/.byte 0x48,0x8B,0x5,0xCC,0x56,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40B443 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400C48  { READ-FILE } 	\ 40B447 E8 FC 57 FF FF 
/*	mov	0x00(%rbp),%rax	\ 40B44C 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40B450 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40B454 C3 
;/
;/' ACCEPT1 ->DEFER ACCEPT


ACCEPT:
	call	0x400B02  { DOVECT } 	\ 40B455 E8 A8 56 FF FF 
	.quad 0x40B438  { ACCEPT1 } 

;/
;/: QUERY	( -- )
;/	TIB 180 ACCEPT #TIB !

QUERY:
/*	mov	%rax,-0x08(%rbp)	\ 40B462 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40B466 	*/.byte 0x48,0x8B,0x5,0x9A,0xF3,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40B46D 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0xB4,%eax	\ 40B471 	*/.byte 0xB8,0xB4,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40B476 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x40B455  { ACCEPT } 	\ 40B47A E8 D6 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B47F 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401340  { SLEEP+273  } (%rip),%rax	\ 40B483 	*/.byte 0x48,0x8D,0x5,0xB6,0x5E,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40B48A 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40B48E 	*/.byte 0x48,0x8B,0x5,0x72,0xF3,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40B495 	*/.byte 0x48,0x89,0x45,0xE8
/*	lea	0x401110  { SLEEP+43  } (%rip),%rax	\ 40B499 	*/.byte 0x48,0x8D,0x5,0x70,0x5C,0xFF,0xFF
/*	xor	-0x18(%rbp),%rax	\ 40B4A0 	*/.byte 0x48,0x33,0x45,0xE8
/*	subq	$0x01,%rax	\ 40B4A4 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40B4A8 	*/.byte 0x48,0x19,0xC0
/*	and	$0x8,%eax	\ 40B4AB 	*/.byte 0x25,0x8,0x0,0x0,0x0
/*	add	-0x10(%rbp),%rax	\ 40B4B0 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	-0x08(%rbp),%rdx	\ 40B4B4 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rdx,(%rax)	\ 40B4B8 	*/.byte 0x48,0x89,0x10
/*	movq	$0x0,0x401310  { SLEEP+243  } (%rip)	\ 40B4BB 	*/.byte 0x48,0xC7,0x5,0x4A,0x5E,0xFF,0xFF,0x0,0x0,0x0,0x0
;/	0 >IN !  0 SOURCE + C! ;
/*	mov	$0x0,%eax	\ 40B4C6 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	call	0x40A89D  { SOURCE } 	\ 40B4CB E8 CD F3 FF FF 
/*	add	0x00(%rbp),%rax	\ 40B4D0 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	0x08(%rbp),%dl	\ 40B4D4 	*/.byte 0x8A,0x55,0x8
/*	mov	%dl,(%rax)	\ 40B4D7 	*/.byte 0x88,0x10
/*	mov	0x10(%rbp),%rax	\ 40B4D9 	*/.byte 0x48,0x8B,0x45,0x10
/*	lea	0x18(%rbp),%rbp	\ 40B4DD 	*/.byte 0x48,0x8D,0x6D,0x18
	ret		\ 40B4E1 C3 
;/
;/
;/: OK..  ." OK" CR ;


OKdotdot:
	call	0x4018C1  { (S") } 	\ 40B4E2 E8 DA 63 FF FF 
	.byte 0x2
	.byte 0x4F,0x4B,0xE8,0x8F,0x62,0xFF,0xFF,0xE8
/*	mov	$0xC3FFFF62,%esp	\ 40B4F0 	*/.byte 0xBC,0x62,0xFF,0xFF,0xC3
;/' OK.. ->DEFER OK.


OKdot:
	call	0x400B02  { DOVECT } 	\ 40B4F5 E8 8 56 FF FF 
	.quad 0x40B4E2  { OK.. } 

;/
;/VARIABLE CURSTR
	DQ 0x0
	DB 0x0,0x0,0x0,0x0,0x0,0x0
;/
;/' NOOP ->DEFER <PRE>

lessPREgreat:
	call	0x400B02  { DOVECT } 	\ 40B510 E8 ED 55 FF FF 
	.quad 0x400404  { NOOP } 

;/
;/: FREFILL ( h -- flag )
;/  TIB TC/L ROT READ-LINE THROW

FREFILL:
/*	mov	%rax,-0x08(%rbp)	\ 40B51D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40B521 	*/.byte 0x48,0x8B,0x5,0xDF,0xF2,0xFF,0xFF
/*	mov	%rax,%rdx	\ 40B528 	*/.byte 0x48,0x89,0xC2
/*	movq	$0x100,-0x10(%rbp)	\ 40B52B 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x1,0x0,0x0
/*	mov	-0x08(%rbp),%rax	\ 40B533 	*/.byte 0x48,0x8B,0x45,0xF8
/*	mov	%rdx,-0x08(%rbp)	\ 40B537 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x10(%rbp),%rbp	\ 40B53B 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x40AE68  { READ-LINE } 	\ 40B53F E8 24 F9 FF FF 
	call	0x401F30  { THROW } 	\ 40B544 E8 E7 69 FF FF 
;/  SWAP
/*	mov	0x00(%rbp),%rdx	\ 40B549 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40B54D 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 40B551 	*/.byte 0x48,0x89,0xD0
;/  #TIB !  0 >IN ! CURSTR 1+!
/*	mov	%rax,-0x08(%rbp)	\ 40B554 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401340  { SLEEP+273  } (%rip),%rax	\ 40B558 	*/.byte 0x48,0x8D,0x5,0xE1,0x5D,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40B55F 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40B563 	*/.byte 0x48,0x8B,0x5,0x9D,0xF2,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40B56A 	*/.byte 0x48,0x89,0x45,0xE8
/*	lea	0x401110  { SLEEP+43  } (%rip),%rax	\ 40B56E 	*/.byte 0x48,0x8D,0x5,0x9B,0x5B,0xFF,0xFF
/*	xor	-0x18(%rbp),%rax	\ 40B575 	*/.byte 0x48,0x33,0x45,0xE8
/*	subq	$0x01,%rax	\ 40B579 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40B57D 	*/.byte 0x48,0x19,0xC0
/*	and	$0x8,%eax	\ 40B580 	*/.byte 0x25,0x8,0x0,0x0,0x0
/*	add	-0x10(%rbp),%rax	\ 40B585 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	-0x08(%rbp),%rdx	\ 40B589 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rdx,(%rax)	\ 40B58D 	*/.byte 0x48,0x89,0x10
/*	movq	$0x0,0x401310  { SLEEP+243  } (%rip)	\ 40B590 	*/.byte 0x48,0xC7,0x5,0x75,0x5D,0xFF,0xFF,0x0,0x0,0x0,0x0
/*	lea	0x40B508  { OK.+13  } (%rip),%rax	\ 40B59B 	*/.byte 0x48,0x8D,0x5,0x66,0xFF,0xFF,0xFF
/*	incq	(%rax)	\ 40B5A2 	*/.byte 0x48,0xFF,0x0
/*	mov	$0x0,%eax	\ 40B5A5 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	call	0x40A89D  { SOURCE } 	\ 40B5AA E8 EE F2 FF FF 
;/  0 SOURCE + C!
/*	add	0x00(%rbp),%rax	\ 40B5AF 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	0x08(%rbp),%dl	\ 40B5B3 	*/.byte 0x8A,0x55,0x8
/*	mov	%dl,(%rax)	\ 40B5B6 	*/.byte 0x88,0x10
/*	mov	0x10(%rbp),%rax	\ 40B5B8 	*/.byte 0x48,0x8B,0x45,0x10
	test	%rax,%rax	\ 40B5BC 48 85 C0 
/*	mov	0x10(%rbp),%rax	\ 40B5BF 	*/.byte 0x48,0x8B,0x45,0x10
;/ DUP IF <PRE> THEN
/*	lea	0x18(%rbp),%rbp	\ 40B5C3 	*/.byte 0x48,0x8D,0x6D,0x18
/*	jz	0x40B5D2  { FREFILL+B5  } 	\ 40B5C7 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
	call	0x40B510  { <PRE> } 	\ 40B5CD E8 3E FF FF FF 
;/;
	ret		\ 40B5D2 C3 
;/
;/: TTIB TIB ;


TTIB:
/*	mov	%rax,-0x08(%rbp)	\ 40B5D3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40B5D7 	*/.byte 0x48,0x8B,0x5,0x29,0xF2,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40B5DE 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40B5E2 C3 
;/
;/: _FREFILL ( h -- flag )
;/ CR ." FREF="


_FREFILL:
	call	0x4017B0  { CR } 	\ 40B5E3 E8 C8 61 FF FF 
	call	0x4018C1  { (S") } 	\ 40B5E8 E8 D4 62 FF FF 
	.byte 0x5,0x46,0x52
	.byte 0x45,0x46,0x3D,0xE8,0x86,0x61,0xFF,0xFF
;/  TIB TC/L 2DUP H. H. CR
/*	mov	%rax,-0x08(%rbp)	\ 40B5F8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40B5FC 	*/.byte 0x48,0x8B,0x5,0x4,0xF2,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40B603 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%rax,%rdx	\ 40B607 	*/.byte 0x48,0x89,0xC2
/*	mov	$0x100,%eax	\ 40B60A 	*/.byte 0xB8,0x0,0x1,0x0,0x0
/*	mov	%rax,-0x18(%rbp)	\ 40B60F 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 40B613 	*/.byte 0x48,0x89,0x55,0xE0
/*	lea	-0x20(%rbp),%rbp	\ 40B617 	*/.byte 0x48,0x8D,0x6D,0xE0
	call	0x40965A  { H. } 	\ 40B61B E8 3A E0 FF FF 
	call	0x40965A  { H. } 	\ 40B620 E8 35 E0 FF FF 
	call	0x4017B0  { CR } 	\ 40B625 E8 86 61 FF FF 
;/ ROT
/*	mov	0x00(%rbp),%rdx	\ 40B62A 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40B62E 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	0x08(%rbp),%rax	\ 40B632 	*/.byte 0x48,0x8B,0x45,0x8
/*	mov	%rdx,0x08(%rbp)	\ 40B636 	*/.byte 0x48,0x89,0x55,0x8
;/  ABORT
	call	0x401FA2  { ABORT } 	\ 40B63A E8 63 69 FF FF 
;/ READ-LINE THROW
	call	0x40AE68  { READ-LINE } 	\ 40B63F E8 24 F8 FF FF 
	call	0x401F30  { THROW } 	\ 40B644 E8 E7 68 FF FF 
;/  SWAP
/*	mov	0x00(%rbp),%rdx	\ 40B649 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40B64D 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 40B651 	*/.byte 0x48,0x89,0xD0
;/  #TIB !  0 >IN ! CURSTR 1+!
/*	mov	%rax,-0x08(%rbp)	\ 40B654 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401340  { SLEEP+273  } (%rip),%rax	\ 40B658 	*/.byte 0x48,0x8D,0x5,0xE1,0x5C,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40B65F 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40A807  { TIB+5  } (%rip),%rax	\ 40B663 	*/.byte 0x48,0x8B,0x5,0x9D,0xF1,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40B66A 	*/.byte 0x48,0x89,0x45,0xE8
/*	lea	0x401110  { SLEEP+43  } (%rip),%rax	\ 40B66E 	*/.byte 0x48,0x8D,0x5,0x9B,0x5A,0xFF,0xFF
/*	xor	-0x18(%rbp),%rax	\ 40B675 	*/.byte 0x48,0x33,0x45,0xE8
/*	subq	$0x01,%rax	\ 40B679 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40B67D 	*/.byte 0x48,0x19,0xC0
/*	and	$0x8,%eax	\ 40B680 	*/.byte 0x25,0x8,0x0,0x0,0x0
/*	add	-0x10(%rbp),%rax	\ 40B685 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	-0x08(%rbp),%rdx	\ 40B689 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rdx,(%rax)	\ 40B68D 	*/.byte 0x48,0x89,0x10
/*	movq	$0x0,0x401310  { SLEEP+243  } (%rip)	\ 40B690 	*/.byte 0x48,0xC7,0x5,0x75,0x5C,0xFF,0xFF,0x0,0x0,0x0,0x0
/*	lea	0x40B508  { OK.+13  } (%rip),%rax	\ 40B69B 	*/.byte 0x48,0x8D,0x5,0x66,0xFE,0xFF,0xFF
/*	incq	(%rax)	\ 40B6A2 	*/.byte 0x48,0xFF,0x0
/*	mov	$0x0,%eax	\ 40B6A5 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	call	0x40A89D  { SOURCE } 	\ 40B6AA E8 EE F1 FF FF 
;/  0 SOURCE + C!
/*	add	0x00(%rbp),%rax	\ 40B6AF 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	0x08(%rbp),%dl	\ 40B6B3 	*/.byte 0x8A,0x55,0x8
/*	mov	%dl,(%rax)	\ 40B6B6 	*/.byte 0x88,0x10
/*	mov	0x10(%rbp),%rax	\ 40B6B8 	*/.byte 0x48,0x8B,0x45,0x10
	test	%rax,%rax	\ 40B6BC 48 85 C0 
/*	mov	0x10(%rbp),%rax	\ 40B6BF 	*/.byte 0x48,0x8B,0x45,0x10
;/ DUP IF <PRE> THEN
/*	lea	0x18(%rbp),%rbp	\ 40B6C3 	*/.byte 0x48,0x8D,0x6D,0x18
/*	jz	0x40B6D2  { _FREFILL+EF  } 	\ 40B6C7 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
	call	0x40B510  { <PRE> } 	\ 40B6CD E8 3E FE FF FF 
;/;
	ret		\ 40B6D2 C3 
;/
;/T: REFILL ( -- flag ) \ 94 FILE EXT
;/  SOURCE-ID  0 > IF ( included text )


REFILL:
/*	mov	%rax,-0x08(%rbp)	\ 40B6D3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40A7FA  { SOURCE-ID+5  } (%rip),%rax	\ 40B6D7 	*/.byte 0x48,0x8B,0x5,0x1C,0xF1,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40B6DE 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x0,%eax	\ 40B6E2 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	cmp	-0x10(%rbp),%rax	\ 40B6E7 	*/.byte 0x48,0x3B,0x45,0xF0
	setl	%al	\ 40B6EB F 9C C0 
/*		neg	%al	\ 40B6EE 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 40B6F0 	*/.byte 0x48,0xF,0xBE,0xC0
	test	%rax,%rax	\ 40B6F4 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40B6F7 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40B716  { REFILL+43  } 	\ 40B6FB 	*/.byte 0xF,0x84,0x15,0x0,0x0,0x0
;/  SOURCE-ID
/*	mov	%rax,-0x08(%rbp)	\ 40B701 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40A7FA  { SOURCE-ID+5  } (%rip),%rax	\ 40B705 	*/.byte 0x48,0x8B,0x5,0xEE,0xF0,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40B70C 	*/.byte 0x48,0x8D,0x6D,0xF8
;/ FREFILL
	call	0x40B51D  { FREFILL } 	\ 40B710 E8 8 FE FF FF 
;/  EXIT  THEN
	ret		\ 40B715 C3 
;/  QUERY TRUE
	call	0x40B462  { QUERY } 	\ 40B716 E8 47 FD FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B71B 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1,%rax	\ 40B71F 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40B726 	*/.byte 0x48,0x8D,0x6D,0xF8
;/;
	ret		\ 40B72A C3 
;/
;/: EVALUATE ( i*x c-addr u -- j*x ) \ 94
;/  SOURCE-ID >R SOURCE 2>R >IN @ >R


EVALUATE:
/*	mov	%rax,-0x08(%rbp)	\ 40B72B 	*/.byte 0x48,0x89,0x45,0xF8
/*	push	0x40A7FA  { SOURCE-ID+5  } (%rip)	\ 40B72F 	*/.byte 0xFF,0x35,0xC5,0xF0,0xFF,0xFF
	call	0x40A89D  { SOURCE } 	\ 40B735 E8 63 F1 FF FF 
	call	0x400456  { 2>R } 	\ 40B73A E8 17 4D FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B73F 	*/.byte 0x48,0x89,0x45,0xF8
/*	push	0x401310  { SLEEP+243  } (%rip)	\ 40B743 	*/.byte 0xFF,0x35,0xC7,0x5B,0xFF,0xFF
;/  -1 TO SOURCE-ID
/*	movq	$-0x1,0x40A7FA  { SOURCE-ID+5  } (%rip)	\ 40B749 	*/.byte 0x48,0xC7,0x5,0xA6,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 40B754 	*/.byte 0x48,0x8B,0x45,0xF8
;/  SOURCE! >IN 0!
	call	0x40A849  { SOURCE! } 	\ 40B758 E8 EC F0 FF FF 
/*	movq	$0x0,0x401310  { SLEEP+243  } (%rip)	\ 40B75D 	*/.byte 0x48,0xC7,0x5,0xA8,0x5B,0xFF,0xFF,0x0,0x0,0x0,0x0
;/    ['] INTERPRET CATCH
/*	mov	%rax,-0x08(%rbp)	\ 40B768 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40AE11  { INTERPRET } (%rip),%rax	\ 40B76C 	*/.byte 0x48,0x8D,0x5,0x9E,0xF6,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40B773 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401ED7  { CATCH } 	\ 40B777 E8 5B 67 FF FF 
;/  R> >IN ! 2R> SOURCE! R> TO SOURCE-ID
/*	mov	%rax,-0x08(%rbp)	\ 40B77C 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 40B780 8F 45 F0 
/*	lea	0x401310  { SLEEP+243  } (%rip),%rax	\ 40B783 	*/.byte 0x48,0x8D,0x5,0x86,0x5B,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 40B78A 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 40B78E 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 40B791 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x40041E  { 2R> } 	\ 40B795 E8 84 4C FF FF 
	call	0x40A849  { SOURCE! } 	\ 40B79A E8 AA F0 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40B79F 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 40B7A3 8F 45 F0 
/*	lea	0x40A7FA  { SOURCE-ID+5  } (%rip),%rax	\ 40B7A6 	*/.byte 0x48,0x8D,0x5,0x4D,0xF0,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 40B7AD 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 40B7B1 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 40B7B4 	*/.byte 0x48,0x8B,0x45,0xF8
;/  THROW
	call	0x401F30  { THROW } 	\ 40B7B8 E8 73 67 FF FF 
;/;
	ret		\ 40B7BD C3 
;/
;/: FQUIT
;/ BEGIN  REFILL


FQUIT:
	call	0x40B6D3  { REFILL } 	\ 40B7BE E8 10 FF FF FF 
;/ WHILE  INTERPRET
	test	%rax,%rax	\ 40B7C3 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40B7C6 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40B7CA 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40B7DE  { FQUIT+20  } 	\ 40B7CE 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x40AE11  { INTERPRET } 	\ 40B7D4 E8 38 F6 FF FF 
;/ REPEAT ;
/*	jmp	0x40B7BE  { FQUIT } 	\ 40B7D9 	*/.byte 0xE9,0xE0,0xFF,0xFF,0xFF
	ret		\ 40B7DE C3 
;/
;/: QUIT
;/ BEGIN  REFILL


QUIT:
	call	0x40B6D3  { REFILL } 	\ 40B7DF E8 EF FE FF FF 
;/ WHILE  INTERPRET OK.
	test	%rax,%rax	\ 40B7E4 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40B7E7 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40B7EB 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40B804  { QUIT+25  } 	\ 40B7EF 	*/.byte 0xF,0x84,0xF,0x0,0x0,0x0
	call	0x40AE11  { INTERPRET } 	\ 40B7F5 E8 17 F6 FF FF 
	call	0x40B4F5  { OK. } 	\ 40B7FA E8 F6 FC FF FF 
;/ REPEAT ;
/*	jmp	0x40B7DF  { QUIT } 	\ 40B7FF 	*/.byte 0xE9,0xDB,0xFF,0xFF,0xFF
	ret		\ 40B804 C3 
;/
;/T: ] STATE ON ;


yc:
/*	movq	$-0x1,0x4010F8  { SLEEP+2B  } (%rip)	\ 40B805 	*/.byte 0x48,0xC7,0x5,0xE8,0x58,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
	ret		\ 40B810 C3 
;/T: [ STATE OFF ; IMMEDIATE


xc:
/*	movq	$0x0,0x4010F8  { SLEEP+2B  } (%rip)	\ 40B811 	*/.byte 0x48,0xC7,0x5,0xDC,0x58,0xFF,0xFF,0x0,0x0,0x0,0x0
	ret		\ 40B81C C3 
;/
;/ VARIABLE BYE_FLG

	DQ 0x8BF8458B48000000
	DB 0x45,0xF8,0x0
;/
;/\ DP><DDP
;/
;/444 CONSTANT  CFNAME_SIZE
;/ CREATE CURFILENAME 0 , CFNAME_SIZE 255 + ALLOT
	DQ 0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0
	DB 0x0,0x0,0x0
;/ CREATE ERRFILENAME 0 , CFNAME_SIZE 255 + ALLOT
	DQ 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DB 0x0,0x0,0x0
;/
;/\ DP><DDP
;/
;/: SAVEERR
;/	DUP SAVEERR? @ AND

SAVEERR:
/*	mov	%rax,-0x08(%rbp)	\ 40BDAE 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	0x401330  { SLEEP+263  } (%rip),%rax	\ 40BDB2 	*/.byte 0x48,0x23,0x5,0x77,0x55,0xFF,0xFF
	test	%rax,%rax	\ 40BDB9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40BDBC 	*/.byte 0x48,0x8B,0x45,0xF8
;/	IF	SOURCE ERRTIB $! >IN_WORD @ ER>IN !
/*	jz	0x40BE3F  { SAVEERR+91  } 	\ 40BDC0 	*/.byte 0xF,0x84,0x79,0x0,0x0,0x0
	call	0x40A89D  { SOURCE } 	\ 40BDC6 E8 D2 EA FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40BDCB 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401210  { SLEEP+143  } (%rip),%rax	\ 40BDCF 	*/.byte 0x48,0x8D,0x5,0x3A,0x54,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40BDD6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401B38  { $! } 	\ 40BDDA E8 59 5D FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40BDDF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401318  { SLEEP+24B  } (%rip),%rax	\ 40BDE3 	*/.byte 0x48,0x8B,0x5,0x2E,0x55,0xFF,0xFF
/*	mov	%rax,0x401320  { SLEEP+253  } (%rip)	\ 40BDEA 	*/.byte 0x48,0x89,0x5,0x2F,0x55,0xFF,0xFF
/*	mov	0x40A7FA  { SOURCE-ID+5  } (%rip),%rax	\ 40BDF1 	*/.byte 0x48,0x8B,0x5,0x2,0xEA,0xFF,0xFF
;/		SOURCE-ID ERR&S-ID ! CURSTR @ ERR-LINE ! SAVEERR? OFF
/*	mov	%rax,0x401328  { SLEEP+25B  } (%rip)	\ 40BDF8 	*/.byte 0x48,0x89,0x5,0x29,0x55,0xFF,0xFF
/*	mov	0x40B508  { OK.+13  } (%rip),%rax	\ 40BDFF 	*/.byte 0x48,0x8B,0x5,0x2,0xF7,0xFF,0xFF
/*	mov	%rax,0x401338  { SLEEP+26B  } (%rip)	\ 40BE06 	*/.byte 0x48,0x89,0x5,0x2B,0x55,0xFF,0xFF
/*	movq	$0x0,0x401330  { SLEEP+263  } (%rip)	\ 40BE0D 	*/.byte 0x48,0xC7,0x5,0x18,0x55,0xFF,0xFF,0x0,0x0,0x0,0x0
/*	lea	0x40B828  { [+17  } (%rip),%rax	\ 40BE18 	*/.byte 0x48,0x8D,0x5,0x9,0xFA,0xFF,0xFF
;/		CURFILENAME COUNT ERRFILENAME $!
/*	lea	0x01(%rax),%rdx	\ 40BE1F 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40BE23 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x10(%rbp)	\ 40BE27 	*/.byte 0x48,0x89,0x55,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 40BE2B 	*/.byte 0x48,0x89,0x45,0xE8
/*	lea	0x40BAEB  { [+2DA  } (%rip),%rax	\ 40BE2F 	*/.byte 0x48,0x8D,0x5,0xB5,0xFC,0xFF,0xFF
/*	lea	-0x18(%rbp),%rbp	\ 40BE36 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x401B38  { $! } 	\ 40BE3A E8 F9 5C FF FF 
;/	THEN
;/;
	ret		\ 40BE3F C3 
;/
;/VARIABLE CCOUT&OUTPUT

	DQ 0x0
;/VARIABLE CCOUTV_EMIT
	DQ 0x0
;/VARIABLE CCOUTV_TYPE
	DQ 0x0
;/
;/0 VALUE CCOUT_#

CCOUT_hash:
	call	0x400AF4  { DOVALUE } 	\ 40BE58 E8 97 4C FF FF 

	DQ 0x0
;/
;/: ERROR_DO1
;/
;/	DUP 0= IF DROP BREAK

ERROR_DO1:
/*	mov	%rax,-0x08(%rbp)	\ 40BE65 	*/.byte 0x48,0x89,0x45,0xF8
/*	subq	$0x01,%rax	\ 40BE69 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40BE6D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40BE70 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40BE73 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40BE86  { ERROR_DO1+21  } 	\ 40BE77 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40BE7D 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40BE81 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40BE85 C3 
;/	SAVEERR
	call	0x40BDAE  { SAVEERR } 	\ 40BE86 E8 23 FF FF FF 
;/	CR ERRTIB COUNT TYPE CR
	call	0x4017B0  { CR } 	\ 40BE8B E8 20 59 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40BE90 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401210  { SLEEP+143  } (%rip),%rax	\ 40BE94 	*/.byte 0x48,0x8D,0x5,0x75,0x53,0xFF,0xFF
/*	lea	0x01(%rax),%rdx	\ 40BE9B 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40BE9F 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x10(%rbp)	\ 40BEA3 	*/.byte 0x48,0x89,0x55,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 40BEA7 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x40177E  { TYPE } 	\ 40BEAB E8 CE 58 FF FF 
	call	0x4017B0  { CR } 	\ 40BEB0 E8 FB 58 FF FF 
;/\ ER>IN @ BEGIN SPACE 1- DUP 0 MAX 0= UNTIL
;/	ERRTIB 1+ ER>IN @ $3F AND 0
/*	mov	%rax,-0x08(%rbp)	\ 40BEB5 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401211  { SLEEP+144  } (%rip),%rax	\ 40BEB9 	*/.byte 0x48,0x8D,0x5,0x51,0x53,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40BEC0 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x401320  { SLEEP+253  } (%rip),%rax	\ 40BEC4 	*/.byte 0x48,0x8B,0x5,0x55,0x54,0xFF,0xFF
/*	and	$0x3F,%eax	\ 40BECB 	*/.byte 0x25,0x3F,0x0,0x0,0x0
/*	mov	%rax,-0x18(%rbp)	\ 40BED0 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	$0x0,%eax	\ 40BED4 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x18(%rbp),%rbp	\ 40BED9 	*/.byte 0x48,0x8D,0x6D,0xE8
;/   ?DO COUNT 9 = IF 9 EMIT ELSE SPACE THEN  LOOP DROP
	call	0x400A59  { (?DO) } 	\ 40BEDD E8 77 4B FF FF 
	.quad 0x40BF39  { ERROR_DO1+D4  } 
/*	lea	0x01(%rax),%rdx	\ 40BEEA 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40BEEE 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40BEF2 	*/.byte 0x48,0x89,0x55,0xF8
/*	xor	$0x9,%rax	\ 40BEF6 	*/.byte 0x48,0x35,0x9,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40BEFC 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40BF00 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40BF03 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40BF06 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40BF27  { ERROR_DO1+C2  } 	\ 40BF0A 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40BF10 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x9,%eax	\ 40BF14 	*/.byte 0xB8,0x9,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40BF19 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 40BF1D E8 ED 57 FF FF 
/*	jmp	0x40BF2C  { ERROR_DO1+C7  } 	\ 40BF22 	*/.byte 0xE9,0x5,0x0,0x0,0x0
	call	0x401969  { SPACE } 	\ 40BF27 E8 3D 5A FF FF 
/*	inc	%r14	\ 40BF2C 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 40BF2F 	*/.byte 0x49,0xFF,0xC7
	jNo	0x40BEEA  { ERROR_DO1+85  } 	\ 40BF32 71 B6 
	pop	%r14	\ 40BF34 41 5E 
	pop	%r15	\ 40BF36 41 5F 
	pop	%rcx	\ 40BF38 59 
/*	mov	0x00(%rbp),%rax	\ 40BF39 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40BF3D 	*/.byte 0x48,0x8D,0x6D,0x8
;/ ." ^" \ DROP
	call	0x4018C1  { (S") } 	\ 40BF41 E8 7B 59 FF FF 
	.byte 0x1,0x5E
	call	0x40177E  { TYPE } 	\ 40BF48 E8 31 58 FF FF 
;/	CR ." ERR=" . 
	call	0x4017B0  { CR } 	\ 40BF4D E8 5E 58 FF FF 
	call	0x4018C1  { (S") } 	\ 40BF52 E8 6A 59 FF FF 
	.byte 0x4
	.byte 0x45,0x52,0x52,0x3D,0xE8,0x1D,0x58,0xFF
/*	jmpf	*%rax	\ 40BF60 	*/.byte 0xFF,0xE8
	out	%eax,(%dx)		\ 40BF62 EF 
	.byte	0xD4	\ 40BF63 D4 
/*	g4??	%edi	\ 40BF64 	*/.byte 0xFF,0xFF
;/	CR  SP0 @ SP!   STATE 0!
	call	0x4017B0  { CR } 	\ 40BF66 E8 45 58 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40BF6B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401628  { ORIGVIEWLINK+12  } (%rip),%rax	\ 40BF6F 	*/.byte 0x48,0x8B,0x5,0xB2,0x56,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40BF76 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400471  { SP! } 	\ 40BF7A E8 F2 44 FF FF 
/*	movq	$0x0,0x4010F8  { SLEEP+2B  } (%rip)	\ 40BF7F 	*/.byte 0x48,0xC7,0x5,0x6E,0x51,0xFF,0xFF,0x0,0x0,0x0,0x0
;/;
	ret		\ 40BF8A C3 
;/
;/' ERROR_DO1 ->DEFER ERROR_DO


ERROR_DO:
	call	0x400B02  { DOVECT } 	\ 40BF8B E8 72 4B FF FF 
	.quad 0x40BE65  { ERROR_DO1 } 

;/
;/: MAIN_CYCLE
;/ BEGIN	[COMPILE] [

MAIN_CYCLE:
	call	0x40B811  { [ } 	\ 40BF98 E8 74 F8 FF FF 
;/	&?MINUS 0!
/*	movq	$0x0,0x409B40  { /STRING+34  } (%rip)	\ 40BF9D 	*/.byte 0x48,0xC7,0x5,0x98,0xDB,0xFF,0xFF,0x0,0x0,0x0,0x0
;/	['] QUIT CATCH
/*	mov	%rax,-0x08(%rbp)	\ 40BFA8 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40B7DF  { QUIT } (%rip),%rax	\ 40BFAC 	*/.byte 0x48,0x8D,0x5,0x2C,0xF8,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40BFB3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401ED7  { CATCH } 	\ 40BFB7 E8 1B 5F FF FF 
;/	ERROR_DO
	call	0x40BF8B  { ERROR_DO } 	\ 40BFBC E8 CA FF FF FF 
;/ AGAIN
/*	jmp	0x40BF98  { MAIN_CYCLE } 	\ 40BFC1 	*/.byte 0xE9,0xD2,0xFF,0xFF,0xFF
;/;
	ret		\ 40BFC6 C3 
;/
;/T: ' PARSE-NAME SFIND 0= IF -13 THROW THEN  ; \ ???????


tic:
	call	0x40AADD  { PARSE-NAME } 	\ 40BFC7 E8 11 EB FF FF 
	call	0x40ACAF  { SFIND } 	\ 40BFCC E8 DE EC FF FF 
/*	subq	$0x01,%rax	\ 40BFD1 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40BFD5 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40BFD8 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40BFDB 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40BFDF 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40BFFD  { '+36  } 	\ 40BFE3 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40BFE9 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0xD,%rax	\ 40BFED 	*/.byte 0x48,0xC7,0xC0,0xF3,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40BFF4 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 40BFF8 E8 33 5F FF FF 
	ret		\ 40BFFD C3 
;/
;/T: ['] '  LIT, ; IMMEDIATE


xcticyc:
	call	0x40BFC7  { ' } 	\ 40BFFE E8 C4 FF FF FF 
	call	0x409F37  { LIT, } 	\ 40C003 E8 2F DF FF FF 
	ret		\ 40C008 C3 
;/
;/: CHAR ( "<spaces>name" -- char ) \ 94
;/ PARSE-NAME DROP C@ ;


CHAR:
	call	0x40AADD  { PARSE-NAME } 	\ 40C009 E8 CF EA FF FF 
/*	mov	0x00(%rbp),%rax	\ 40C00E 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzb	(%rax),%eax	\ 40C012 	*/.byte 0xF,0xB6,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C015 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40C019 C3 
;/
;/: >S, ( addr u -- addr addr1 u )
;/  DP @ SWAP DUP ALLOT ;


greatScom:
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rdx	\ 40C01A 	*/.byte 0x48,0x8B,0x15,0x2F,0x56,0xFF,0xFF
/*	mov	%rdx,-0x08(%rbp)	\ 40C021 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 40C025 	*/.byte 0x48,0x89,0x45,0xF0
/*	add	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40C029 	*/.byte 0x48,0x1,0x5,0x20,0x56,0xFF,0xFF
/*	mov	-0x10(%rbp),%rax	\ 40C030 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 40C034 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40C038 C3 
;/
;/T: S, ( addr u -- )
;/  >S, CMOVE ;


Scom:
	call	0x40C01A  { >S, } 	\ 40C039 E8 DC FF FF FF 
	call	0x4009EE  { CMOVE } 	\ 40C03E E8 AB 49 FF FF 
	ret		\ 40C043 C3 
;/
;/: >S", ( addr u -- addr addr1 u ) 
;/ DUP C, >S,   ;


greatSdticcom:
/*	mov	%rax,-0x08(%rbp)	\ 40C044 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40C048 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C04C E8 9D 56 FF FF 
	call	0x40C01A  { >S, } 	\ 40C051 E8 C4 FF FF FF 
	ret		\ 40C056 C3 
;/
;/T: S", ( addr u -- ) 
;/  >S", CMOVE ;


Sdticcom:
	call	0x40C044  { >S", } 	\ 40C057 E8 E8 FF FF FF 
	call	0x4009EE  { CMOVE } 	\ 40C05C E8 8D 49 FF FF 
	ret		\ 40C061 C3 
;/
;/
;/
;/T: SLIT, ( adr len -- [ adr len ] )
;/	['] (S") _COMPILE, S",


SLITcom:
/*	mov	%rax,-0x08(%rbp)	\ 40C062 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x4018C1  { (S") } (%rip),%rax	\ 40C066 	*/.byte 0x48,0x8D,0x5,0x54,0x58,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C06D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A054  { _COMPILE, } 	\ 40C071 E8 DE DF FF FF 
	call	0x40C057  { S", } 	\ 40C076 E8 DC FF FF FF 
;/;
	ret		\ 40C07B C3 
;/
;/T: ZSLIT, ( adr len -- [ adr len ] )
;/	['] (Z") _COMPILE, S", 0 C,


ZSLITcom:
/*	mov	%rax,-0x08(%rbp)	\ 40C07C 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x4018E3  { (Z") } (%rip),%rax	\ 40C080 	*/.byte 0x48,0x8D,0x5,0x5C,0x58,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C087 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A054  { _COMPILE, } 	\ 40C08B E8 C4 DF FF FF 
	call	0x40C057  { S", } 	\ 40C090 E8 C2 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C095 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40C099 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C09E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C0A2 E8 47 56 FF FF 
;/;
	ret		\ 40C0A7 C3 
;/
;/: >SYSPAD	\ caddr len -- caddr' len
;/\ *G Copy a string to *\fo{SYSPAD} and return the new string.
;/  DUP >R NEWSYSPADGET TUCK R@ MOVE R>  ;


greatSYSPAD:
/*	mov	%rax,-0x08(%rbp)	\ 40C0A8 	*/.byte 0x48,0x89,0x45,0xF8
	Push	%rax	\ 40C0AC 50 
/*	mov	-0x08(%rbp),%rax	\ 40C0AD 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x402147  { NEWSYSPADGET } 	\ 40C0B1 E8 91 60 FF FF 
/*	mov	0x00(%rbp),%rdx	\ 40C0B6 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40C0BA 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40C0BE 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 40C0C2 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	(%rsp),%rax	\ 40C0C6 	*/.byte 0x48,0x8B,0x4,0x24
/*	lea	-0x10(%rbp),%rbp	\ 40C0CA 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401A27  { MOVE } 	\ 40C0CE E8 54 59 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C0D3 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40C0D7 58 
/*	lea	-0x08(%rbp),%rbp	\ 40C0D8 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40C0DC C3 
;/
;/: >SYSPADZ	\ caddr len -- zaddr
;/\ *G Copy a string to *\fo{SYSPAD} and return the new zero
;/\ ** terminated string.
;/  dup 1+ NEWSYSPADGET dup >r zplace r>  ;


greatSYSPADZ:
/*	mov	%rax,-0x08(%rbp)	\ 40C0DD 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x01(%rax),%rax	\ 40C0E1 	*/.byte 0x48,0x8D,0x40,0x1
/*	lea	-0x08(%rbp),%rbp	\ 40C0E5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402147  { NEWSYSPADGET } 	\ 40C0E9 E8 59 60 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C0EE 	*/.byte 0x48,0x89,0x45,0xF8
	Push	%rax	\ 40C0F2 50 
/*	mov	-0x08(%rbp),%rax	\ 40C0F3 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x401C0F  { zplace } 	\ 40C0F7 E8 13 5B FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C0FC 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40C100 58 
/*	lea	-0x08(%rbp),%rbp	\ 40C101 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40C105 C3 
;/
;/: SLITERAL  \ 94 STRING
;/  STATE @ IF SLIT, ELSE  >SYSPAD THEN


SLITERAL:
/*	mov	%rax,-0x08(%rbp)	\ 40C106 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4010F8  { SLEEP+2B  } (%rip),%rax	\ 40C10A 	*/.byte 0x48,0x8B,0x5,0xE7,0x4F,0xFF,0xFF
	test	%rax,%rax	\ 40C111 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40C114 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40C128  { SLITERAL+22  } 	\ 40C118 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x40C062  { SLIT, } 	\ 40C11E E8 3F FF FF FF 
/*	jmp	0x40C12D  { SLITERAL+27  } 	\ 40C123 	*/.byte 0xE9,0x5,0x0,0x0,0x0
	call	0x40C0A8  { >SYSPAD } 	\ 40C128 E8 7B FF FF FF 
;/; IMMEDIATE
	ret		\ 40C12D C3 
;/
;/T: S"	[CHAR] " PARSE [COMPILE] SLITERAL ; IMMEDIATE


Sdtic:
/*	mov	%rax,-0x08(%rbp)	\ 40C12E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x22,%eax	\ 40C132 	*/.byte 0xB8,0x22,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C137 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40AB99  { PARSE } 	\ 40C13B E8 59 EA FF FF 
	call	0x40C106  { SLITERAL } 	\ 40C140 E8 C1 FF FF FF 
	ret		\ 40C145 C3 
;/
;/T: Z"	[CHAR] " PARSE


Zdtic:
/*	mov	%rax,-0x08(%rbp)	\ 40C146 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x22,%eax	\ 40C14A 	*/.byte 0xB8,0x22,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C14F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40AB99  { PARSE } 	\ 40C153 E8 41 EA FF FF 
;/	STATE @ IF ZSLIT, ELSE >SYSPADZ THEN ; IMMEDIATE
/*	mov	%rax,-0x08(%rbp)	\ 40C158 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4010F8  { SLEEP+2B  } (%rip),%rax	\ 40C15C 	*/.byte 0x48,0x8B,0x5,0x95,0x4F,0xFF,0xFF
	test	%rax,%rax	\ 40C163 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40C166 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40C17A  { Z"+34  } 	\ 40C16A 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x40C07C  { ZSLIT, } 	\ 40C170 E8 7 FF FF FF 
/*	jmp	0x40C17F  { Z"+39  } 	\ 40C175 	*/.byte 0xE9,0x5,0x0,0x0,0x0
	call	0x40C0DD  { >SYSPADZ } 	\ 40C17A E8 5E FF FF FF 
	ret		\ 40C17F C3 
;/
;/: (ABORT'') ROT


cbigABORTticticcend:
/*	mov	0x00(%rbp),%rdx	\ 40C180 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40C184 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	0x08(%rbp),%rax	\ 40C188 	*/.byte 0x48,0x8B,0x45,0x8
/*	mov	%rdx,0x08(%rbp)	\ 40C18C 	*/.byte 0x48,0x89,0x55,0x8
;/ IF TYPE -2 THROW THEN
	test	%rax,%rax	\ 40C190 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40C193 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C197 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40C1BA  { (ABORT'')+3A  } 	\ 40C19B 	*/.byte 0xF,0x84,0x19,0x0,0x0,0x0
	call	0x40177E  { TYPE } 	\ 40C1A1 E8 D8 55 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C1A6 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x2,%rax	\ 40C1AA 	*/.byte 0x48,0xC7,0xC0,0xFE,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C1B1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 40C1B5 E8 76 5D FF FF 
;/ 2DROP
/*	mov	0x08(%rbp),%rax	\ 40C1BA 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40C1BE 	*/.byte 0x48,0x8D,0x6D,0x10
;/;
	ret		\ 40C1C2 C3 
;/
;/T: ABORT"        \ Comp: "ccc<quote>" -- ; Run: i*x x1 -- | i*x ; R: j*x -- | j*x  9.6.2.0680
;/\ *G If x1 is true at run-time, display the following string and
;/\ ** perform *\fo{ABORT}, otherwise do nothing. This is handled by
;/\ ** performing *\fo{-2 THROW} after setting the variable
;/\ ** *\fo{'ABORTTEXT}.
;/	[COMPILE] S" ['] (ABORT'') COMPILE, ; IMMEDIATE


ABORTdtic:
	call	0x40C12E  { S" } 	\ 40C1C3 E8 66 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C1C8 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40C180  { (ABORT'') } (%rip),%rax	\ 40C1CC 	*/.byte 0x48,0x8D,0x5,0xAD,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C1D3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40C1D7 E8 AD DE FF FF 
	ret		\ 40C1DC C3 
;/
;/: CRASH         ( -- ) 
;/ TRUE	ABORT" <- is an Uninitialized execution vector." 


CRASH:
/*	mov	%rax,-0x08(%rbp)	\ 40C1DD 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1,%rax	\ 40C1E1 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C1E8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4018C1  { (S") } 	\ 40C1EC E8 D0 56 FF FF 
	.byte 0x28,0x3C,0x2D,0x20,0x69,0x73,0x20
	.byte 0x61,0x6E,0x20,0x55,0x6E,0x69,0x6E,0x69
	.byte 0x74,0x69,0x61,0x6C,0x69,0x7A,0x65,0x64
	.byte 0x20,0x65,0x78,0x65,0x63,0x75,0x74,0x69
	.byte 0x6F,0x6E,0x20,0x76,0x65,0x63,0x74,0x6F
	.byte 0x72,0x2E,0xE8,0x61,0xFF,0xFF,0xFF,0xC3
;/ ;
;/
;/' CRASH TO 'CRASH
;/
;/: ?COMP ( -> )
;/  STATE @ 0= IF -14 THROW THEN


queCOMP:
/*	mov	%rax,-0x08(%rbp)	\ 40C220 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4010F8  { SLEEP+2B  } (%rip),%rax	\ 40C224 	*/.byte 0x48,0x8B,0x5,0xCD,0x4E,0xFF,0xFF
/*	subq	$0x01,%rax	\ 40C22B 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40C22F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40C232 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40C235 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40C253  { ?COMP+33  } 	\ 40C239 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40C23F 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0xE,%rax	\ 40C243 	*/.byte 0x48,0xC7,0xC0,0xF2,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C24A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 40C24E E8 DD 5C FF FF 
;/;
	ret		\ 40C253 C3 
;/
;/: WORD ( char "<chars>ccc<char>" -- c-addr ) \ 94
;/\  DUP PSKIP PARSE 255 MIN
;/\  DUP PAD C! PAD 1+ SWAP CMOVE
;/\  0 PAD COUNT + C!
;/  PARSE PAD $!  PAD ;


WORD:
	call	0x40AB99  { PARSE } 	\ 40C254 E8 40 E9 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C259 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401458  { SLEEP+38B  } (%rip),%rax	\ 40C25D 	*/.byte 0x48,0x8D,0x5,0xF4,0x51,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C264 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401B38  { $! } 	\ 40C268 E8 CB 58 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C26D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401458  { SLEEP+38B  } (%rip),%rax	\ 40C271 	*/.byte 0x48,0x8D,0x5,0xE0,0x51,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C278 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40C27C C3 
;/
;/: CLIT,
;/	['] (C") COMPILE, COUNT S",


CLITcom:
/*	mov	%rax,-0x08(%rbp)	\ 40C27D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40190D  { (C") } (%rip),%rax	\ 40C281 	*/.byte 0x48,0x8D,0x5,0x85,0x56,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C288 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40C28C E8 F8 DD FF FF 
/*	lea	0x01(%rax),%rdx	\ 40C291 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40C295 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40C299 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40C29D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40C057  { S", } 	\ 40C2A1 E8 B1 FD FF FF 
;/\	HERE 1 AND IF 0xFF C, THEN
;/\	HERE 3 AND IF 0xFFFF W, THEN
;/;
	ret		\ 40C2A6 C3 
;/
;/T: CLITERAL ( addr -- ) 
;/  STATE @ IF CLIT, THEN ; IMMEDIATE


CLITERAL:
/*	mov	%rax,-0x08(%rbp)	\ 40C2A7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4010F8  { SLEEP+2B  } (%rip),%rax	\ 40C2AB 	*/.byte 0x48,0x8B,0x5,0x46,0x4E,0xFF,0xFF
	test	%rax,%rax	\ 40C2B2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40C2B5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40C2C4  { CLITERAL+1D  } 	\ 40C2B9 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
	call	0x40C27D  { CLIT, } 	\ 40C2BF E8 B9 FF FF FF 
	ret		\ 40C2C4 C3 
;/
;/T: C"
;/  [CHAR] " WORD [COMPILE] CLITERAL


Cdtic:
/*	mov	%rax,-0x08(%rbp)	\ 40C2C5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x22,%eax	\ 40C2C9 	*/.byte 0xB8,0x22,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C2CE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40C254  { WORD } 	\ 40C2D2 E8 7D FF FF FF 
	call	0x40C2A7  { CLITERAL } 	\ 40C2D7 E8 CB FF FF FF 
;/; IMMEDIATE
	ret		\ 40C2DC C3 
;/
;/T: EXIT, $C3 C, ;


EXITcom:
/*	mov	%rax,-0x08(%rbp)	\ 40C2DD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC3,%eax	\ 40C2E1 	*/.byte 0xB8,0xC3,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C2E6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C2EA E8 FF 53 FF FF 
	ret		\ 40C2EF C3 
;/
;/THS>  MCR .( TALIGN ' EXIT, , $) CURSTR @ MH.  .( Wortbirne: EXIT TIMM )
;/
;/: BRANCH, ( A -- ) \ ZZZZ IF  THEN
;/   0xE9 C,


BRANCHcom:
/*	mov	%rax,-0x08(%rbp)	\ 40C2F0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xE9,%eax	\ 40C2F4 	*/.byte 0xB8,0xE9,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C2F9 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C2FD E8 EC 53 FF FF 
;/  DUP IF THERE 4 + - THEN L,  \  DP @ TO LAST-HERE
/*	mov	%rax,-0x08(%rbp)	\ 40C302 	*/.byte 0x48,0x89,0x45,0xF8
	test	%rax,%rax	\ 40C306 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40C309 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40C329  { BRANCH,+39  } 	\ 40C30D 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40C313 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C317 	*/.byte 0x48,0x8B,0x5,0x32,0x53,0xFF,0xFF
/*	lea	0x04(%rax),%rax	\ 40C31E 	*/.byte 0x48,0x8D,0x40,0x4
/*		negq	%rax	\ 40C322 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 40C325 	*/.byte 0x48,0x3,0x45,0xF8
	call	0x4016AB  { L, } 	\ 40C329 E8 7D 53 FF FF 
;/;
	ret		\ 40C32E C3 
;/
;/T: ?BRANCH, ( A -- )
;/ 0x84 TO J_COD


queBRANCHcom:
/*	movq	$0x84,0x4021ED  { J_COD+5  } (%rip)	\ 40C32F 	*/.byte 0x48,0xC7,0x5,0xB3,0x5E,0xFF,0xFF,0x84,0x0,0x0,0x0
;/   OPT_INIT SetOP $48 C, $C085 W,  OPT \ test   %rax,%rax
	call	0x40916A  { OPT_INIT } 	\ 40C33A E8 2B CE FF FF 
	call	0x40240E  { SetOP } 	\ 40C33F E8 CA 60 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C344 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x48,%eax	\ 40C348 	*/.byte 0xB8,0x48,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C34D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C351 E8 98 53 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C356 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC085,%eax	\ 40C35A 	*/.byte 0xB8,0x85,0xC0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C35F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C363 E8 64 53 FF FF 
	call	0x408DA1  { OPT } 	\ 40C368 E8 34 CA FF FF 
;/   OPT_CLOSE	['] DROP INLINE,
	call	0x409175  { OPT_CLOSE } 	\ 40C36D E8 3 CE FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C372 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x4003FC  { D>S } (%rip),%rax	\ 40C376 	*/.byte 0x48,0x8D,0x5,0x7F,0x40,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C37D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40919C  { INLINE, } 	\ 40C381 E8 16 CE FF FF 
;/     0x0F C,  J_COD C, 
/*	mov	%rax,-0x08(%rbp)	\ 40C386 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xF,%eax	\ 40C38A 	*/.byte 0xB8,0xF,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C38F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C393 E8 56 53 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C398 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 40C39C 	*/.byte 0x48,0x8B,0x5,0x4A,0x5E,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C3A3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C3A7 E8 42 53 FF FF 
;/  DUP IF THERE 4 + - THEN L, \ DP @ TO LAST-HERE
/*	mov	%rax,-0x08(%rbp)	\ 40C3AC 	*/.byte 0x48,0x89,0x45,0xF8
	test	%rax,%rax	\ 40C3B0 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40C3B3 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40C3D3  { ?BRANCH,+A4  } 	\ 40C3B7 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40C3BD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C3C1 	*/.byte 0x48,0x8B,0x5,0x88,0x52,0xFF,0xFF
/*	lea	0x04(%rax),%rax	\ 40C3C8 	*/.byte 0x48,0x8D,0x40,0x4
/*		negq	%rax	\ 40C3CC 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 40C3CF 	*/.byte 0x48,0x3,0x45,0xF8
	call	0x4016AB  { L, } 	\ 40C3D3 E8 D3 52 FF FF 
;/ 0 TO J_COD
/*	movq	$0x0,0x4021ED  { J_COD+5  } (%rip)	\ 40C3D8 	*/.byte 0x48,0xC7,0x5,0xA,0x5E,0xFF,0xFF,0x0,0x0,0x0,0x0
;/;
	ret		\ 40C3E3 C3 
;/
;/: >ORESOLVE1 ( A, N -- )
;/    HERE


greatORESOLVE1:
/*	mov	%rax,-0x08(%rbp)	\ 40C3E4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C3E8 	*/.byte 0x48,0x8B,0x5,0x61,0x52,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C3EF 	*/.byte 0x48,0x89,0x5,0x7F,0x5F,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C3F6 	*/.byte 0x48,0x89,0x45,0xF0
;/    OVER -
/*	mov	-0x08(%rbp),%rax	\ 40C3FA 	*/.byte 0x48,0x8B,0x45,0xF8
/*		negq	%rax	\ 40C3FE 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 40C401 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	-0x08(%rbp),%rdx	\ 40C405 	*/.byte 0x48,0x8B,0x55,0xF8
;/    SWAP 4 - L!
/*	mov	%rax,-0x08(%rbp)	\ 40C409 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 40C40D 	*/.byte 0x48,0x89,0x55,0xF0
/*	movq	$-0x4,%rax	\ 40C411 	*/.byte 0x48,0xC7,0xC0,0xFC,0xFF,0xFF,0xFF
/*	add	-0x10(%rbp),%rax	\ 40C418 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	-0x08(%rbp),%edx	\ 40C41C 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 40C41F 	*/.byte 0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 40C421 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C425 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40C429 C3 
;/
;/: >ORESOLVE ( A, N -- )
;/ DUP	IF_FLAG =	IF   DROP >ORESOLVE1 BREAK


greatORESOLVE:
/*	mov	%rax,-0x08(%rbp)	\ 40C42A 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x1,%rax	\ 40C42E 	*/.byte 0x48,0x35,0x1,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40C434 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40C438 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40C43B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40C43E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40C456  { >ORESOLVE+2C  } 	\ 40C442 	*/.byte 0xF,0x84,0xE,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40C448 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C44C 	*/.byte 0x48,0x8D,0x6D,0x8
	call	0x40C3E4  { >ORESOLVE1 } 	\ 40C450 E8 8F FF FF FF 
	ret		\ 40C455 C3 
;/	HEAD_FLAG <>	IF -2007 THROW THEN \ ABORT" Conditionals not paired"
/*	xor	$0xD,%rax	\ 40C456 	*/.byte 0x48,0x35,0xD,0x0,0x0,0x0
/*		negq	%rax	\ 40C45C 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40C45F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40C462 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40C465 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C469 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40C487  { >ORESOLVE+5D  } 	\ 40C46D 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40C473 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x7D7,%rax	\ 40C477 	*/.byte 0x48,0xC7,0xC0,0x29,0xF8,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C47E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 40C482 E8 A9 5A FF FF 
;/		>ORESOLVE1
	call	0x40C3E4  { >ORESOLVE1 } 	\ 40C487 E8 58 FF FF FF 
;/;
	ret		\ 40C48C C3 
;/
;/T: ." [COMPILE] S" ['] TYPE COMPILE, ; IMMEDIATE


dotdtic:
	call	0x40C12E  { S" } 	\ 40C48D E8 9C FC FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C492 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40177E  { TYPE } (%rip),%rax	\ 40C496 	*/.byte 0x48,0x8D,0x5,0xE1,0x52,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C49D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40C4A1 E8 E3 DB FF FF 
	ret		\ 40C4A6 C3 
;/
;/: ALIGN-NOP ( n -- )
;/\ выровнять HERE на n и заполнить NOP
;/  HERE DUP ROT 2DUP


ALIGNsubNOP:
/*	mov	%rax,-0x08(%rbp)	\ 40C4A7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C4AB 	*/.byte 0x48,0x8B,0x5,0x9E,0x51,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C4B2 	*/.byte 0x48,0x89,0x5,0xBC,0x5E,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C4B9 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	-0x10(%rbp),%rdx	\ 40C4BD 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40C4C1 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	-0x08(%rbp),%rax	\ 40C4C5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	mov	%rdx,-0x08(%rbp)	\ 40C4C9 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	-0x10(%rbp),%rdx	\ 40C4CD 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 40C4D1 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 40C4D5 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	%rax,%rcx	\ 40C4D9 	*/.byte 0x48,0x89,0xC1
/*	mov	-0x20(%rbp),%rax	\ 40C4DC 	*/.byte 0x48,0x8B,0x45,0xE0
;/  MOD DUP IF - + ELSE 2DROP THEN
	dw 9948h		\ 40C4E0 48 99 
/*		idivq	%rcx	\ 40C4E2 	*/.byte 0x48,0xF7,0xF9
/*	mov	%rdx,%rax	\ 40C4E5 	*/.byte 0x48,0x89,0xD0
/*	mov	%rax,-0x20(%rbp)	\ 40C4E8 	*/.byte 0x48,0x89,0x45,0xE0
	test	%rax,%rax	\ 40C4EC 48 85 C0 
/*	mov	-0x20(%rbp),%rax	\ 40C4EF 	*/.byte 0x48,0x8B,0x45,0xE0
/*	lea	-0x18(%rbp),%rbp	\ 40C4F3 	*/.byte 0x48,0x8D,0x6D,0xE8
/*	jz	0x40C511  { ALIGN-NOP+6A  } 	\ 40C4F7 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*		negq	%rax	\ 40C4FD 	*/.byte 0x48,0xF7,0xD8
/*	add	0x00(%rbp),%rax	\ 40C500 	*/.byte 0x48,0x3,0x45,0x0
/*	add	0x08(%rbp),%rax	\ 40C504 	*/.byte 0x48,0x3,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40C508 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jmp	0x40C519  { ALIGN-NOP+72  } 	\ 40C50C 	*/.byte 0xE9,0x8,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 40C511 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40C515 	*/.byte 0x48,0x8D,0x6D,0x10
;/  OVER - DUP ALLOT 0x90 FILL
/*	mov	%rax,-0x08(%rbp)	\ 40C519 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40C51D 	*/.byte 0x48,0x8B,0x45,0x0
/*		negq	%rax	\ 40C521 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 40C524 	*/.byte 0x48,0x3,0x45,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 40C528 	*/.byte 0x48,0x89,0x45,0xF8
/*	add	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40C52C 	*/.byte 0x48,0x1,0x5,0x1D,0x51,0xFF,0xFF
/*	mov	$0x90,%eax	\ 40C533 	*/.byte 0xB8,0x90,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C538 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40095A  { FILL } 	\ 40C53C E8 19 44 FF FF 
;/;
	ret		\ 40C541 C3 
;/
;/T: BEGIN ?COMP HERE BEGIN_FLAG ; IMMEDIATE


BEGIN:
	call	0x40C220  { ?COMP } 	\ 40C542 E8 D9 FC FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C547 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C54B 	*/.byte 0x48,0x8B,0x5,0xFE,0x50,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C552 	*/.byte 0x48,0x89,0x5,0x1C,0x5E,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C559 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x7,%eax	\ 40C55D 	*/.byte 0xB8,0x7,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40C562 	*/.byte 0x48,0x8D,0x6D,0xF0
	ret		\ 40C566 C3 
;/T: UNTIL ?COMP BEGIN_FLAG <> IF -22 THROW THEN  ?BRANCH, ; IMMEDIATE


UNTIL:
	call	0x40C220  { ?COMP } 	\ 40C567 E8 B4 FC FF FF 
/*	xor	$0x7,%rax	\ 40C56C 	*/.byte 0x48,0x35,0x7,0x0,0x0,0x0
/*		negq	%rax	\ 40C572 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40C575 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40C578 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40C57B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C57F 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40C59D  { UNTIL+36  } 	\ 40C583 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40C589 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x16,%rax	\ 40C58D 	*/.byte 0x48,0xC7,0xC0,0xEA,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C594 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 40C598 E8 93 59 FF FF 
	call	0x40C32F  { ?BRANCH, } 	\ 40C59D E8 8D FD FF FF 
	ret		\ 40C5A2 C3 
;/T: AGAIN ?COMP BEGIN_FLAG <> IF -22 THROW THEN   BRANCH, ; IMMEDIATE


AGAIN:
	call	0x40C220  { ?COMP } 	\ 40C5A3 E8 78 FC FF FF 
/*	xor	$0x7,%rax	\ 40C5A8 	*/.byte 0x48,0x35,0x7,0x0,0x0,0x0
/*		negq	%rax	\ 40C5AE 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40C5B1 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40C5B4 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40C5B7 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C5BB 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40C5D9  { AGAIN+36  } 	\ 40C5BF 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40C5C5 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x16,%rax	\ 40C5C9 	*/.byte 0x48,0xC7,0xC0,0xEA,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C5D0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 40C5D4 E8 57 59 FF FF 
	call	0x40C2F0  { BRANCH, } 	\ 40C5D9 E8 12 FD FF FF 
	ret		\ 40C5DE C3 
;/T: AHEAD ?COMP	THERE BRANCH,	THERE HEAD_FLAG ; IMMEDIATE


AHEAD:
	call	0x40C220  { ?COMP } 	\ 40C5DF E8 3C FC FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C5E4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C5E8 	*/.byte 0x48,0x8B,0x5,0x61,0x50,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C5EF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40C2F0  { BRANCH, } 	\ 40C5F3 E8 F8 FC FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C5F8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C5FC 	*/.byte 0x48,0x8B,0x5,0x4D,0x50,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C603 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0xD,%eax	\ 40C607 	*/.byte 0xB8,0xD,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40C60C 	*/.byte 0x48,0x8D,0x6D,0xF0
	ret		\ 40C610 C3 
;/T: IF	?COMP	THERE ?BRANCH,	THERE  IF_FLAG ; IMMEDIATE


IF:
	call	0x40C220  { ?COMP } 	\ 40C611 E8 A FC FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C616 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C61A 	*/.byte 0x48,0x8B,0x5,0x2F,0x50,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C621 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40C32F  { ?BRANCH, } 	\ 40C625 E8 5 FD FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C62A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C62E 	*/.byte 0x48,0x8B,0x5,0x1B,0x50,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C635 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x1,%eax	\ 40C639 	*/.byte 0xB8,0x1,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40C63E 	*/.byte 0x48,0x8D,0x6D,0xF0
	ret		\ 40C642 C3 
;/T: THEN ( A, N -- )
;/	?COMP   >ORESOLVE ; IMMEDIATE


THEN:
	call	0x40C220  { ?COMP } 	\ 40C643 E8 D8 FB FF FF 
	call	0x40C42A  { >ORESOLVE } 	\ 40C648 E8 DD FD FF FF 
	ret		\ 40C64D C3 
;/T: ELSE   ( BO BI ADDR ? -- 0 0 ADDR1 ?1 )
;/  [COMPILE] AHEAD CS-SWAP [COMPILE] THEN ; IMMEDIATE


ELSE:
	call	0x40C5DF  { AHEAD } 	\ 40C64E E8 8C FF FF FF 
	call	0x400817  { CS-SWAP } 	\ 40C653 E8 BF 41 FF FF 
	call	0x40C643  { THEN } 	\ 40C658 E8 E6 FF FF FF 
	ret		\ 40C65D C3 
;/
;/T: WHILE  [COMPILE] IF  CS-SWAP ; IMMEDIATE


WHILE:
	call	0x40C611  { IF } 	\ 40C65E E8 AE FF FF FF 
	call	0x400817  { CS-SWAP } 	\ 40C663 E8 AF 41 FF FF 
	ret		\ 40C668 C3 
;/T: REPEAT [COMPILE] AGAIN [COMPILE] THEN ; IMMEDIATE


REPEAT:
	call	0x40C5A3  { AGAIN } 	\ 40C669 E8 35 FF FF FF 
	call	0x40C643  { THEN } 	\ 40C66E E8 D0 FF FF FF 
	ret		\ 40C673 C3 
;/
;/ 
;/T: DO            \ Run: n1|u1 n2|u2 -- ; R: -- loop-sys           6.1.1240
;/\ *G Begin a *\fo{DO ... LOOP} construct. Takes the end-value and
;/\ ** start-value from the stack.
;/  ['] (DO) _COMPILE, HERE 0 , HERE 3


DO:
/*	mov	%rax,-0x08(%rbp)	\ 40C674 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x400A5F  { (DO) } (%rip),%rax	\ 40C678 	*/.byte 0x48,0x8D,0x5,0xE0,0x43,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C67F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A054  { _COMPILE, } 	\ 40C683 E8 CC D9 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C688 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C68C 	*/.byte 0x48,0x8B,0x5,0xBD,0x4F,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C693 	*/.byte 0x48,0x89,0x5,0xDB,0x5C,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C69A 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x0,%eax	\ 40C69E 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40C6A3 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401690  { , } 	\ 40C6A7 E8 E4 4F FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C6AC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C6B0 	*/.byte 0x48,0x8B,0x5,0x99,0x4F,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C6B7 	*/.byte 0x48,0x89,0x5,0xB7,0x5C,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C6BE 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x3,%eax	\ 40C6C2 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40C6C7 	*/.byte 0x48,0x8D,0x6D,0xF0
;/; IMMEDIATE
	ret		\ 40C6CB C3 
;/
;/T: ?DO           \ Run: n1|u1 n2|u2 -- ; R: -- | loop-sys ; 6.2.0620
;/\ *G Compile a *\fo{DO} which will only begin loop execution if
;/\ ** the loop parameters do not specify an interation count of 0.
;/  ['] (?DO) _COMPILE, HERE 0 , HERE 3


queDO:
/*	mov	%rax,-0x08(%rbp)	\ 40C6CC 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x400A59  { (?DO) } (%rip),%rax	\ 40C6D0 	*/.byte 0x48,0x8D,0x5,0x82,0x43,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C6D7 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A054  { _COMPILE, } 	\ 40C6DB E8 74 D9 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C6E0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C6E4 	*/.byte 0x48,0x8B,0x5,0x65,0x4F,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C6EB 	*/.byte 0x48,0x89,0x5,0x83,0x5C,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C6F2 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x0,%eax	\ 40C6F6 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40C6FB 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401690  { , } 	\ 40C6FF E8 8C 4F FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C704 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C708 	*/.byte 0x48,0x8B,0x5,0x41,0x4F,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C70F 	*/.byte 0x48,0x89,0x5,0x5F,0x5C,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40C716 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x3,%eax	\ 40C71A 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40C71F 	*/.byte 0x48,0x8D,0x6D,0xF0
;/; IMMEDIATE
	ret		\ 40C723 C3 
;/
;/
;/T: LOOP          \ Run: -- ; R: loop-sys1 -- | loop-sys2         6.1.1800
;/\ *G The closing statement of a *\fo{DO ... LOOP} construct.
;/\ ** Increments the index and terminates when the index crosses
;/\ ** the limit.
;/  3 ?PAIRS


LOOP:
/*	mov	%rax,-0x08(%rbp)	\ 40C724 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3,%eax	\ 40C728 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C72D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A773  { ?PAIRS } 	\ 40C731 E8 3D E0 FF FF 
;/ $49 C, $C6FF W, \ inc r14
/*	mov	%rax,-0x08(%rbp)	\ 40C736 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x49,%eax	\ 40C73A 	*/.byte 0xB8,0x49,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C73F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C743 E8 A6 4F FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C748 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC6FF,%eax	\ 40C74C 	*/.byte 0xB8,0xFF,0xC6,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C751 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C755 E8 72 4F FF FF 
;/ $49 C, $C7FF W, \ inc r15
/*	mov	%rax,-0x08(%rbp)	\ 40C75A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x49,%eax	\ 40C75E 	*/.byte 0xB8,0x49,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C763 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C767 E8 82 4F FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C76C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC7FF,%eax	\ 40C770 	*/.byte 0xB8,0xFF,0xC7,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C775 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C779 E8 4E 4F FF FF 
;/  HERE 2+ -  DUP SHORT? \  SetOP SetJP
/*	mov	%rax,-0x08(%rbp)	\ 40C77E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C782 	*/.byte 0x48,0x8B,0x5,0xC7,0x4E,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C789 	*/.byte 0x48,0x89,0x5,0xE5,0x5B,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 40C790 	*/.byte 0x48,0x8D,0x40,0x2
/*		negq	%rax	\ 40C794 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 40C797 	*/.byte 0x48,0x3,0x45,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 40C79B 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40C79F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401FD6  { SHORT? } 	\ 40C7A3 E8 2E 58 FF FF 
;/  IF
	test	%rax,%rax	\ 40C7A8 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40C7AB 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C7AF 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40C7D5  { LOOP+B1  } 	\ 40C7B3 	*/.byte 0xF,0x84,0x1C,0x0,0x0,0x0
;/    0x71 C, C, \ jno short 
/*	mov	%rax,-0x08(%rbp)	\ 40C7B9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x71,%eax	\ 40C7BD 	*/.byte 0xB8,0x71,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C7C2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C7C6 E8 23 4F FF FF 
	call	0x4016EE  { C, } 	\ 40C7CB E8 1E 4F FF FF 
;/  ELSE
/*	jmp	0x40C802  { LOOP+DE  } 	\ 40C7D0 	*/.byte 0xE9,0x2D,0x0,0x0,0x0
;/    4 - 0xF C, 0x81 C, L, \ jno near
/*	addq	$-0x04,%rax	\ 40C7D5 	*/.byte 0x48,0x83,0xC0,0xFC
/*	mov	%rax,-0x08(%rbp)	\ 40C7D9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xF,%eax	\ 40C7DD 	*/.byte 0xB8,0xF,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C7E2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C7E6 E8 3 4F FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C7EB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x81,%eax	\ 40C7EF 	*/.byte 0xB8,0x81,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C7F4 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C7F8 E8 F1 4E FF FF 
	call	0x4016AB  { L, } 	\ 40C7FD E8 A9 4E FF FF 
;/  THEN  \ SetOP
;/  $5E41 W, \ pop r14
/*	mov	%rax,-0x08(%rbp)	\ 40C802 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5E41,%eax	\ 40C806 	*/.byte 0xB8,0x41,0x5E,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C80B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C80F E8 B8 4E FF FF 
;/  $5F41 W, \ pop r15
/*	mov	%rax,-0x08(%rbp)	\ 40C814 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5F41,%eax	\ 40C818 	*/.byte 0xB8,0x41,0x5F,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C81D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C821 E8 A6 4E FF FF 
;/  $59 C, \ pop rcx
/*	mov	%rax,-0x08(%rbp)	\ 40C826 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x59,%eax	\ 40C82A 	*/.byte 0xB8,0x59,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C82F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C833 E8 B6 4E FF FF 
;/  HERE SWAP !
/*	mov	%rax,-0x08(%rbp)	\ 40C838 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C83C 	*/.byte 0x48,0x8B,0x5,0xD,0x4E,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C843 	*/.byte 0x48,0x89,0x5,0x2B,0x5B,0xFF,0xFF
/*	mov	-0x08(%rbp),%rdx	\ 40C84A 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rax,(%rdx)	\ 40C84E 	*/.byte 0x48,0x89,0x2
/*	mov	0x00(%rbp),%rax	\ 40C851 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C855 	*/.byte 0x48,0x8D,0x6D,0x8
;/ ; IMMEDIATE
	ret		\ 40C859 C3 
;/
;/T: +LOOP         \ Run: n -- ; R: loop-sys1 -- | loop-sys2       6.1.0140
;/\ *G As *\fo{LOOP} except that you specify the increment on the
;/\ ** stack. The action of *\fo{n +LOOP} is peculiar when n is
;/\ ** negative:
;/\ *C   -1 0 ?DO  i .  -1 +LOOP
;/\ *P prints *\fo{0 -1}, whereas:
;/\ *C   0 0 ?DO  i .  -1 +LOOP
;/\ *P prints nothing. This a result of the mathematical trick used
;/\ ** to detect the terminating condition. To prevent confusion
;/\ ** avoid using *\fo{n +LOOP} with negative *\i{n}.
;/  3 ?PAIRS


addLOOP:
/*	mov	%rax,-0x08(%rbp)	\ 40C85A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3,%eax	\ 40C85E 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C863 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A773  { ?PAIRS } 	\ 40C867 E8 7 DF FF FF 
;/	$49 C, $c601 W,	\   	add    %rax,%r14
/*	mov	%rax,-0x08(%rbp)	\ 40C86C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x49,%eax	\ 40C870 	*/.byte 0xB8,0x49,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C875 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C879 E8 70 4E FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C87E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC601,%eax	\ 40C882 	*/.byte 0xB8,0x1,0xC6,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C887 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C88B E8 3C 4E FF FF 
;/	$49 C, $c701 W,	\	add    %rax,%r15
/*	mov	%rax,-0x08(%rbp)	\ 40C890 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x49,%eax	\ 40C894 	*/.byte 0xB8,0x49,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C899 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C89D E8 4C 4E FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C8A2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC701,%eax	\ 40C8A6 	*/.byte 0xB8,0x1,0xC7,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C8AB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C8AF E8 18 4E FF FF 
;/	['] DROP INLINE,
/*	mov	%rax,-0x08(%rbp)	\ 40C8B4 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x4003FC  { D>S } (%rip),%rax	\ 40C8B8 	*/.byte 0x48,0x8D,0x5,0x3D,0x3B,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C8BF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40919C  { INLINE, } 	\ 40C8C3 E8 D4 C8 FF FF 
;/  HERE 2+ -  DUP SHORT? \  SetOP SetJP
/*	mov	%rax,-0x08(%rbp)	\ 40C8C8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C8CC 	*/.byte 0x48,0x8B,0x5,0x7D,0x4D,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C8D3 	*/.byte 0x48,0x89,0x5,0x9B,0x5A,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 40C8DA 	*/.byte 0x48,0x8D,0x40,0x2
/*		negq	%rax	\ 40C8DE 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 40C8E1 	*/.byte 0x48,0x3,0x45,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 40C8E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40C8E9 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401FD6  { SHORT? } 	\ 40C8ED E8 E4 56 FF FF 
;/  IF
	test	%rax,%rax	\ 40C8F2 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40C8F5 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C8F9 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40C91F  { +LOOP+C5  } 	\ 40C8FD 	*/.byte 0xF,0x84,0x1C,0x0,0x0,0x0
;/    0x71 C, C, \ jno short 
/*	mov	%rax,-0x08(%rbp)	\ 40C903 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x71,%eax	\ 40C907 	*/.byte 0xB8,0x71,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C90C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C910 E8 D9 4D FF FF 
	call	0x4016EE  { C, } 	\ 40C915 E8 D4 4D FF FF 
;/  ELSE
/*	jmp	0x40C94C  { +LOOP+F2  } 	\ 40C91A 	*/.byte 0xE9,0x2D,0x0,0x0,0x0
;/    4 - 0xF C, 0x81 C, L, \ jno near
/*	addq	$-0x04,%rax	\ 40C91F 	*/.byte 0x48,0x83,0xC0,0xFC
/*	mov	%rax,-0x08(%rbp)	\ 40C923 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xF,%eax	\ 40C927 	*/.byte 0xB8,0xF,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C92C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C930 E8 B9 4D FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C935 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x81,%eax	\ 40C939 	*/.byte 0xB8,0x81,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C93E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C942 E8 A7 4D FF FF 
	call	0x4016AB  { L, } 	\ 40C947 E8 5F 4D FF FF 
;/  THEN  \ SetOP
;/  $5E41 W, \ pop r14
/*	mov	%rax,-0x08(%rbp)	\ 40C94C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5E41,%eax	\ 40C950 	*/.byte 0xB8,0x41,0x5E,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C955 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C959 E8 6E 4D FF FF 
;/  $5F41 W, \ pop r15
/*	mov	%rax,-0x08(%rbp)	\ 40C95E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5F41,%eax	\ 40C962 	*/.byte 0xB8,0x41,0x5F,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C967 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C96B E8 5C 4D FF FF 
;/  $59 C, \ pop rcx
/*	mov	%rax,-0x08(%rbp)	\ 40C970 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x59,%eax	\ 40C974 	*/.byte 0xB8,0x59,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C979 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C97D E8 6C 4D FF FF 
;/  HERE SWAP !
/*	mov	%rax,-0x08(%rbp)	\ 40C982 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40C986 	*/.byte 0x48,0x8B,0x5,0xC3,0x4C,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40C98D 	*/.byte 0x48,0x89,0x5,0xE1,0x59,0xFF,0xFF
/*	mov	-0x08(%rbp),%rdx	\ 40C994 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rax,(%rdx)	\ 40C998 	*/.byte 0x48,0x89,0x2
/*	mov	0x00(%rbp),%rax	\ 40C99B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40C99F 	*/.byte 0x48,0x8D,0x6D,0x8
;/ ; IMMEDIATE
	ret		\ 40C9A3 C3 
;/
;/T: I
;/  ['] DUP INLINE,


I:
/*	mov	%rax,-0x08(%rbp)	\ 40C9A4 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x4007F1  { DUP } (%rip),%rax	\ 40C9A8 	*/.byte 0x48,0x8D,0x5,0x42,0x3E,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C9AF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40919C  { INLINE, } 	\ 40C9B3 E8 E4 C7 FF FF 
;/ OPT_INIT
	call	0x40916A  { OPT_INIT } 	\ 40C9B8 E8 AD C7 FF FF 
;/ SetOP $4c C, $f089 W,  OPT	\	mov %r14,%rax
	call	0x40240E  { SetOP } 	\ 40C9BD E8 4C 5A FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C9C2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x4C,%eax	\ 40C9C6 	*/.byte 0xB8,0x4C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C9CB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 40C9CF E8 1A 4D FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40C9D4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xF089,%eax	\ 40C9D8 	*/.byte 0xB8,0x89,0xF0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40C9DD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 40C9E1 E8 E6 4C FF FF 
	call	0x408DA1  { OPT } 	\ 40C9E6 E8 B6 C3 FF FF 
;/ OPT_CLOSE
	call	0x409175  { OPT_CLOSE } 	\ 40C9EB E8 85 C7 FF FF 
;/ ; IMMEDIATE
	ret		\ 40C9F0 C3 
;/
;/: GET-CURRENT ( -- wid ) \ 94 SEARCH
;/  CURRENT @ ;


GETsubCURRENT:
/*	mov	%rax,-0x08(%rbp)	\ 40C9F1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40160E  { SLEEP+541  } (%rip),%rax	\ 40C9F5 	*/.byte 0x48,0x8B,0x5,0x12,0x4C,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40C9FC 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40CA00 C3 
;/
;/: SET-CURRENT ( wid -- ) \ 94 SEARCH
;/  CURRENT ! ;


SETsubCURRENT:
/*	mov	%rax,0x40160E  { SLEEP+541  } (%rip)	\ 40CA01 	*/.byte 0x48,0x89,0x5,0x6,0x4C,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40CA08 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40CA0C 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40CA10 C3 
;/
;/
;/0 VALUE YDP_FL


YDP_FL:
	call	0x400AF4  { DOVALUE } 	\ 40CA11 E8 DE 40 FF FF 

	DQ 0x0
;/\ : YDP_FL  &YDP_FL @ ;
;/VARIABLE YDP
	DQ 0x0
	DB 0x0,0x0
;/VARIABLE YDP0
	DQ 0x0
;/
;/: YDP><DP
;/  YDP @ DP @

YDPgreatlessDP:
/*	mov	%rax,-0x08(%rbp)	\ 40CA30 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40CA20  { YDP_FL+F  } (%rip),%rax	\ 40CA34 	*/.byte 0x48,0x8B,0x5,0xE5,0xFF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40CA3B 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CA3F 	*/.byte 0x48,0x8B,0x5,0xA,0x4C,0xFF,0xFF
/*	mov	%rax,0x40CA20  { YDP_FL+F  } (%rip)	\ 40CA46 	*/.byte 0x48,0x89,0x5,0xD3,0xFF,0xFF,0xFF
;/  YDP ! DP ! ;
/*	lea	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CA4D 	*/.byte 0x48,0x8D,0x5,0xFC,0x4B,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 40CA54 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 40CA58 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 40CA5B 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40CA5F C3 
;/
;/: ?YDP><DP
;/ YDP_FL \ IS-TEMP-WL 0= AND


queYDPgreatlessDP:
/*	mov	%rax,-0x08(%rbp)	\ 40CA60 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40CA16  { YDP_FL+5  } (%rip),%rax	\ 40CA64 	*/.byte 0x48,0x8B,0x5,0xAB,0xFF,0xFF,0xFF
	test	%rax,%rax	\ 40CA6B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40CA6E 	*/.byte 0x48,0x8B,0x45,0xF8
;/ IF YDP><DP
/*	jz	0x40CAA7  { ?YDP><DP+47  } 	\ 40CA72 	*/.byte 0xF,0x84,0x2F,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40CA78 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40CA20  { YDP_FL+F  } (%rip),%rax	\ 40CA7C 	*/.byte 0x48,0x8B,0x5,0x9D,0xFF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40CA83 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CA87 	*/.byte 0x48,0x8B,0x5,0xC2,0x4B,0xFF,0xFF
/*	mov	%rax,0x40CA20  { YDP_FL+F  } (%rip)	\ 40CA8E 	*/.byte 0x48,0x89,0x5,0x8B,0xFF,0xFF,0xFF
/*	lea	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CA95 	*/.byte 0x48,0x8D,0x5,0xB4,0x4B,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 40CA9C 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 40CAA0 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 40CAA3 	*/.byte 0x48,0x8B,0x45,0xF8
;/ THEN ;
	ret		\ 40CAA7 C3 
;/
;/0 VALUE VIEW_LINK


VIEW_LINK:
	call	0x400AF4  { DOVALUE } 	\ 40CAA8 E8 47 40 FF FF 

	DQ 0x0
;/
;/VARIABLE LAST-CFA
	DQ 0x0
	DB 0x0,0x0,0x0
;/CREATE WARNING 1 ,
	DQ 0x1
;/CREATE NEEDUNIQUE  0 ,
	DQ 0x0
;/
;/: SBUILD ( addr u -- )
;/  ?YDP><DP

SBUILD:
	call	0x40CA60  { ?YDP><DP } 	\ 40CAD0 E8 8B FF FF FF 
;/	HERE 0 , DUP LAST-CFA !
/*	mov	%rax,-0x08(%rbp)	\ 40CAD5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CAD9 	*/.byte 0x48,0x8B,0x5,0x70,0x4B,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40CAE0 	*/.byte 0x48,0x89,0x5,0x8E,0x58,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40CAE7 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x0,%eax	\ 40CAEB 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40CAF0 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401690  { , } 	\ 40CAF4 E8 97 4B FF FF 
/*	mov	%rax,0x40CAB8  { VIEW_LINK+10  } (%rip)	\ 40CAF9 	*/.byte 0x48,0x89,0x5,0xB8,0xFF,0xFF,0xFF
;/	0 L,   ( flags )
/*	mov	%rax,-0x08(%rbp)	\ 40CB00 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40CB04 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40CB09 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016AB  { L, } 	\ 40CB0D E8 99 4B FF FF 
;/	CURSTR @ L,
/*	mov	%rax,-0x08(%rbp)	\ 40CB12 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40B508  { OK.+13  } (%rip),%rax	\ 40CB16 	*/.byte 0x48,0x8B,0x5,0xEB,0xE9,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CB1D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016AB  { L, } 	\ 40CB21 E8 85 4B FF FF 
;/	-ROT WARNING @ NEEDUNIQUE @ OR
/*	mov	0x08(%rbp),%rdx	\ 40CB26 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rax,0x08(%rbp)	\ 40CB2A 	*/.byte 0x48,0x89,0x45,0x8
/*	mov	0x00(%rbp),%rax	\ 40CB2E 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rdx,0x00(%rbp)	\ 40CB32 	*/.byte 0x48,0x89,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40CB36 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40CAC0  { VIEW_LINK+18  } (%rip),%rax	\ 40CB3A 	*/.byte 0x48,0x8B,0x5,0x7F,0xFF,0xFF,0xFF
/*	or	0x40CAC8  { VIEW_LINK+20  } (%rip),%rax	\ 40CB41 	*/.byte 0x48,0xB,0x5,0x80,0xFF,0xFF,0xFF
	test	%rax,%rax	\ 40CB48 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40CB4B 	*/.byte 0x48,0x8B,0x45,0xF8
;/	IF 2DUP GET-CURRENT SEARCH-WORDLIST
/*	jz	0x40CBE1  { SBUILD+111  } 	\ 40CB4F 	*/.byte 0xF,0x84,0x8C,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rdx	\ 40CB55 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40CB59 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 40CB5D 	*/.byte 0x48,0x89,0x55,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 40CB61 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	0x40160E  { SLEEP+541  } (%rip),%rax	\ 40CB65 	*/.byte 0x48,0x8B,0x5,0xA2,0x4A,0xFF,0xFF
/*	lea	-0x18(%rbp),%rbp	\ 40CB6C 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x40ACA2  { SEARCH-WORDLIST } 	\ 40CB70 E8 2D E1 FF FF 
;/	   DUP NEEDUNIQUE @ AND
/*	mov	%rax,-0x08(%rbp)	\ 40CB75 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	0x40CAC8  { VIEW_LINK+20  } (%rip),%rax	\ 40CB79 	*/.byte 0x48,0x23,0x5,0x48,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CB80 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	   ABORT"  unique is need"
	call	0x4018C1  { (S") } 	\ 40CB84 E8 38 4D FF FF 
	.byte 0xF,0x20,0x75,0x6E,0x69,0x71,0x75
	.byte 0x65,0x20,0x69,0x73,0x20,0x6E,0x65,0x65
	.byte 0x64,0xE8,0xE2,0xF5,0xFF,0xFF,0x48,0x85
;/	   IF ( NOUNIQUE ) DROP 2DUP TYPE ."  isn't unique" CR THEN
/*	ror	$0x45,-0x75(%rax)	\ 40CBA0 	*/.byte 0xC0,0x48,0x8B,0x45
/*	add	%cl,-0x73(%rax)	\ 40CBA4 	*/.byte 0x0,0x48,0x8D
	insl	(%dx),%es:(%rdi)		\ 40CBA7 6D 
/*	or	%cl,(%rdi)	\ 40CBA8 	*/.byte 0x8,0xF
	test	(%rdx),%dh	\ 40CBAA 84 32 
/*	add	%al,(%rax)	\ 40CBAC 	*/.byte 0x0,0x0
/*	add	%cl,-0x75(%rax)	\ 40CBAE 	*/.byte 0x0,0x48,0x8B
/*	add	%r9lB,-0x75(%r8)	\ 40CBB1 	*/.byte 0x45,0x0,0x48,0x8B
	Push	%rbp	\ 40CBB5 55 
/*	or	%cl,-0x77(%rax)	\ 40CBB6 	*/.byte 0x8,0x48,0x89
	Push	%rbp	\ 40CBB9 55 
clC	\ 40CBBA F8 
/*	lea	-0x08(%rbp),%rbp	\ 40CBBB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40177E  { TYPE } 	\ 40CBBF E8 BA 4B FF FF 
	call	0x4018C1  { (S") } 	\ 40CBC4 E8 F8 4C FF FF 
	.byte 0xD,0x20,0x69,0x73,0x6E,0x27,0x74
	.byte 0x20,0x75,0x6E,0x69,0x71,0x75,0x65,0xE8
	movabs	%al,0xFFFF4BCFE8FFFF4B  { IMMEDIATE+FFFF4BCFE8BF290F  } 	\ 40CBD8 A2 4B FF FF E8 CF 4B FF FF 
;/	THEN
;/	 CURRENT @ @ ,
/*	mov	%rax,-0x08(%rbp)	\ 40CBE1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40160E  { SLEEP+541  } (%rip),%rax	\ 40CBE5 	*/.byte 0x48,0x8B,0x5,0x22,0x4A,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40CBEC 	*/.byte 0x48,0x8B,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40CBEF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401690  { , } 	\ 40CBF3 E8 98 4A FF FF 
;/	HERE LAST !
/*	mov	%rax,-0x08(%rbp)	\ 40CBF8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CBFC 	*/.byte 0x48,0x8B,0x5,0x4D,0x4A,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40CC03 	*/.byte 0x48,0x89,0x5,0x6B,0x57,0xFF,0xFF
/*	mov	%rax,0x401108  { SLEEP+3B  } (%rip)	\ 40CC0A 	*/.byte 0x48,0x89,0x5,0xF7,0x44,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 40CC11 	*/.byte 0x48,0x8B,0x45,0xF8
;/	S", 
	call	0x40C057  { S", } 	\ 40CC15 E8 3D F4 FF FF 
;/	ALIGN
	call	0x40A79F  { ALIGN } 	\ 40CC1A E8 80 DB FF FF 
;/	?YDP><DP
	call	0x40CA60  { ?YDP><DP } 	\ 40CC1F E8 3C FE FF FF 
;/    HERE SWAP ! ( ......... cfa )
/*	mov	%rax,-0x08(%rbp)	\ 40CC24 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CC28 	*/.byte 0x48,0x8B,0x5,0x21,0x4A,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40CC2F 	*/.byte 0x48,0x89,0x5,0x3F,0x57,0xFF,0xFF
/*	mov	-0x08(%rbp),%rdx	\ 40CC36 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rax,(%rdx)	\ 40CC3A 	*/.byte 0x48,0x89,0x2
/*	mov	0x00(%rbp),%rax	\ 40CC3D 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40CC41 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40CC45 C3 
;/
;/: SMUDGE LAST @ CURRENT @ ! ;


SMUDGE:
/*	mov	%rax,-0x08(%rbp)	\ 40CC46 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401108  { SLEEP+3B  } (%rip),%rax	\ 40CC4A 	*/.byte 0x48,0x8B,0x5,0xB7,0x44,0xFF,0xFF
/*	mov	0x40160E  { SLEEP+541  } (%rip),%rdx	\ 40CC51 	*/.byte 0x48,0x8B,0x15,0xB6,0x49,0xFF,0xFF
/*	mov	%rax,(%rdx)	\ 40CC58 	*/.byte 0x48,0x89,0x2
/*	mov	-0x08(%rbp),%rax	\ 40CC5B 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40CC5F C3 
;/
;/T: SHEADER  SBUILD SMUDGE ;


SHEADER:
	call	0x40CAD0  { SBUILD } 	\ 40CC60 E8 6B FE FF FF 
	call	0x40CC46  { SMUDGE } 	\ 40CC65 E8 DC FF FF FF 
	ret		\ 40CC6A C3 
;/
;/T: HEADER  PARSE-NAME SHEADER ;


HEADER:
	call	0x40AADD  { PARSE-NAME } 	\ 40CC6B E8 6D DE FF FF 
	call	0x40CC60  { SHEADER } 	\ 40CC70 E8 EB FF FF FF 
	ret		\ 40CC75 C3 
;/
;/T: BUILD  PARSE-NAME SBUILD ;


BUILD:
	call	0x40AADD  { PARSE-NAME } 	\ 40CC76 E8 62 DE FF FF 
	call	0x40CAD0  { SBUILD } 	\ 40CC7B E8 50 FE FF FF 
	ret		\ 40CC80 C3 
;/
;/CREATE &DOCONSTANT	' DOCONSTANT ,

	DQ 0xAF5+fimg
;/CREATE &DOVALUE		' DOVALUE ,
	DQ 0xAF4+fimg
;/CREATE &DOCREATE	' DOCREATE ,
	DQ 0xAEA+fimg
;/CREATE &DOVECT		' DOVECT ,
	DQ 0xB02+fimg
;/
;/T: CONSTANT  ( n -- )	HEADER &DOCONSTANT @ COMPILE, , ;

CONSTANT:
	call	0x40CC6B  { HEADER } 	\ 40CCA1 E8 C5 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40CCA6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40CC81  { BUILD+B  } (%rip),%rax	\ 40CCAA 	*/.byte 0x48,0x8B,0x5,0xD0,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CCB1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40CCB5 E8 CF D3 FF FF 
	call	0x401690  { , } 	\ 40CCBA E8 D1 49 FF FF 
	ret		\ 40CCBF C3 
;/
;/T: VALUE ( n -- )	HEADER &DOVALUE	@ COMPILE, , ;


VALUE:
	call	0x40CC6B  { HEADER } 	\ 40CCC0 E8 A6 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40CCC5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40CC89  { BUILD+13  } (%rip),%rax	\ 40CCC9 	*/.byte 0x48,0x8B,0x5,0xB9,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CCD0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40CCD4 E8 B0 D3 FF FF 
	call	0x401690  { , } 	\ 40CCD9 E8 B2 49 FF FF 
	ret		\ 40CCDE C3 
;/
;/: CREATED  SHEADER


CREATED:
	call	0x40CC60  { SHEADER } 	\ 40CCDF E8 7C FF FF FF 
;/  THERE 3 - ALIGNED 3 + DP! THERE LAST @ NAME>C !
/*	mov	%rax,-0x08(%rbp)	\ 40CCE4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CCE8 	*/.byte 0x48,0x8B,0x5,0x61,0x49,0xFF,0xFF
/*	addq	$-0x03,%rax	\ 40CCEF 	*/.byte 0x48,0x83,0xC0,0xFD
/*	lea	-0x08(%rbp),%rbp	\ 40CCF3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401842  { ALIGNED } 	\ 40CCF7 E8 46 4B FF FF 
/*	lea	0x03(%rax),%rax	\ 40CCFC 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40CD00 	*/.byte 0x48,0x89,0x5,0x49,0x49,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40CD07 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CD0B 	*/.byte 0x48,0x8B,0x5,0x3E,0x49,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 40CD12 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401108  { SLEEP+3B  } (%rip),%rax	\ 40CD16 	*/.byte 0x48,0x8B,0x5,0xEB,0x43,0xFF,0xFF
/*	lea	-0x18(%rax),%rax	\ 40CD1D 	*/.byte 0x48,0x8D,0x40,0xE8
/*	mov	-0x08(%rbp),%rdx	\ 40CD21 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rdx,(%rax)	\ 40CD25 	*/.byte 0x48,0x89,0x10
/*	mov	0x40CC91  { BUILD+1B  } (%rip),%rax	\ 40CD28 	*/.byte 0x48,0x8B,0x5,0x62,0xFF,0xFF,0xFF
	call	0x40A089  { COMPILE, } 	\ 40CD2F E8 55 D3 FF FF 
;/ &DOCREATE @ COMPILE, ;
	ret		\ 40CD34 C3 
;/
;/T: CREATE	PARSE-NAME CREATED ;


CREATE:
	call	0x40AADD  { PARSE-NAME } 	\ 40CD35 E8 A3 DD FF FF 
	call	0x40CCDF  { CREATED } 	\ 40CD3A E8 A0 FF FF FF 
	ret		\ 40CD3F C3 
;/
;/T: VARIABLE	CREATE 0 , ;


VARIABLE:
	call	0x40CD35  { CREATE } 	\ 40CD40 E8 F0 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40CD45 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40CD49 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40CD4E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401690  { , } 	\ 40CD52 E8 39 49 FF FF 
	ret		\ 40CD57 C3 
;/
;/T: ->DEFER ( cfa -- )	HEADER 	&DOVECT @ COMPILE, , ;


subgreatDEFER:
	call	0x40CC6B  { HEADER } 	\ 40CD58 E8 E FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40CD5D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40CC99  { BUILD+23  } (%rip),%rax	\ 40CD61 	*/.byte 0x48,0x8B,0x5,0x31,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CD68 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40CD6C E8 18 D3 FF FF 
	call	0x401690  { , } 	\ 40CD71 E8 1A 49 FF FF 
	ret		\ 40CD76 C3 
;/
;/T: DEFER	( -- )  ['] CRASH  ->DEFER ;


DEFER:
/*	mov	%rax,-0x08(%rbp)	\ 40CD77 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40C1DD  { CRASH } (%rip),%rax	\ 40CD7B 	*/.byte 0x48,0x8D,0x5,0x5B,0xF4,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CD82 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40CD58  { ->DEFER } 	\ 40CD86 E8 CD FF FF FF 
	ret		\ 40CD8B C3 
;/
;/T: #DEFINE  BUILD SMUDGE &DOCONSTANT @ COMPILE, INTERPRET , ; 


hashDEFINE:
	call	0x40CC76  { BUILD } 	\ 40CD8C E8 E5 FE FF FF 
	call	0x40CC46  { SMUDGE } 	\ 40CD91 E8 B0 FE FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40CD96 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40CC81  { BUILD+B  } (%rip),%rax	\ 40CD9A 	*/.byte 0x48,0x8B,0x5,0xE0,0xFE,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CDA1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40CDA5 E8 DF D2 FF FF 
	call	0x40AE11  { INTERPRET } 	\ 40CDAA E8 62 E0 FF FF 
	call	0x401690  { , } 	\ 40CDAF E8 DC 48 FF FF 
	ret		\ 40CDB4 C3 
;/
;/: DEFER@ ( xt1 i?? i?? xt2 )
;/\ xt2 is the execution token xt1 is set to execute. An ambiguous condition exists if xt1 is not
;/\ the execution token of a word defined by DEFER, or if xt1 has not been set to execute an
;/  >BODY @ ;


DEFERload:
/*	mov	0x05(%rax),%rax	\ 40CDB5 	*/.byte 0x48,0x8B,0x40,0x5
	ret		\ 40CDB9 C3 
;/: DEFER! ( xt2 xt1 i?? i?? )
;/\ Set the word xt1 to execute xt2. An ambiguous condition exists if xt1 is not for a word
;/\ defined by DEFER.
;/  >BODY ! ;


DEFERsave:
/*	lea	0x05(%rax),%rax	\ 40CDBA 	*/.byte 0x48,0x8D,0x40,0x5
/*	mov	0x00(%rbp),%rdx	\ 40CDBE 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rdx,(%rax)	\ 40CDC2 	*/.byte 0x48,0x89,0x10
/*	mov	0x08(%rbp),%rax	\ 40CDC5 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40CDC9 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 40CDCD C3 
;/
;/T: TO '


TO:
	call	0x40BFC7  { ' } 	\ 40CDCE E8 F4 F1 FF FF 
;/ STATE @
/*	mov	%rax,-0x08(%rbp)	\ 40CDD3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4010F8  { SLEEP+2B  } (%rip),%rax	\ 40CDD7 	*/.byte 0x48,0x8B,0x5,0x1A,0x43,0xFF,0xFF
	test	%rax,%rax	\ 40CDDE 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40CDE1 	*/.byte 0x48,0x8B,0x45,0xF8
;/ IF
/*	jz	0x40CE0D  { TO+3F  } 	\ 40CDE5 	*/.byte 0xF,0x84,0x22,0x0,0x0,0x0
;/  >BODY  ADDR, ['] !
/*	mov	%rax,-0x08(%rbp)	\ 40CDEB 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x05(%rax),%rax	\ 40CDEF 	*/.byte 0x48,0x8D,0x40,0x5
	call	0x409F44  { ADDR, } 	\ 40CDF3 E8 4C D1 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40CDF8 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x4004C9  { ! } (%rip),%rax	\ 40CDFC 	*/.byte 0x48,0x8D,0x5,0xC6,0x36,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CE03 	*/.byte 0x48,0x8D,0x6D,0xF8
;/   COMPILE,
	call	0x40A089  { COMPILE, } 	\ 40CE07 E8 7D D2 FF FF 
;/ BREAK
	ret		\ 40CE0C C3 
;/ DEFER!  ; IMMEDIATE
/*	lea	0x05(%rax),%rax	\ 40CE0D 	*/.byte 0x48,0x8D,0x40,0x5
/*	mov	0x00(%rbp),%rdx	\ 40CE11 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rdx,(%rax)	\ 40CE15 	*/.byte 0x48,0x89,0x10
/*	mov	0x08(%rbp),%rax	\ 40CE18 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40CE1C 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 40CE20 C3 
;/
;/: (DOES>)
;/ R>	HERE >R


cbigDOESgreatcend:
/*	mov	%rax,-0x08(%rbp)	\ 40CE21 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40CE25 58 
/*	mov	%rax,-0x10(%rbp)	\ 40CE26 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CE2A 	*/.byte 0x48,0x8B,0x5,0x1F,0x48,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40CE31 	*/.byte 0x48,0x89,0x5,0x3D,0x55,0xFF,0xFF
	Push	%rax	\ 40CE38 50 
/*	mov	0x401108  { SLEEP+3B  } (%rip),%rax	\ 40CE39 	*/.byte 0x48,0x8B,0x5,0xC8,0x42,0xFF,0xFF
/*	mov	-0x18(%rax),%rax	\ 40CE40 	*/.byte 0x48,0x8B,0x40,0xE8
;/	LAST @ NAME>  DP !
/*	mov	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40CE44 	*/.byte 0x48,0x89,0x5,0x5,0x48,0xFF,0xFF
/*	mov	-0x10(%rbp),%rax	\ 40CE4B 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 40CE4F 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	COMPILE,
	call	0x40A089  { COMPILE, } 	\ 40CE53 E8 31 D2 FF FF 
;/ R> DP !
/*	mov	%rax,-0x08(%rbp)	\ 40CE58 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 40CE5C 8F 45 F0 
/*	lea	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40CE5F 	*/.byte 0x48,0x8D,0x5,0xEA,0x47,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 40CE66 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 40CE6A 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 40CE6D 	*/.byte 0x48,0x8B,0x45,0xF8
;/;
	ret		\ 40CE71 C3 
;/
;/T: DOES>
;/ ['] (DOES>)	COMPILE,


DOESgreat:
/*	mov	%rax,-0x08(%rbp)	\ 40CE72 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40CE21  { (DOES>) } (%rip),%rax	\ 40CE76 	*/.byte 0x48,0x8D,0x5,0xA4,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40CE7D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40CE81 E8 3 D2 FF FF 
;/ [COMPILE] R>
	call	0x409D7F  { R> } 	\ 40CE86 E8 F4 CE FF FF 
;/; IMMEDIATE
	ret		\ 40CE8B C3 
;/
;/T: \ SOURCE NIP >IN ! ; IMMEDIATE


sl:
	call	0x40A89D  { SOURCE } 	\ 40CE8C E8 C DA FF FF 
/*	mov	%rax,0x401310  { SLEEP+243  } (%rip)	\ 40CE91 	*/.byte 0x48,0x89,0x5,0x78,0x44,0xFF,0xFF
/*	mov	0x08(%rbp),%rax	\ 40CE98 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40CE9C 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 40CEA0 C3 
;/
;/T: (  ( "ccc<paren>" -- ) \ 94 FILE
;/\ Расширить семантику CORE (, включив:
;/\ Когда разбирается текстовый файл, если конец разбираемой области достигнут
;/\ раньше, чем найдена правая скобка, снова заполнить входной буфер следующей
;/\ строкой из файла, установить >IN в ноль и продолжать разбор, повторяя
;/\ этот процесс до тех пор, пока не будет найдена правая скобка или не
;/\ будет достигнут конец файла.
;/  BEGIN
;/    [CHAR] ) DUP PARSE + C@ = 0=


cbig:
/*	mov	%rax,-0x08(%rbp)	\ 40CEA1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x29,%eax	\ 40CEA5 	*/.byte 0xB8,0x29,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40CEAA 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 40CEAE 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x40AB99  { PARSE } 	\ 40CEB2 E8 E2 DC FF FF 
/*	add	0x00(%rbp),%rax	\ 40CEB7 	*/.byte 0x48,0x3,0x45,0x0
/*	movzb	(%rax),%eax	\ 40CEBB 	*/.byte 0xF,0xB6,0x0
/*	xor	0x08(%rbp),%rax	\ 40CEBE 	*/.byte 0x48,0x33,0x45,0x8
/*	subq	$0x01,%rax	\ 40CEC2 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40CEC6 	*/.byte 0x48,0x19,0xC0
/*	subq	$0x01,%rax	\ 40CEC9 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40CECD 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40CED0 48 85 C0 
/*	mov	0x10(%rbp),%rax	\ 40CED3 	*/.byte 0x48,0x8B,0x45,0x10
;/  WHILE
/*	lea	0x18(%rbp),%rbp	\ 40CED7 	*/.byte 0x48,0x8D,0x6D,0x18
/*	jz	0x40CF04  { (+63  } 	\ 40CEDB 	*/.byte 0xF,0x84,0x23,0x0,0x0,0x0
;/    REFILL 0= IF EXIT THEN
	call	0x40B6D3  { REFILL } 	\ 40CEE1 E8 ED E7 FF FF 
/*	subq	$0x01,%rax	\ 40CEE6 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40CEEA 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40CEED 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40CEF0 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40CEF4 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40CEFF  { (+5E  } 	\ 40CEF8 	*/.byte 0xF,0x84,0x1,0x0,0x0,0x0
	ret		\ 40CEFE C3 
;/  REPEAT
/*	jmp	0x40CEA1  { ( } 	\ 40CEFF 	*/.byte 0xE9,0x9D,0xFF,0xFF,0xFF
;/; IMMEDIATE
	ret		\ 40CF04 C3 
;/
;/T: .( [CHAR] ) PARSE TYPE ; IMMEDIATE


dotcbig:
/*	mov	%rax,-0x08(%rbp)	\ 40CF05 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x29,%eax	\ 40CF09 	*/.byte 0xB8,0x29,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40CF0E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40AB99  { PARSE } 	\ 40CF12 E8 82 DC FF FF 
	call	0x40177E  { TYPE } 	\ 40CF17 E8 62 48 FF FF 
	ret		\ 40CF1C C3 
;/
;/T: [CHAR] ?COMP CHAR LIT, ; IMMEDIATE


xcCHARyc:
	call	0x40C220  { ?COMP } 	\ 40CF1D E8 FE F2 FF FF 
	call	0x40C009  { CHAR } 	\ 40CF22 E8 E2 F0 FF FF 
	call	0x409F37  { LIT, } 	\ 40CF27 E8 B D0 FF FF 
	ret		\ 40CF2C C3 
;/
;/: [DEFINED] ( -- f ) \ "name"
;/  PARSE-NAME SFIND  IF DROP TRUE ELSE 2DROP FALSE THEN


xcDEFINEDyc:
	call	0x40AADD  { PARSE-NAME } 	\ 40CF2D E8 AB DB FF FF 
	call	0x40ACAF  { SFIND } 	\ 40CF32 E8 78 DD FF FF 
	test	%rax,%rax	\ 40CF37 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40CF3A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40CF3E 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40CF54  { [DEFINED]+27  } 	\ 40CF42 	*/.byte 0xF,0x84,0xC,0x0,0x0,0x0
/*	movq	$-0x1,%rax	\ 40CF48 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	jmp	0x40CF5D  { [DEFINED]+30  } 	\ 40CF4F 	*/.byte 0xE9,0x9,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 40CF54 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	0x08(%rbp),%rbp	\ 40CF59 	*/.byte 0x48,0x8D,0x6D,0x8
;/; IMMEDIATE
	ret		\ 40CF5D C3 
;/
;/: [UNDEFINED]  ( -- f )   [COMPILE] [DEFINED] 0= ; IMMEDIATE


xcUNDEFINEDyc:
	call	0x40CF2D  { [DEFINED] } 	\ 40CF5E E8 CA FF FF FF 
/*	subq	$0x01,%rax	\ 40CF63 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40CF67 	*/.byte 0x48,0x19,0xC0
	ret		\ 40CF6A C3 
;/
;/T: \+ [COMPILE] [UNDEFINED]	IF [COMPILE] \ THEN ; IMMEDIATE


sladd:
	call	0x40CF5E  { [UNDEFINED] } 	\ 40CF6B E8 EE FF FF FF 
	test	%rax,%rax	\ 40CF70 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40CF73 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40CF77 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40CF86  { \++1B  } 	\ 40CF7B 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
	call	0x40CE8C  { \ } 	\ 40CF81 E8 6 FF FF FF 
	ret		\ 40CF86 C3 
;/T: \- [COMPILE] [DEFINED]	IF [COMPILE] \ THEN ; IMMEDIATE


slsub:
	call	0x40CF2D  { [DEFINED] } 	\ 40CF87 E8 A1 FF FF FF 
	test	%rax,%rax	\ 40CF8C 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40CF8F 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40CF93 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40CFA2  { \-+1B  } 	\ 40CF97 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
	call	0x40CE8C  { \ } 	\ 40CF9D E8 EA FE FF FF 
	ret		\ 40CFA2 C3 
;/
;/T: \EOF  ( -- )
;/\ Заканчивает трансляцию текущего потока
;/  BEGIN REFILL 0= UNTIL  [COMPILE] \


slEOF:
	call	0x40B6D3  { REFILL } 	\ 40CFA3 E8 2B E7 FF FF 
/*	subq	$0x01,%rax	\ 40CFA8 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40CFAC 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40CFAF 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40CFB2 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40CFB6 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40CFA3  { \EOF } 	\ 40CFBA 	*/.byte 0xF,0x84,0xE3,0xFF,0xFF,0xFF
	call	0x40CE8C  { \ } 	\ 40CFC0 E8 C7 FE FF FF 
;/;
	ret		\ 40CFC5 C3 
;/
;/: FIND ( c-addr -- c-addr 0 | xt 1 | xt -1 ) \ 94 SEARCH
;/  DUP >R COUNT SFIND


FIND:
/*	mov	%rax,-0x08(%rbp)	\ 40CFC6 	*/.byte 0x48,0x89,0x45,0xF8
	Push	%rax	\ 40CFCA 50 
/*	mov	-0x08(%rbp),%rax	\ 40CFCB 	*/.byte 0x48,0x8B,0x45,0xF8
/*	lea	0x01(%rax),%rdx	\ 40CFCF 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40CFD3 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40CFD7 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40CFDB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40ACAF  { SFIND } 	\ 40CFDF E8 CB DC FF FF 
;/  DUP 0= IF NIP NIP R> SWAP ELSE RDROP THEN
/*	mov	%rax,-0x08(%rbp)	\ 40CFE4 	*/.byte 0x48,0x89,0x45,0xF8
/*	subq	$0x01,%rax	\ 40CFE8 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40CFEC 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40CFEF 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40CFF2 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40D00E  { FIND+48  } 	\ 40CFF6 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	%rax,%rdx	\ 40CFFC 	*/.byte 0x48,0x89,0xC2
	pop	0x08(%rbp)	\ 40CFFF 8F 45 8 
/*	mov	%rdx,%rax	\ 40D002 	*/.byte 0x48,0x89,0xD0
/*	lea	0x08(%rbp),%rbp	\ 40D005 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x40D013  { FIND+4D  } 	\ 40D009 	*/.byte 0xE9,0x5,0x0,0x0,0x0
/*	lea	0x08(%rsp),%rsp	\ 40D00E 	*/.byte 0x48,0x8D,0x64,0x24,0x8
;/;
	ret		\ 40D013 C3 
;/
;/: GET-ORDER ( -- widn ... wid1 n ) \ 94 SEARCH
;/  SP@ >R 0 >R


GETsubORDER:
	call	0x400465  { SP@ } 	\ 40D014 E8 4C 34 FF FF 
	Push	%rax	\ 40D019 50 
/*	mov	$0x0,%eax	\ 40D01A 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	Push	%rax	\ 40D01F 50 
/*	lea	0x401586  { SLEEP+4B9  } (%rip),%rax	\ 40D020 	*/.byte 0x48,0x8D,0x5,0x5F,0x45,0xFF,0xFF
;/  CONTEXT
;/  BEGIN DUP @ ?DUP
/*	mov	%rax,-0x08(%rbp)	\ 40D027 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%rax	\ 40D02B 	*/.byte 0x48,0x8B,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40D02E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4007EC  { ?DUP } 	\ 40D032 E8 B5 37 FF FF 
;/  WHILE >R CELL+
	test	%rax,%rax	\ 40D037 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40D03A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D03E 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40D05A  { GET-ORDER+46  } 	\ 40D042 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
	Push	%rax	\ 40D048 50 
/*	mov	0x00(%rbp),%rax	\ 40D049 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rax),%rax	\ 40D04D 	*/.byte 0x48,0x8D,0x40,0x8
/*	lea	0x08(%rbp),%rbp	\ 40D051 	*/.byte 0x48,0x8D,0x6D,0x8
;/  REPEAT  DROP
/*	jmp	0x40D027  { GET-ORDER+13  } 	\ 40D055 	*/.byte 0xE9,0xCD,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40D05A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D05E 	*/.byte 0x48,0x8D,0x6D,0x8
;/  BEGIN R> DUP 0=
/*	mov	%rax,-0x08(%rbp)	\ 40D062 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40D066 58 
/*	mov	%rax,-0x10(%rbp)	\ 40D067 	*/.byte 0x48,0x89,0x45,0xF0
/*	subq	$0x01,%rax	\ 40D06B 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40D06F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40D072 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40D075 	*/.byte 0x48,0x8B,0x45,0xF0
;/  UNTIL DROP
/*	lea	-0x08(%rbp),%rbp	\ 40D079 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x40D062  { GET-ORDER+4E  } 	\ 40D07D 	*/.byte 0xF,0x84,0xDF,0xFF,0xFF,0xFF
	pop	%rax	\ 40D083 58 
	call	0x400465  { SP@ } 	\ 40D084 E8 DC 33 FF FF 
/*		negq	%rax	\ 40D089 	*/.byte 0x48,0xF7,0xD8
;/  R> SP@ - 8 / 1-
/*	add	0x00(%rbp),%rax	\ 40D08C 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 40D090 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	$0x8,%eax	\ 40D094 	*/.byte 0xB8,0x8,0x0,0x0,0x0
/*	mov	%rax,%rcx	\ 40D099 	*/.byte 0x48,0x89,0xC1
/*	mov	0x00(%rbp),%rax	\ 40D09C 	*/.byte 0x48,0x8B,0x45,0x0
	dw 9948h		\ 40D0A0 48 99 
/*		idivq	%rcx	\ 40D0A2 	*/.byte 0x48,0xF7,0xF9
/*	lea	-0x01(%rax),%rax	\ 40D0A5 	*/.byte 0x48,0x8D,0x40,0xFF
/*	lea	0x08(%rbp),%rbp	\ 40D0A9 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40D0AD C3 
;/
;/: BLANK BL FILL ;


BLANK:
/*	mov	%rax,-0x08(%rbp)	\ 40D0AE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20,%eax	\ 40D0B2 	*/.byte 0xB8,0x20,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40D0B7 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40095A  { FILL } 	\ 40D0BB E8 9A 38 FF FF 
	ret		\ 40D0C0 C3 
;/
;/: ID. ( NFA[E] -> )  COUNT TYPE ;


IDdot:
/*	lea	0x01(%rax),%rdx	\ 40D0C1 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40D0C5 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40D0C9 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40D0CD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40177E  { TYPE } 	\ 40D0D1 E8 A8 46 FF FF 
	ret		\ 40D0D6 C3 
;/
;/T: LATEST ( -> NFA )    CURRENT @ @ ;


LATEST:
/*	mov	%rax,-0x08(%rbp)	\ 40D0D7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40160E  { SLEEP+541  } (%rip),%rax	\ 40D0DB 	*/.byte 0x48,0x8B,0x5,0x2C,0x45,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40D0E2 	*/.byte 0x48,0x8B,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40D0E5 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40D0E9 C3 
;/
;/\ : [COMPILE] ' COMPILE, ; IMMEDIATE
;/
;/T: [COMPILE] ' COMPILE, ; IMMEDIATE


xcCOMPILEyc:
	call	0x40BFC7  { ' } 	\ 40D0EA E8 D8 EE FF FF 
	call	0x40A089  { COMPILE, } 	\ 40D0EF E8 95 CF FF FF 
	ret		\ 40D0F4 C3 
;/
;/T: POSTPONE
;/\  ?COMP
;/  PARSE-NAME SFIND DUP


POSTPONE:
	call	0x40AADD  { PARSE-NAME } 	\ 40D0F5 E8 E3 D9 FF FF 
	call	0x40ACAF  { SFIND } 	\ 40D0FA E8 B0 DB FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40D0FF 	*/.byte 0x48,0x89,0x45,0xF8
/*	subq	$0x01,%rax	\ 40D103 	*/.byte 0x48,0x83,0xE8,0x1
;/ 0=	IF -13 THROW THEN
/*	sbb	%rax,%rax	\ 40D107 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40D10A 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40D10D 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40D12B  { POSTPONE+36  } 	\ 40D111 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40D117 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0xD,%rax	\ 40D11B 	*/.byte 0x48,0xC7,0xC0,0xF3,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D122 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 40D126 E8 5 4E FF FF 
;/ 1 = 	IF	COMPILE,
/*	xor	$0x1,%rax	\ 40D12B 	*/.byte 0x48,0x35,0x1,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40D131 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40D135 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40D138 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40D13B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D13F 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40D153  { POSTPONE+5E  } 	\ 40D143 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x40A089  { COMPILE, } 	\ 40D149 E8 3B CF FF FF 
;/	ELSE	LIT, ['] COMPILE, COMPILE,
/*	jmp	0x40D16C  { POSTPONE+77  } 	\ 40D14E 	*/.byte 0xE9,0x19,0x0,0x0,0x0
	call	0x409F37  { LIT, } 	\ 40D153 E8 DF CD FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40D158 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40A089  { COMPILE, } (%rip),%rax	\ 40D15C 	*/.byte 0x48,0x8D,0x5,0x26,0xCF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D163 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40D167 E8 1D CF FF FF 
;/	THEN
;/; IMMEDIATE
	ret		\ 40D16C C3 
;/
;/T: BREAK  EXIT, [COMPILE] THEN ; IMMEDIATE


BREAK:
	call	0x40C2DD  { EXIT, } 	\ 40D16D E8 6B F1 FF FF 
	call	0x40C643  { THEN } 	\ 40D172 E8 CC F4 FF FF 
	ret		\ 40D177 C3 
;/
;/: UPPER ( A L -- )
;/         OVER + SWAP


UPPER:
/*	add	0x00(%rbp),%rax	\ 40D178 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	0x00(%rbp),%rdx	\ 40D17C 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40D180 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 40D184 	*/.byte 0x48,0x89,0xD0
;/         ?DO I C@ DUP [CHAR] Z U>
	call	0x400A59  { (?DO) } 	\ 40D187 E8 CD 38 FF FF 
	.quad 0x40D1E9  { UPPER+71  } 
/*	mov	%rax,-0x08(%rbp)	\ 40D194 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%r14,%rax	\ 40D198 	*/.byte 0x4C,0x89,0xF0
/*	movzb	(%rax),%eax	\ 40D19B 	*/.byte 0xF,0xB6,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40D19E 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 40D1A2 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	$0x5A,%eax	\ 40D1A6 	*/.byte 0xB8,0x5A,0x0,0x0,0x0
/*	cmp	-0x18(%rbp),%rax	\ 40D1AB 	*/.byte 0x48,0x3B,0x45,0xE8
/*	sbb	%rax,%rax	\ 40D1AF 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40D1B2 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40D1B5 	*/.byte 0x48,0x8B,0x45,0xF0
;/            IF  0xDF AND
/*	lea	-0x08(%rbp),%rbp	\ 40D1B9 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x40D1C8  { UPPER+50  } 	\ 40D1BD 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
/*	and	$0xDF,%eax	\ 40D1C3 	*/.byte 0x25,0xDF,0x0,0x0,0x0
;/            THEN  I C!
/*	mov	%rax,-0x08(%rbp)	\ 40D1C8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%r14,%rax	\ 40D1CC 	*/.byte 0x4C,0x89,0xF0
/*	mov	-0x08(%rbp),%dl	\ 40D1CF 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 40D1D2 	*/.byte 0x88,0x10
/*	mov	0x00(%rbp),%rax	\ 40D1D4 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D1D8 	*/.byte 0x48,0x8D,0x6D,0x8
;/         LOOP ;
/*	inc	%r14	\ 40D1DC 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 40D1DF 	*/.byte 0x49,0xFF,0xC7
	jNo	0x40D194  { UPPER+1C  } 	\ 40D1E2 71 B0 
	pop	%r14	\ 40D1E4 41 5E 
	pop	%r15	\ 40D1E6 41 5F 
	pop	%rcx	\ 40D1E8 59 
	ret		\ 40D1E9 C3 
;/
;/T: 1RP@  ['] RP@   COMPILE,


1RPload:
/*	mov	%rax,-0x08(%rbp)	\ 40D1EA 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x4003EE  { RP@ } (%rip),%rax	\ 40D1EE 	*/.byte 0x48,0x8D,0x5,0xF9,0x31,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D1F5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40D1F9 E8 8B CE FF FF 
;/         ['] CELL+ COMPILE,  ; IMMEDIATE
/*	mov	%rax,-0x08(%rbp)	\ 40D1FE 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x400737  { CELL+ } (%rip),%rax	\ 40D202 	*/.byte 0x48,0x8D,0x5,0x2E,0x35,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D209 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40D20D E8 77 CE FF FF 
	ret		\ 40D212 C3 
;/
;/T: 2RP@  [COMPILE] 1RP@


2RPload:
	call	0x40D1EA  { 1RP@ } 	\ 40D213 E8 D2 FF FF FF 
;/         ['] CELL+ COMPILE,  ; IMMEDIATE
/*	mov	%rax,-0x08(%rbp)	\ 40D218 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x400737  { CELL+ } (%rip),%rax	\ 40D21C 	*/.byte 0x48,0x8D,0x5,0x14,0x35,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D223 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40D227 E8 5D CE FF FF 
	ret		\ 40D22C C3 
;/
;/T: 3RP@  [COMPILE] 2RP@


3RPload:
	call	0x40D213  { 2RP@ } 	\ 40D22D E8 E1 FF FF FF 
;/         ['] CELL+ COMPILE,  ; IMMEDIATE
/*	mov	%rax,-0x08(%rbp)	\ 40D232 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x400737  { CELL+ } (%rip),%rax	\ 40D236 	*/.byte 0x48,0x8D,0x5,0xFA,0x34,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D23D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40D241 E8 43 CE FF FF 
	ret		\ 40D246 C3 
;/
;/T: 4RP@  [COMPILE] 3RP@


4RPload:
	call	0x40D22D  { 3RP@ } 	\ 40D247 E8 E1 FF FF FF 
;/         ['] CELL+ COMPILE,  ; IMMEDIATE
/*	mov	%rax,-0x08(%rbp)	\ 40D24C 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x400737  { CELL+ } (%rip),%rax	\ 40D250 	*/.byte 0x48,0x8D,0x5,0xE0,0x34,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D257 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40D25B E8 29 CE FF FF 
	ret		\ 40D260 C3 
;/
;/T: VOC-NAME. ( wid -- )
;/  DUP CELL+ CELL+ @ DUP


VOCsubNAMEdot:
/*	mov	%rax,-0x08(%rbp)	\ 40D261 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x10(%rax),%rax	\ 40D265 	*/.byte 0x48,0x8B,0x40,0x10
/*	mov	%rax,-0x10(%rbp)	\ 40D269 	*/.byte 0x48,0x89,0x45,0xF0
	test	%rax,%rax	\ 40D26D 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40D270 	*/.byte 0x48,0x8B,0x45,0xF0
;/ IF ID. DROP BREAK
/*	lea	-0x08(%rbp),%rbp	\ 40D274 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x40D28C  { VOC-NAME.+2B  } 	\ 40D278 	*/.byte 0xF,0x84,0xE,0x0,0x0,0x0
	call	0x40D0C1  { ID. } 	\ 40D27E E8 3E FE FF FF 
/*	mov	0x00(%rbp),%rax	\ 40D283 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D287 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40D28B C3 
;/   DROP ." <NONAME>:" U. 
/*	mov	0x00(%rbp),%rax	\ 40D28C 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D290 	*/.byte 0x48,0x8D,0x6D,0x8
	call	0x4018C1  { (S") } 	\ 40D294 E8 28 46 FF FF 
	.byte 0x9,0x3C,0x4E,0x4F,0x4E,0x41,0x4D
	.byte 0x45,0x3E,0x3A,0xE8,0xD6,0x44,0xFF,0xFF
	call	0x409467  { U. } 	\ 40D2A8 E8 BA C1 FF FF 
;/;
	ret		\ 40D2AD C3 
;/
;/: VOCS
;/        VOC-LIST


VOCS:
/*	mov	%rax,-0x08(%rbp)	\ 40D2AE 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40157E  { SLEEP+4B1  } (%rip),%rax	\ 40D2B2 	*/.byte 0x48,0x8D,0x5,0xC5,0x42,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D2B9 	*/.byte 0x48,0x8D,0x6D,0xF8
;/        BEGIN @ DUP WHILE
/*	mov	(%rax),%rax	\ 40D2BD 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40D2C0 	*/.byte 0x48,0x89,0x45,0xF8
	test	%rax,%rax	\ 40D2C4 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40D2C7 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40D2EC  { VOCS+3E  } 	\ 40D2CB 	*/.byte 0xF,0x84,0x1B,0x0,0x0,0x0
;/               DUP CELL-  VOC-NAME. SPACE
/*	mov	%rax,-0x08(%rbp)	\ 40D2D1 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rax),%rax	\ 40D2D5 	*/.byte 0x48,0x8D,0x40,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40D2D9 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40D261  { VOC-NAME. } 	\ 40D2DD E8 7F FF FF FF 
	call	0x401969  { SPACE } 	\ 40D2E2 E8 82 46 FF FF 
;/        REPEAT
/*	jmp	0x40D2BD  { VOCS+F  } 	\ 40D2E7 	*/.byte 0xE9,0xD1,0xFF,0xFF,0xFF
;/        DROP
/*	mov	0x00(%rbp),%rax	\ 40D2EC 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D2F0 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40D2F4 C3 
;/
;/VARIABLE RP0

	DQ 0x0
	DB 0x0,0x0,0x0
;/
;/: WORDLIST ( --- wid)
;/  HERE	0 , 

WORDLIST:
/*	mov	%rax,-0x08(%rbp)	\ 40D300 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40D304 	*/.byte 0x48,0x8B,0x5,0x45,0x43,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40D30B 	*/.byte 0x48,0x89,0x5,0x63,0x50,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40D312 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x0,%eax	\ 40D316 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40D31B 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401690  { , } 	\ 40D31F E8 6C 43 FF FF 
;/  HERE  VOC-LIST @ , VOC-LIST !
/*	mov	%rax,-0x08(%rbp)	\ 40D324 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40D328 	*/.byte 0x48,0x8B,0x5,0x21,0x43,0xFF,0xFF
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 40D32F 	*/.byte 0x48,0x89,0x5,0x3F,0x50,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40D336 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40157E  { SLEEP+4B1  } (%rip),%rax	\ 40D33A 	*/.byte 0x48,0x8B,0x5,0x3D,0x42,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 40D341 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401690  { , } 	\ 40D345 E8 46 43 FF FF 
/*	mov	%rax,0x40157E  { SLEEP+4B1  } (%rip)	\ 40D34A 	*/.byte 0x48,0x89,0x5,0x2D,0x42,0xFF,0xFF
/*	mov	$0x0,%eax	\ 40D351 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	call	0x401690  { , } 	\ 40D356 E8 35 43 FF FF 
;/	0 ,
;/\ Make a new wordlist and give its address.
;/;
	ret		\ 40D35B C3 
;/
;/
;/T: VOCABULARY ( "<spaces>name" -- )
;/  WORDLIST


VOCABULARY:
	call	0x40D300  { WORDLIST } 	\ 40D35C E8 9F FF FF FF 
;/  CREATE DUP ,
	call	0x40CD35  { CREATE } 	\ 40D361 E8 CF F9 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40D366 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40D36A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401690  { , } 	\ 40D36E E8 1D 43 FF FF 
;/   CELL+ \ link
/*	lea	0x10(%rax),%rax	\ 40D373 	*/.byte 0x48,0x8D,0x40,0x10
;/   CELL+ LAST @ SWAP ! \ 
/*	mov	0x401108  { SLEEP+3B  } (%rip),%rdx	\ 40D377 	*/.byte 0x48,0x8B,0x15,0x8A,0x3D,0xFF,0xFF
/*	mov	%rdx,(%rax)	\ 40D37E 	*/.byte 0x48,0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 40D381 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D385 	*/.byte 0x48,0x8D,0x6D,0x8
;/  DOES> @ CONTEXT ! ;
	call	0x40CE21  { (DOES>) } 	\ 40D389 E8 93 FA FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40D38E 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40D392 58 
/*	mov	(%rax),%rax	\ 40D393 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,0x401586  { SLEEP+4B9  } (%rip)	\ 40D396 	*/.byte 0x48,0x89,0x5,0xE9,0x41,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 40D39D 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40D3A1 C3 
;/
;/: VARY ( "<spaces>name" -- )
;/  CREATE 77 ,


VARY:
	call	0x40CD35  { CREATE } 	\ 40D3A2 E8 8E F9 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40D3A7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x4D,%eax	\ 40D3AB 	*/.byte 0xB8,0x4D,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40D3B0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401690  { , } 	\ 40D3B4 E8 D7 42 FF FF 
;/  DOES> @  ;
	call	0x40CE21  { (DOES>) } 	\ 40D3B9 E8 63 FA FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40D3BE 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40D3C2 58 
/*	mov	(%rax),%rax	\ 40D3C3 	*/.byte 0x48,0x8B,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40D3C6 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40D3CA C3 
;/
;/
;/T: ALSO ( --- )
;/\ Duplicate the last wordlist in the search order.
;/ CONTEXT CONTEXT  CELL+ CONTEXT_SIZE CELL-  CMOVE> ;


ALSO:
/*	mov	%rax,-0x08(%rbp)	\ 40D3CB 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401586  { SLEEP+4B9  } (%rip),%rax	\ 40D3CF 	*/.byte 0x48,0x8D,0x5,0xB0,0x41,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40D3D6 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x40158E  { SLEEP+4C1  } (%rip),%rax	\ 40D3DA 	*/.byte 0x48,0x8D,0x5,0xAD,0x41,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40D3E1 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	$0x78,%eax	\ 40D3E5 	*/.byte 0xB8,0x78,0x0,0x0,0x0
/*	lea	-0x18(%rbp),%rbp	\ 40D3EA 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x400993  { CMOVE> } 	\ 40D3EE E8 A0 35 FF FF 
	ret		\ 40D3F3 C3 
;/
;/T: FORTH FORTH-WORDLIST CONTEXT ! ;


FORTH:
/*	mov	%rax,-0x08(%rbp)	\ 40D3F4 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401560  { SLEEP+493  } (%rip),%rax	\ 40D3F8 	*/.byte 0x48,0x8D,0x5,0x61,0x41,0xFF,0xFF
/*	mov	%rax,0x401586  { SLEEP+4B9  } (%rip)	\ 40D3FF 	*/.byte 0x48,0x89,0x5,0x80,0x41,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 40D406 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40D40A C3 
;/
;/T: ONLY ( --- )
;/ FORTH CONTEXT CELL+ 0! ;


ONLY:
/*	mov	%rax,-0x08(%rbp)	\ 40D40B 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401560  { SLEEP+493  } (%rip),%rax	\ 40D40F 	*/.byte 0x48,0x8D,0x5,0x4A,0x41,0xFF,0xFF
/*	mov	%rax,0x401586  { SLEEP+4B9  } (%rip)	\ 40D416 	*/.byte 0x48,0x89,0x5,0x69,0x41,0xFF,0xFF
/*	movq	$0x0,0x40158E  { SLEEP+4C1  } (%rip)	\ 40D41D 	*/.byte 0x48,0xC7,0x5,0x66,0x41,0xFF,0xFF,0x0,0x0,0x0,0x0
/*	mov	-0x08(%rbp),%rax	\ 40D428 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40D42C C3 
;/
;/T: PREVIOUS ( --- )
;/\ Remove the last wordlist from search order.
;/ CONTEXT CELL+ CONTEXT CONTEXT_SIZE CMOVE  ;


PREVIOUS:
/*	mov	%rax,-0x08(%rbp)	\ 40D42D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x40158E  { SLEEP+4C1  } (%rip),%rax	\ 40D431 	*/.byte 0x48,0x8D,0x5,0x56,0x41,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40D438 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x401586  { SLEEP+4B9  } (%rip),%rax	\ 40D43C 	*/.byte 0x48,0x8D,0x5,0x43,0x41,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40D443 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	$0x80,%eax	\ 40D447 	*/.byte 0xB8,0x80,0x0,0x0,0x0
/*	lea	-0x18(%rbp),%rbp	\ 40D44C 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x4009EE  { CMOVE } 	\ 40D450 E8 99 35 FF FF 
	ret		\ 40D455 C3 
;/
;/: SET-ORDER
;/  DUP -1 = IF DROP ONLY BREAK


SETsubORDER:
/*	mov	%rax,-0x08(%rbp)	\ 40D456 	*/.byte 0x48,0x89,0x45,0xF8
/*	xorq	$-0x01,%rax	\ 40D45A 	*/.byte 0x48,0x83,0xF0,0xFF
/*	subq	$0x01,%rax	\ 40D45E 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40D462 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40D465 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40D468 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40D480  { SET-ORDER+2A  } 	\ 40D46C 	*/.byte 0xF,0x84,0xE,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40D472 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D476 	*/.byte 0x48,0x8D,0x6D,0x8
	call	0x40D40B  { ONLY } 	\ 40D47A E8 8C FF FF FF 
	ret		\ 40D47F C3 
;/  DUP 0= IF CONTEXT ! BREAK
/*	mov	%rax,-0x08(%rbp)	\ 40D480 	*/.byte 0x48,0x89,0x45,0xF8
/*	subq	$0x01,%rax	\ 40D484 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40D488 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40D48B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40D48E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40D4A8  { SET-ORDER+52  } 	\ 40D492 	*/.byte 0xF,0x84,0x10,0x0,0x0,0x0
/*	mov	%rax,0x401586  { SLEEP+4B9  } (%rip)	\ 40D498 	*/.byte 0x48,0x89,0x5,0xE7,0x40,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40D49F 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D4A3 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40D4A7 C3 
;/  0
/*	mov	%rax,-0x08(%rbp)	\ 40D4A8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40D4AC 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40D4B1 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  DO CONTEXT I CELLS +
	call	0x400A5F  { (DO) } 	\ 40D4B5 E8 A5 35 FF FF 
	.quad 0x40D50B  { SET-ORDER+B5  } 
/*	mov	%rax,-0x08(%rbp)	\ 40D4C2 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401586  { SLEEP+4B9  } (%rip),%rax	\ 40D4C6 	*/.byte 0x48,0x8D,0x5,0xB9,0x40,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40D4CD 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%r14,%rax	\ 40D4D1 	*/.byte 0x4C,0x89,0xF0
/*	shl	$0x03,%rax	\ 40D4D4 	*/.byte 0x48,0xC1,0xE0,0x3
/*	add	-0x10(%rbp),%rax	\ 40D4D8 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40D4DC 	*/.byte 0x48,0x89,0x45,0xF0
;/     DUP CELL+ 0!  !
/*	lea	0x08(%rax),%rax	\ 40D4E0 	*/.byte 0x48,0x8D,0x40,0x8
/*	movq	$0x0,(%rax)	\ 40D4E4 	*/.byte 0x48,0xC7,0x0,0x0,0x0,0x0,0x0
/*	mov	-0x10(%rbp),%rax	\ 40D4EB 	*/.byte 0x48,0x8B,0x45,0xF0
/*	mov	-0x08(%rbp),%rdx	\ 40D4EF 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rdx,(%rax)	\ 40D4F3 	*/.byte 0x48,0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 40D4F6 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D4FA 	*/.byte 0x48,0x8D,0x6D,0x8
;/  LOOP
/*	inc	%r14	\ 40D4FE 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 40D501 	*/.byte 0x49,0xFF,0xC7
	jNo	0x40D4C2  { SET-ORDER+6C  } 	\ 40D504 71 BC 
	pop	%r14	\ 40D506 41 5E 
	pop	%r15	\ 40D508 41 5F 
	pop	%rcx	\ 40D50A 59 
;/;
	ret		\ 40D50B C3 
;/
;/T: ORDER ( -- ) \ 94 SEARCH EXT
;/  GET-ORDER ." Context: "


ORDER:
	call	0x40D014  { GET-ORDER } 	\ 40D50C E8 3 FB FF FF 
	call	0x4018C1  { (S") } 	\ 40D511 E8 AB 43 FF FF 
	.byte 0x9,0x43
	.byte 0x6F,0x6E,0x74,0x65,0x78,0x74,0x3A,0x20
	call	0x40177E  { TYPE } 	\ 40D520 E8 59 42 FF FF 
;/  0 ?DO ( DUP .) VOC-NAME. SPACE LOOP CR
/*	mov	%rax,-0x08(%rbp)	\ 40D525 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40D529 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40D52E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400A59  { (?DO) } 	\ 40D532 E8 22 35 FF FF 
	.quad 0x40D556  { ORDER+4A  } 
	call	0x40D261  { VOC-NAME. } 	\ 40D53F E8 1D FD FF FF 
	call	0x401969  { SPACE } 	\ 40D544 E8 20 44 FF FF 
/*	inc	%r14	\ 40D549 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 40D54C 	*/.byte 0x49,0xFF,0xC7
	jNo	0x40D53F  { ORDER+33  } 	\ 40D54F 71 EE 
	pop	%r14	\ 40D551 41 5E 
	pop	%r15	\ 40D553 41 5F 
	pop	%rcx	\ 40D555 59 
	call	0x4017B0  { CR } 	\ 40D556 E8 55 42 FF FF 
;/  ." Current: " GET-CURRENT VOC-NAME. CR
	call	0x4018C1  { (S") } 	\ 40D55B E8 61 43 FF FF 
	.byte 0x9,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
	.byte 0x3A,0x20,0xE8,0xF,0x42,0xFF,0xFF,0x48
/*	mov	%eax,-0x08(%rbp)	\ 40D570 	*/.byte 0x89,0x45,0xF8
/*	mov	0x40160E  { SLEEP+541  } (%rip),%rax	\ 40D573 	*/.byte 0x48,0x8B,0x5,0x94,0x40,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D57A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40D261  { VOC-NAME. } 	\ 40D57E E8 DE FC FF FF 
	call	0x4017B0  { CR } 	\ 40D583 E8 28 42 FF FF 
;/;
	ret		\ 40D588 C3 
;/
;/T: HEX HEX ;


HEX:
/*	movq	$0x10,0x401558  { SLEEP+48B  } (%rip)	\ 40D589 	*/.byte 0x48,0xC7,0x5,0xC4,0x3F,0xFF,0xFF,0x10,0x0,0x0,0x0
	ret		\ 40D594 C3 
;/
;/: ALIAS  ( cfa -- ) 
;/ PARSE-NAME SHEADER


ALIAS:
	call	0x40AADD  { PARSE-NAME } 	\ 40D595 E8 43 D5 FF FF 
	call	0x40CC60  { SHEADER } 	\ 40D59A E8 C1 F6 FF FF 
;/ LAST @  NAME>C !
/*	mov	%rax,-0x08(%rbp)	\ 40D59F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401108  { SLEEP+3B  } (%rip),%rax	\ 40D5A3 	*/.byte 0x48,0x8B,0x5,0x5E,0x3B,0xFF,0xFF
/*	lea	-0x18(%rax),%rax	\ 40D5AA 	*/.byte 0x48,0x8D,0x40,0xE8
/*	mov	-0x08(%rbp),%rdx	\ 40D5AE 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rdx,(%rax)	\ 40D5B2 	*/.byte 0x48,0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 40D5B5 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D5B9 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40D5BD C3 
;/
;/T: : PARSE-NAME  SBUILD  ] ;


dcoma:
	call	0x40AADD  { PARSE-NAME } 	\ 40D5BE E8 1A D5 FF FF 
	call	0x40CAD0  { SBUILD } 	\ 40D5C3 E8 8 F5 FF FF 
	call	0x40B805  { ] } 	\ 40D5C8 E8 38 E2 FF FF 
	ret		\ 40D5CD C3 
;/
;/T: ; ?COMP  EXIT,


end:
	call	0x40C220  { ?COMP } 	\ 40D5CE E8 4D EC FF FF 
	call	0x40C2DD  { EXIT, } 	\ 40D5D3 E8 5 ED FF FF 
;/ SMUDGE
	call	0x40CC46  { SMUDGE } 	\ 40D5D8 E8 69 F6 FF FF 
;/ [COMPILE] [ ; IMMEDIATE
	call	0x40B811  { [ } 	\ 40D5DD E8 2F E2 FF FF 
	ret		\ 40D5E2 C3 
;/
;/1 [IF]
;/T: FIELD  ( offset size "new-name< >" -- offset+size )
;/      : OVER


FIELD:
	call	0x40D5BE  { : } 	\ 40D5E3 E8 D6 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40D5E8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40D5EC 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40D5F0 	*/.byte 0x48,0x89,0x45,0xF0
;/        DUP IF   DUP  LIT,  ['] + COMPILE,
	test	%rax,%rax	\ 40D5F4 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40D5F7 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 40D5FB 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x40D626  { FIELD+43  } 	\ 40D5FF 	*/.byte 0xF,0x84,0x21,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40D605 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 40D609 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x409F37  { LIT, } 	\ 40D60D E8 25 C9 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40D612 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x4006E4  { + } (%rip),%rax	\ 40D616 	*/.byte 0x48,0x8D,0x5,0xC7,0x30,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40D61D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40A089  { COMPILE, } 	\ 40D621 E8 63 CA FF FF 
;/            THEN DROP
/*	mov	0x00(%rbp),%rax	\ 40D626 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D62A 	*/.byte 0x48,0x8D,0x6D,0x8
;/       [COMPILE] ;
	call	0x40D5CE  { ; } 	\ 40D62E E8 9B FF FF FF 
;/       + ;  
/*	add	0x00(%rbp),%rax	\ 40D633 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40D637 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40D63B C3 
;/[ELSE]
;/T: FIELD
;/  CREATE OVER , + 
;/  DOES> @ +
;/;
;/[THEN]
;/
;/1 CONSTANT &IMMEDIATE
;/
;/T: IMMEDIATE
;/  &IMMEDIATE LAST @ NAME>F LOR!


IMMEDIATE:
/*	mov	%rax,-0x08(%rbp)	\ 40D63C 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x1,-0x10(%rbp)	\ 40D640 	*/.byte 0x48,0xC7,0x45,0xF0,0x1,0x0,0x0,0x0
/*	mov	0x401108  { SLEEP+3B  } (%rip),%rax	\ 40D648 	*/.byte 0x48,0x8B,0x5,0xB9,0x3A,0xFF,0xFF
/*	lea	-0x10(%rax),%rax	\ 40D64F 	*/.byte 0x48,0x8D,0x40,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 40D653 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400507  { LOR! } 	\ 40D657 E8 AB 2E FF FF 
;/;
	ret		\ 40D65C C3 
;/
;/VARIABLE EMITVAR

	DQ 0x0
	DB 0x0,0x0,0x0
