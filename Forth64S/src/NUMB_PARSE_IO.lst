;/
;/
;/: HOLD ( char -- ) \ 94
;/  HLD @ 1- DUP HLD ! C!

HOLD:
/*	mov	%rax,-0x08(%rbp)	\ 4091AC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401350  { SLEEP+283  } (%rip),%rax	\ 4091B0 	*/.byte 0x48,0x8B,0x5,0x99,0x81,0xFF,0xFF
/*	lea	-0x01(%rax),%rax	\ 4091B7 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,0x401350  { SLEEP+283  } (%rip)	\ 4091BB 	*/.byte 0x48,0x89,0x5,0x8E,0x81,0xFF,0xFF
/*	mov	-0x08(%rbp),%dl	\ 4091C2 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 4091C5 	*/.byte 0x88,0x10
/*	mov	0x00(%rbp),%rax	\ 4091C7 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4091CB 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 4091CF C3 
;/
;/: <# ( -- ) \ 94
;/  PAD 1- HLD !


lesshash:
/*	mov	%rax,-0x08(%rbp)	\ 4091D0 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x401457  { SLEEP+38A  } (%rip),%rax	\ 4091D4 	*/.byte 0x48,0x8D,0x5,0x7C,0x82,0xFF,0xFF
/*	mov	%rax,0x401350  { SLEEP+283  } (%rip)	\ 4091DB 	*/.byte 0x48,0x89,0x5,0x6E,0x81,0xFF,0xFF
/*	movb	$0x00,0x401457  { SLEEP+38A  } (%rip)	\ 4091E2 	*/.byte 0xC6,0x5,0x6E,0x82,0xFF,0xFF,0x0
;/  0 PAD 1- C!
/*	mov	-0x08(%rbp),%rax	\ 4091E9 	*/.byte 0x48,0x8B,0x45,0xF8
;/;
	ret		\ 4091ED C3 
;/
;/: # ( ud1 -- ud2 ) \ 94
;/  0 BASE @ UM/MOD >R BASE @ UM/MOD R>


hash:
/*	mov	%rax,-0x08(%rbp)	\ 4091EE 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x0,-0x10(%rbp)	\ 4091F2 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x0,0x0,0x0
/*	mov	0x401558  { SLEEP+48B  } (%rip),%rax	\ 4091FA 	*/.byte 0x48,0x8B,0x5,0x57,0x83,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 409201 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4007D5  { UM/MOD } 	\ 409205 E8 CB 75 FF FF 
	Push	%rax	\ 40920A 50 
/*	mov	0x401558  { SLEEP+48B  } (%rip),%rax	\ 40920B 	*/.byte 0x48,0x8B,0x5,0x46,0x83,0xFF,0xFF
	call	0x4007D5  { UM/MOD } 	\ 409212 E8 BE 75 FF FF 
/*	mov	%rax,%rdx	\ 409217 	*/.byte 0x48,0x89,0xC2
	pop	-0x08(%rbp)	\ 40921A 8F 45 F8 
/*	mov	0x00(%rbp),%rax	\ 40921D 	*/.byte 0x48,0x8B,0x45,0x0
;/  ROT DUP 10 < 0= IF 7 + THEN
/*	mov	%rdx,0x00(%rbp)	\ 409221 	*/.byte 0x48,0x89,0x55,0x0
/*	mov	%rax,-0x10(%rbp)	\ 409225 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 409229 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	$0xA,%eax	\ 40922D 	*/.byte 0xB8,0xA,0x0,0x0,0x0
/*	cmp	-0x18(%rbp),%rax	\ 409232 	*/.byte 0x48,0x3B,0x45,0xE8
	setNle	%al	\ 409236 F 9F C0 
/*		neg	%al	\ 409239 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 40923B 	*/.byte 0x48,0xF,0xBE,0xC0
/*	subq	$0x01,%rax	\ 40923F 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409243 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 409246 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 409249 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 40924D 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x40925F  { #+71  } 	\ 409251 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 409257 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x07(%rax),%rax	\ 40925B 	*/.byte 0x48,0x8D,0x40,0x7
;/ 48 + 
/*	lea	0x30(%rax),%rax	\ 40925F 	*/.byte 0x48,0x8D,0x40,0x30
/*	mov	%rax,-0x08(%rbp)	\ 409263 	*/.byte 0x48,0x89,0x45,0xF8
;/  HOLD
/*	mov	0x401350  { SLEEP+283  } (%rip),%rax	\ 409267 	*/.byte 0x48,0x8B,0x5,0xE2,0x80,0xFF,0xFF
/*	lea	-0x01(%rax),%rax	\ 40926E 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,0x401350  { SLEEP+283  } (%rip)	\ 409272 	*/.byte 0x48,0x89,0x5,0xD7,0x80,0xFF,0xFF
/*	mov	-0x08(%rbp),%dl	\ 409279 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 40927C 	*/.byte 0x88,0x10
/*	mov	0x00(%rbp),%rax	\ 40927E 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409282 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 409286 C3 
;/
;/: #S ( ud1 -- ud2 ) \ 94
;/  BEGIN
;/    # 2DUP D0=


hashS:
	call	0x4091EE  { # } 	\ 409287 E8 62 FF FF FF 
/*	mov	0x00(%rbp),%rdx	\ 40928C 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 409290 	*/.byte 0x48,0x89,0x45,0xF8
/*	or	%rdx,%rax	\ 409294 	*/.byte 0x48,0x9,0xD0
/*	subq	$0x01,%rax	\ 409297 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40929B 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40929E 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4092A1 	*/.byte 0x48,0x8B,0x45,0xF8
;/  UNTIL
/*	jz	0x409287  { #S } 	\ 4092A5 	*/.byte 0xF,0x84,0xDC,0xFF,0xFF,0xFF
;/;
	ret		\ 4092AB C3 
;/
;/: #> ( xd -- c-addr u ) \ 94
;/  2DROP HLD @ PAD OVER - 1-


hashgreat:
/*	mov	0x401350  { SLEEP+283  } (%rip),%rax	\ 4092AC 	*/.byte 0x48,0x8B,0x5,0x9D,0x80,0xFF,0xFF
/*	mov	%rax,0x00(%rbp)	\ 4092B3 	*/.byte 0x48,0x89,0x45,0x0
/*	lea	0x401458  { SLEEP+38B  } (%rip),%rax	\ 4092B7 	*/.byte 0x48,0x8D,0x5,0x9A,0x81,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 4092BE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 4092C2 	*/.byte 0x48,0x8B,0x45,0x0
/*		negq	%rax	\ 4092C6 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 4092C9 	*/.byte 0x48,0x3,0x45,0xF8
/*	lea	-0x01(%rax),%rax	\ 4092CD 	*/.byte 0x48,0x8D,0x40,0xFF
;/;
	ret		\ 4092D1 C3 
;/
;/: SIGN ( n -- ) \ 94
;/  0< IF [CHAR] - HOLD THEN


SIGN:
/*	sar	$0x3F,%rax	\ 4092D2 	*/.byte 0x48,0xC1,0xF8,0x3F
/*	mov	0x00(%rbp),%rax	\ 4092D6 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4092DA 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40930B  { SIGN+39  } 	\ 4092DE 	*/.byte 0xF,0x84,0x27,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4092E4 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x2D,-0x10(%rbp)	\ 4092E8 	*/.byte 0x48,0xC7,0x45,0xF0,0x2D,0x0,0x0,0x0
/*	mov	0x401350  { SLEEP+283  } (%rip),%rax	\ 4092F0 	*/.byte 0x48,0x8B,0x5,0x59,0x80,0xFF,0xFF
/*	lea	-0x01(%rax),%rax	\ 4092F7 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,0x401350  { SLEEP+283  } (%rip)	\ 4092FB 	*/.byte 0x48,0x89,0x5,0x4E,0x80,0xFF,0xFF
/*	mov	-0x10(%rbp),%dl	\ 409302 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 409305 	*/.byte 0x88,0x10
/*	mov	-0x08(%rbp),%rax	\ 409307 	*/.byte 0x48,0x8B,0x45,0xF8
;/;
	ret		\ 40930B C3 
;/
;/: (D.) ( d -- addr len )
;/  DUP >R DABS <# #S R> SIGN #>


cbigDdotcend:
/*	mov	%rax,-0x08(%rbp)	\ 40930C 	*/.byte 0x48,0x89,0x45,0xF8
	Push	%rax	\ 409310 50 
/*	mov	-0x08(%rbp),%rax	\ 409311 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x401A06  { DABS } 	\ 409315 E8 EC 86 FF FF 
	call	0x4091D0  { <# } 	\ 40931A E8 B1 FE FF FF 
	call	0x409287  { #S } 	\ 40931F E8 63 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 409324 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 409328 58 
/*	lea	-0x08(%rbp),%rbp	\ 409329 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4092D2  { SIGN } 	\ 40932D E8 A0 FF FF FF 
/*	mov	0x401350  { SLEEP+283  } (%rip),%rax	\ 409332 	*/.byte 0x48,0x8B,0x5,0x17,0x80,0xFF,0xFF
/*	mov	%rax,0x00(%rbp)	\ 409339 	*/.byte 0x48,0x89,0x45,0x0
/*	lea	0x401458  { SLEEP+38B  } (%rip),%rax	\ 40933D 	*/.byte 0x48,0x8D,0x5,0x14,0x81,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 409344 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 409348 	*/.byte 0x48,0x8B,0x45,0x0
/*		negq	%rax	\ 40934C 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 40934F 	*/.byte 0x48,0x3,0x45,0xF8
/*	lea	-0x01(%rax),%rax	\ 409353 	*/.byte 0x48,0x8D,0x40,0xFF
;/;
	ret		\ 409357 C3 
;/
;/: HOLDS ( addr u -- ) \ from eserv src
;/  TUCK + SWAP 0 ?DO


HOLDS:
/*	mov	0x00(%rbp),%rdx	\ 409358 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40935C 	*/.byte 0x48,0x89,0x45,0x0
/*	add	%rdx,%rax	\ 409360 	*/.byte 0x48,0x1,0xD0
/*	mov	0x00(%rbp),%rdx	\ 409363 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 409367 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40936B 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	$0x0,%eax	\ 40936F 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409374 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400A59  { (?DO) } 	\ 409378 E8 DC 76 FF FF 
	.quad 0x4093C7  { HOLDS+6F  } 
;/ DUP I
/*	mov	%rax,-0x08(%rbp)	\ 409385 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 409389 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%r14,%rax	\ 40938D 	*/.byte 0x4C,0x89,0xF0
/*		negq	%rax	\ 409390 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 409393 	*/.byte 0x48,0x3,0x45,0xF0
;/ - 1- C@ HOLD ( /CHAR +LOOP FIXME) LOOP DROP
/*	movzb	-0x01(%rax),%eax	\ 409397 	*/.byte 0xF,0xB6,0x40,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40939B 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x401350  { SLEEP+283  } (%rip),%rax	\ 40939F 	*/.byte 0x48,0x8B,0x5,0xAA,0x7F,0xFF,0xFF
/*	lea	-0x01(%rax),%rax	\ 4093A6 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,0x401350  { SLEEP+283  } (%rip)	\ 4093AA 	*/.byte 0x48,0x89,0x5,0x9F,0x7F,0xFF,0xFF
/*	mov	-0x10(%rbp),%dl	\ 4093B1 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 4093B4 	*/.byte 0x88,0x10
/*	mov	-0x08(%rbp),%rax	\ 4093B6 	*/.byte 0x48,0x8B,0x45,0xF8
/*	inc	%r14	\ 4093BA 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 4093BD 	*/.byte 0x49,0xFF,0xC7
	jNo	0x409385  { HOLDS+2D  } 	\ 4093C0 71 C3 
	pop	%r14	\ 4093C2 41 5E 
	pop	%r15	\ 4093C4 41 5F 
	pop	%rcx	\ 4093C6 59 
/*	mov	0x00(%rbp),%rax	\ 4093C7 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4093CB 	*/.byte 0x48,0x8D,0x6D,0x8
;/
;/;
	ret		\ 4093CF C3 
;/
;/: SPACES       ( N  -- )
;/    0MAX 80 MIN ?DUP


SPACES:
/*	mov	%rax,-0x08(%rbp)	\ 4093D0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 4093D4 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 4093D9 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovl/*	cmov	-0x08(%rbp),%rax	\ 4093DD 	*/.byte 0x48,0xF,0x4C,0x45,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 4093E2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x50,%eax	\ 4093E6 	*/.byte 0xB8,0x50,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 4093EB 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovNle/*	cmov	-0x08(%rbp),%rax	\ 4093EF 	*/.byte 0x48,0xF,0x4F,0x45,0xF8
	call	0x4007EC  { ?DUP } 	\ 4093F4 E8 F3 73 FF FF 
;/    IF      0 ?DO SPACE LOOP 
	test	%rax,%rax	\ 4093F9 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 4093FC 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409400 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409436  { SPACES+66  } 	\ 409404 	*/.byte 0xF,0x84,0x2C,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40940A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40940E 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409413 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400A59  { (?DO) } 	\ 409417 E8 3D 76 FF FF 
	.quad 0x409436  { SPACES+66  } 
	call	0x401969  { SPACE } 	\ 409424 E8 40 85 FF FF 
/*	inc	%r14	\ 409429 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 40942C 	*/.byte 0x49,0xFF,0xC7
	jNo	0x409424  { SPACES+54  } 	\ 40942F 71 F3 
	pop	%r14	\ 409431 41 5E 
	pop	%r15	\ 409433 41 5F 
	pop	%rcx	\ 409435 59 
;/    THEN
;/;
	ret		\ 409436 C3 
;/
;/: D. ( d -- ) \ 94 DOUBLE
;/  (D.) TYPE SPACE ;


Ddot:
	call	0x40930C  { (D.) } 	\ 409437 E8 D0 FE FF FF 
	call	0x40177E  { TYPE } 	\ 40943C E8 3D 83 FF FF 
	call	0x401969  { SPACE } 	\ 409441 E8 23 85 FF FF 
	ret		\ 409446 C3 
;/
;/: S>U  0 ;


SgreatU:
/*	mov	%rax,-0x08(%rbp)	\ 409447 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40944B 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409450 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 409454 C3 
;/
;/: . ( n -- )  S>D D. ;


dot:
/*	mov	%rax,-0x08(%rbp)	\ 409455 	*/.byte 0x48,0x89,0x45,0xF8
/*	sar	$0x3F,%rax	\ 409459 	*/.byte 0x48,0xC1,0xF8,0x3F
/*	lea	-0x08(%rbp),%rbp	\ 40945D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x409437  { D. } 	\ 409461 E8 D1 FF FF FF 
	ret		\ 409466 C3 
;/
;/: U. ( u -- )   0 D. ;


Udot:
/*	mov	%rax,-0x08(%rbp)	\ 409467 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40946B 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409470 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x409437  { D. } 	\ 409474 E8 BE FF FF FF 
	ret		\ 409479 C3 
;/
;/\ : U.R ( u n -- ) \ 94 CORE EXT
;/\  >R  0 <# #S #>  R> OVER - 0MAX SPACES TYPE ;
;/
;/: U.R  ( u n -- ) \ 94 CORE EXT
;/  >R 0 (D.) R> OVER - SPACES TYPE  ;


UdotR:
	Push	%rax	\ 40947A 50 
/*	mov	$0x0,%eax	\ 40947B 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	call	0x40930C  { (D.) } 	\ 409480 E8 87 FE FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 409485 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 409489 8F 45 F0 
/*	mov	-0x08(%rbp),%rax	\ 40948C 	*/.byte 0x48,0x8B,0x45,0xF8
/*		negq	%rax	\ 409490 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 409493 	*/.byte 0x48,0x3,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 409497 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4093D0  { SPACES } 	\ 40949B E8 30 FF FF FF 
	call	0x40177E  { TYPE } 	\ 4094A0 E8 D9 82 FF FF 
	ret		\ 4094A5 C3 
;/
;/T: .R  ( n1 n -- ) \ 94 CORE EXT
;/  >R S>D (D.) R> OVER - SPACES TYPE  ;


dotR:
	Push	%rax	\ 4094A6 50 
/*	mov	0x00(%rbp),%rax	\ 4094A7 	*/.byte 0x48,0x8B,0x45,0x0
/*	sar	$0x3F,%rax	\ 4094AB 	*/.byte 0x48,0xC1,0xF8,0x3F
	call	0x40930C  { (D.) } 	\ 4094AF E8 58 FE FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 4094B4 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 4094B8 8F 45 F0 
/*	mov	-0x08(%rbp),%rax	\ 4094BB 	*/.byte 0x48,0x8B,0x45,0xF8
/*		negq	%rax	\ 4094BF 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 4094C2 	*/.byte 0x48,0x3,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 4094C6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4093D0  { SPACES } 	\ 4094CA E8 1 FF FF FF 
	call	0x40177E  { TYPE } 	\ 4094CF E8 AA 82 FF FF 
	ret		\ 4094D4 C3 
;/
;/: H.R ( n1 n2 -- )
;/ BASE @  >R HEX U.R


HdotR:
/*	mov	%rax,-0x08(%rbp)	\ 4094D5 	*/.byte 0x48,0x89,0x45,0xF8
/*	push	0x401558  { SLEEP+48B  } (%rip)	\ 4094D9 	*/.byte 0xFF,0x35,0x79,0x80,0xFF,0xFF
/*	movq	$0x10,0x401558  { SLEEP+48B  } (%rip)	\ 4094DF 	*/.byte 0x48,0xC7,0x5,0x6E,0x80,0xFF,0xFF,0x10,0x0,0x0,0x0
/*	mov	-0x08(%rbp),%rax	\ 4094EA 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x40947A  { U.R } 	\ 4094EE E8 87 FF FF FF 
;/ R> BASE ! ;
/*	mov	%rax,-0x08(%rbp)	\ 4094F3 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 4094F7 8F 45 F0 
/*	lea	0x401558  { SLEEP+48B  } (%rip),%rax	\ 4094FA 	*/.byte 0x48,0x8D,0x5,0x57,0x80,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 409501 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 409505 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 409508 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 40950C C3 
;/
;/: H.N           ( n1 n2 -- )    \ display n1 as a HEX number of n2 digits
;/                BASE @ >R HEX >R


HdotN:
/*	mov	%rax,-0x08(%rbp)	\ 40950D 	*/.byte 0x48,0x89,0x45,0xF8
/*	push	0x401558  { SLEEP+48B  } (%rip)	\ 409511 	*/.byte 0xFF,0x35,0x41,0x80,0xFF,0xFF
/*	movq	$0x10,0x401558  { SLEEP+48B  } (%rip)	\ 409517 	*/.byte 0x48,0xC7,0x5,0x36,0x80,0xFF,0xFF,0x10,0x0,0x0,0x0
/*	mov	-0x08(%rbp),%rax	\ 409522 	*/.byte 0x48,0x8B,0x45,0xF8
	Push	%rax	\ 409526 50 
/*	mov	$0x0,%eax	\ 409527 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	call	0x4091D0  { <# } 	\ 40952C E8 9F FC FF FF 
;/                0 <# R> 0 ?DO # LOOP #> TYPE
/*	mov	%rax,-0x08(%rbp)	\ 409531 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 409535 8F 45 F0 
/*	mov	$0x0,%eax	\ 409538 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40953D 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400A59  { (?DO) } 	\ 409541 E8 13 75 FF FF 
	.quad 0x409560  { H.N+53  } 
	call	0x4091EE  { # } 	\ 40954E E8 9B FC FF FF 
/*	inc	%r14	\ 409553 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 409556 	*/.byte 0x49,0xFF,0xC7
	jNo	0x40954E  { H.N+41  } 	\ 409559 71 F3 
	pop	%r14	\ 40955B 41 5E 
	pop	%r15	\ 40955D 41 5F 
	pop	%rcx	\ 40955F 59 
/*	mov	0x401350  { SLEEP+283  } (%rip),%rax	\ 409560 	*/.byte 0x48,0x8B,0x5,0xE9,0x7D,0xFF,0xFF
/*	mov	%rax,0x00(%rbp)	\ 409567 	*/.byte 0x48,0x89,0x45,0x0
/*	lea	0x401458  { SLEEP+38B  } (%rip),%rax	\ 40956B 	*/.byte 0x48,0x8D,0x5,0xE6,0x7E,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 409572 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 409576 	*/.byte 0x48,0x8B,0x45,0x0
/*		negq	%rax	\ 40957A 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 40957D 	*/.byte 0x48,0x3,0x45,0xF8
/*	lea	-0x01(%rax),%rax	\ 409581 	*/.byte 0x48,0x8D,0x40,0xFF
	call	0x40177E  { TYPE } 	\ 409585 E8 F4 81 FF FF 
;/                R> BASE ! ;
/*	mov	%rax,-0x08(%rbp)	\ 40958A 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 40958E 8F 45 F0 
/*	lea	0x401558  { SLEEP+48B  } (%rip),%rax	\ 409591 	*/.byte 0x48,0x8D,0x5,0xC0,0x7F,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 409598 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 40959C 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 40959F 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 4095A3 C3 
;/
;/
;/: H.H C@ 2 H.N SPACE ;


HdotH:
/*	movzb	(%rax),%eax	\ 4095A4 	*/.byte 0xF,0xB6,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4095A7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x2,%eax	\ 4095AB 	*/.byte 0xB8,0x2,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4095B0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40950D  { H.N } 	\ 4095B4 E8 54 FF FF FF 
	call	0x401969  { SPACE } 	\ 4095B9 E8 AB 83 FF FF 
	ret		\ 4095BE C3 
;/\ : TAB 9 EMIT ;
;/
;/: .SN ( n --)
;/  DUP 0< IF ." Stack exhaustion" SP0 @ SP! THEN


dotSN:
	test	%rax,%rax	\ 4095BF 48 85 C0 
/*	jNl	0x4095F7  { .SN+38  } 	\ 4095C2 	*/.byte 0xF,0x8D,0x2F,0x0,0x0,0x0
	call	0x4018C1  { (S") } 	\ 4095C8 E8 F4 82 FF FF 
	.byte 0x10,0x53,0x74
	.byte 0x61,0x63,0x6B,0x20,0x65,0x78,0x68,0x61
	.byte 0x75,0x73,0x74,0x69,0x6F,0x6E,0xE8,0x9B
/*	cmp	$0x458948FF,%edi	\ 4095E0 	*/.byte 0x81,0xFF,0xFF,0x48,0x89,0x45
clC	\ 4095E6 F8 
/*	mov	0x401628  { ORIGVIEWLINK+12  } (%rip),%rax	\ 4095E7 	*/.byte 0x48,0x8B,0x5,0x3A,0x80,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4095EE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400471  { SP! } 	\ 4095F2 E8 7A 6E FF FF 
;/   >R BEGIN
	Push	%rax	\ 4095F7 50 
/*	mov	0x00(%rbp),%rax	\ 4095F8 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4095FC 	*/.byte 0x48,0x8D,0x6D,0x8
;/         R@
/*	mov	%rax,-0x08(%rbp)	\ 409600 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rsp),%rax	\ 409604 	*/.byte 0x48,0x8B,0x4,0x24
	test	%rax,%rax	\ 409608 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40960B 	*/.byte 0x48,0x8B,0x45,0xF8
;/      WHILE
/*	jz	0x409649  { .SN+8A  } 	\ 40960F 	*/.byte 0xF,0x84,0x34,0x0,0x0,0x0
;/        SP@ R@ 1- CELLS + @ .
	call	0x400465  { SP@ } 	\ 409615 E8 4B 6E FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40961A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rsp),%rax	\ 40961E 	*/.byte 0x48,0x8B,0x4,0x24
/*	lea	-0x01(%rax),%rax	\ 409622 	*/.byte 0x48,0x8D,0x40,0xFF
/*	shl	$0x03,%rax	\ 409626 	*/.byte 0x48,0xC1,0xE0,0x3
/*	add	-0x08(%rbp),%rax	\ 40962A 	*/.byte 0x48,0x3,0x45,0xF8
/*	mov	(%rax),%rax	\ 40962E 	*/.byte 0x48,0x8B,0x0
	call	0x409455  { . } 	\ 409631 E8 1F FE FF FF 
;/        R> 1- >R
/*	mov	%rax,-0x08(%rbp)	\ 409636 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40963A 58 
/*	lea	-0x01(%rax),%rax	\ 40963B 	*/.byte 0x48,0x8D,0x40,0xFF
	Push	%rax	\ 40963F 50 
/*	mov	-0x08(%rbp),%rax	\ 409640 	*/.byte 0x48,0x8B,0x45,0xF8
;/      REPEAT RDROP
/*	jmp	0x409600  { .SN+41  } 	\ 409644 	*/.byte 0xE9,0xB7,0xFF,0xFF,0xFF
/*	lea	0x08(%rsp),%rsp	\ 409649 	*/.byte 0x48,0x8D,0x64,0x24,0x8
;/;
	ret		\ 40964E C3 
;/
;/T: .S DEPTH .SN ;


dotS:
	call	0x401929  { DEPTH } 	\ 40964F E8 D5 82 FF FF 
	call	0x4095BF  { .SN } 	\ 409654 E8 66 FF FF FF 
	ret		\ 409659 C3 
;/
;/: H.
;/  BASE @ HEX SWAP U. BASE ! ;


Hdot:
/*	mov	%rax,-0x08(%rbp)	\ 40965A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401558  { SLEEP+48B  } (%rip),%rax	\ 40965E 	*/.byte 0x48,0x8B,0x5,0xF3,0x7E,0xFF,0xFF
/*	movq	$0x10,0x401558  { SLEEP+48B  } (%rip)	\ 409665 	*/.byte 0x48,0xC7,0x5,0xE8,0x7E,0xFF,0xFF,0x10,0x0,0x0,0x0
/*	mov	-0x08(%rbp),%rdx	\ 409670 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 409674 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,%rax	\ 409678 	*/.byte 0x48,0x89,0xD0
/*	lea	-0x08(%rbp),%rbp	\ 40967B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x409467  { U. } 	\ 40967F E8 E3 FD FF FF 
/*	mov	%rax,0x401558  { SLEEP+48B  } (%rip)	\ 409684 	*/.byte 0x48,0x89,0x5,0xCD,0x7E,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40968B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40968F 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 409693 C3 
;/
;/
;/: 0.R
;/  >R 0 <# #S #> R> OVER - 0 MAX DUP 


0dotR:
	Push	%rax	\ 409694 50 
/*	mov	$0x0,%eax	\ 409695 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	call	0x4091D0  { <# } 	\ 40969A E8 31 FB FF FF 
	call	0x409287  { #S } 	\ 40969F E8 E3 FB FF FF 
/*	mov	0x401350  { SLEEP+283  } (%rip),%rax	\ 4096A4 	*/.byte 0x48,0x8B,0x5,0xA5,0x7C,0xFF,0xFF
/*	mov	%rax,0x00(%rbp)	\ 4096AB 	*/.byte 0x48,0x89,0x45,0x0
/*	lea	0x401458  { SLEEP+38B  } (%rip),%rax	\ 4096AF 	*/.byte 0x48,0x8D,0x5,0xA2,0x7D,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 4096B6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 4096BA 	*/.byte 0x48,0x8B,0x45,0x0
/*		negq	%rax	\ 4096BE 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 4096C1 	*/.byte 0x48,0x3,0x45,0xF8
/*	lea	-0x01(%rax),%rax	\ 4096C5 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 4096C9 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 4096CD 8F 45 F0 
/*	mov	-0x08(%rbp),%rax	\ 4096D0 	*/.byte 0x48,0x8B,0x45,0xF8
/*		negq	%rax	\ 4096D4 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 4096D7 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4096DB 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x0,%eax	\ 4096DF 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	cmp	-0x10(%rbp),%rax	\ 4096E4 	*/.byte 0x48,0x3B,0x45,0xF0
/*	cmovl/*	cmov	-0x10(%rbp),%rax	\ 4096E8 	*/.byte 0x48,0xF,0x4C,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4096ED 	*/.byte 0x48,0x89,0x45,0xF0
	test	%rax,%rax	\ 4096F1 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 4096F4 	*/.byte 0x48,0x8B,0x45,0xF0
;/    IF 0 DO [CHAR] 0 EMIT LOOP
/*	lea	-0x08(%rbp),%rbp	\ 4096F8 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x409740  { 0.R+AC  } 	\ 4096FC 	*/.byte 0xF,0x84,0x3E,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 409702 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 409706 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40970B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400A5F  { (DO) } 	\ 40970F E8 4B 73 FF FF 
	.quad 0x40973B  { 0.R+A7  } 
/*	mov	%rax,-0x08(%rbp)	\ 40971C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x30,%eax	\ 409720 	*/.byte 0xB8,0x30,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409725 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 409729 E8 E1 7F FF FF 
/*	inc	%r14	\ 40972E 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 409731 	*/.byte 0x49,0xFF,0xC7
	jNo	0x40971C  { 0.R+88  } 	\ 409734 71 E6 
	pop	%r14	\ 409736 41 5E 
	pop	%r15	\ 409738 41 5F 
	pop	%rcx	\ 40973A 59 
;/    ELSE DROP THEN TYPE ;
/*	jmp	0x409748  { 0.R+B4  } 	\ 40973B 	*/.byte 0xE9,0x8,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 409740 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409744 	*/.byte 0x48,0x8D,0x6D,0x8
	call	0x40177E  { TYPE } 	\ 409748 E8 31 80 FF FF 
	ret		\ 40974D C3 
;/
;/
;/: >PRT
;/  DUP BL U< IF DROP [CHAR] . THEN


greatPRT:
/*	mov	%rax,-0x08(%rbp)	\ 40974E 	*/.byte 0x48,0x89,0x45,0xF8
/*	cmp	$0x20,%rax	\ 409752 	*/.byte 0x48,0x3D,0x20,0x0,0x0,0x0
/*	sbb	%rax,%rax	\ 409758 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40975B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40975E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40976D  { >PRT+1F  } 	\ 409762 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
/*	mov	$0x2E,%eax	\ 409768 	*/.byte 0xB8,0x2E,0x0,0x0,0x0
;/;
	ret		\ 40976D C3 
;/
;/: PTYPE
;/  0 ?DO


PTYPE:
/*	mov	%rax,-0x08(%rbp)	\ 40976E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 409772 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409777 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400A59  { (?DO) } 	\ 40977B E8 D9 72 FF FF 
	.quad 0x4097AF  { PTYPE+41  } 
;/ COUNT >PRT EMIT LOOP DROP ;
/*	lea	0x01(%rax),%rdx	\ 409788 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40978C 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 409790 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 409794 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40974E  { >PRT } 	\ 409798 E8 B1 FF FF FF 
	call	0x40170F  { EMIT } 	\ 40979D E8 6D 7F FF FF 
/*	inc	%r14	\ 4097A2 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 4097A5 	*/.byte 0x49,0xFF,0xC7
	jNo	0x409788  { PTYPE+1A  } 	\ 4097A8 71 DE 
	pop	%r14	\ 4097AA 41 5E 
	pop	%r15	\ 4097AC 41 5F 
	pop	%rcx	\ 4097AE 59 
/*	mov	0x00(%rbp),%rax	\ 4097AF 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4097B3 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4097B7 C3 
;/
;/CREATE DUMP_BASE 0 ,

	DQ 0x0
;/
;/: DUMP_X ( addr u -- ) \ 94 TOOLS
;/  DUP 0= IF 2DROP EXIT THEN

DUMP_X:
/*	mov	%rax,-0x08(%rbp)	\ 4097C0 	*/.byte 0x48,0x89,0x45,0xF8
/*	subq	$0x01,%rax	\ 4097C4 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4097C8 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4097CB 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4097CE 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4097E1  { DUMP_X+21  } 	\ 4097D2 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 4097D8 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 4097DC 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 4097E0 C3 
;/  BASE @ >R HEX
/*	mov	%rax,-0x08(%rbp)	\ 4097E1 	*/.byte 0x48,0x89,0x45,0xF8
/*	push	0x401558  { SLEEP+48B  } (%rip)	\ 4097E5 	*/.byte 0xFF,0x35,0x6D,0x7D,0xFF,0xFF
/*	movq	$0x10,0x401558  { SLEEP+48B  } (%rip)	\ 4097EB 	*/.byte 0x48,0xC7,0x5,0x62,0x7D,0xFF,0xFF,0x10,0x0,0x0,0x0
/*	mov	$0xF,%eax	\ 4097F6 	*/.byte 0xB8,0xF,0x0,0x0,0x0
;/  $F + $10 U/ 0 DO
/*	add	-0x08(%rbp),%rax	\ 4097FB 	*/.byte 0x48,0x3,0x45,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 4097FF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x10,%eax	\ 409803 	*/.byte 0xB8,0x10,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409808 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40079A  { U/ } 	\ 40980C E8 89 6F FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 409811 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 409815 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40981A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400A5F  { (DO) } 	\ 40981E E8 3C 72 FF FF 
	.quad 0x40990C  { DUMP_X+14C  } 
;/\    I IF CR THEN
;/    CR DUP DUMP_BASE @ + 4 0.R SPACE
	call	0x4017B0  { CR } 	\ 40982B E8 80 7F FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 409830 	*/.byte 0x48,0x89,0x45,0xF8
/*	add	0x4097B8  { PTYPE+4A  } (%rip),%rax	\ 409834 	*/.byte 0x48,0x3,0x5,0x7D,0xFF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40983B 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x4,%eax	\ 40983F 	*/.byte 0xB8,0x4,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 409844 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x409694  { 0.R } 	\ 409848 E8 47 FE FF FF 
	call	0x401969  { SPACE } 	\ 40984D E8 17 81 FF FF 
;/    SPACE DUP $10 0
	call	0x401969  { SPACE } 	\ 409852 E8 12 81 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 409857 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 40985B 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$0x10,-0x18(%rbp)	\ 40985F 	*/.byte 0x48,0xC7,0x45,0xE8,0x10,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 409867 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x18(%rbp),%rbp	\ 40986C 	*/.byte 0x48,0x8D,0x6D,0xE8
;/      DO I 4 MOD 0= IF SPACE THEN
	call	0x400A5F  { (DO) } 	\ 409870 E8 EA 71 FF FF 
	.quad 0x4098E1  { DUMP_X+121  } 
/*	mov	%rax,-0x08(%rbp)	\ 40987D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%r14,-0x10(%rbp)	\ 409881 	*/.byte 0x4C,0x89,0x75,0xF0
/*	mov	$0x4,%eax	\ 409885 	*/.byte 0xB8,0x4,0x0,0x0,0x0
/*	mov	%rax,%rcx	\ 40988A 	*/.byte 0x48,0x89,0xC1
/*	mov	-0x10(%rbp),%rax	\ 40988D 	*/.byte 0x48,0x8B,0x45,0xF0
	dw 9948h		\ 409891 48 99 
/*		idivq	%rcx	\ 409893 	*/.byte 0x48,0xF7,0xF9
/*	mov	%rdx,%rax	\ 409896 	*/.byte 0x48,0x89,0xD0
/*	subq	$0x01,%rax	\ 409899 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40989D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4098A0 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4098A3 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4098B2  { DUMP_X+F2  } 	\ 4098A7 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
	call	0x401969  { SPACE } 	\ 4098AD E8 B7 80 FF FF 
;/        DUP C@ 2 0.R SPACE 1+
/*	mov	%rax,-0x08(%rbp)	\ 4098B2 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 4098B6 	*/.byte 0xF,0xB6,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4098B9 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x2,%eax	\ 4098BD 	*/.byte 0xB8,0x2,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 4098C2 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x409694  { 0.R } 	\ 4098C6 E8 C9 FD FF FF 
	call	0x401969  { SPACE } 	\ 4098CB E8 99 80 FF FF 
/*	lea	0x01(%rax),%rax	\ 4098D0 	*/.byte 0x48,0x8D,0x40,0x1
;/      LOOP SWAP $10  PTYPE
/*	inc	%r14	\ 4098D4 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 4098D7 	*/.byte 0x49,0xFF,0xC7
	jNo	0x40987D  { DUMP_X+BD  } 	\ 4098DA 71 A1 
	pop	%r14	\ 4098DC 41 5E 
	pop	%r15	\ 4098DE 41 5F 
	pop	%rcx	\ 4098E0 59 
/*	mov	0x00(%rbp),%rdx	\ 4098E1 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 4098E5 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 4098E9 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	$0x10,%eax	\ 4098ED 	*/.byte 0xB8,0x10,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4098F2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40976E  { PTYPE } 	\ 4098F6 E8 73 FE FF FF 
;/  LOOP DROP R> BASE !
/*	inc	%r14	\ 4098FB 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 4098FE 	*/.byte 0x49,0xFF,0xC7
/*	jNo	0x40982B  { DUMP_X+6B  } 	\ 409901 	*/.byte 0xF,0x81,0x24,0xFF,0xFF,0xFF
	pop	%r14	\ 409907 41 5E 
	pop	%r15	\ 409909 41 5F 
	pop	%rcx	\ 40990B 59 
	pop	-0x08(%rbp)	\ 40990C 8F 45 F8 
/*	lea	0x401558  { SLEEP+48B  } (%rip),%rax	\ 40990F 	*/.byte 0x48,0x8D,0x5,0x42,0x7C,0xFF,0xFF
/*	mov	-0x08(%rbp),%rdx	\ 409916 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rdx,(%rax)	\ 40991A 	*/.byte 0x48,0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 40991D 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409921 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 409925 C3 
;/
;/T: DUMP ( addr u -- ) \ 94 TOOLS
;/  DUMP_BASE 0!


DUMP:
/*	movq	$0x0,0x4097B8  { PTYPE+4A  } (%rip)	\ 409926 	*/.byte 0x48,0xC7,0x5,0x87,0xFE,0xFF,0xFF,0x0,0x0,0x0,0x0
;/  CR DUMP_X
	call	0x4017B0  { CR } 	\ 409931 E8 7A 7E FF FF 
	call	0x4097C0  { DUMP_X } 	\ 409936 E8 85 FE FF FF 
;/;
	ret		\ 40993B C3 
;/
;/: DIGIT ( C, N1 -> N2, TF / FF ) 
;/\ N2 - 
;/\ 
;/   >R


DIGIT:
	Push	%rax	\ 40993C 50 
/*	movq	$-0x30,%rax	\ 40993D 	*/.byte 0x48,0xC7,0xC0,0xD0,0xFF,0xFF,0xFF
/*	add	0x00(%rbp),%rax	\ 409944 	*/.byte 0x48,0x3,0x45,0x0
;/   [CHAR] 0 - 10 OVER U<
/*	mov	%rax,0x00(%rbp)	\ 409948 	*/.byte 0x48,0x89,0x45,0x0
/*	movq	$0xA,-0x08(%rbp)	\ 40994C 	*/.byte 0x48,0xC7,0x45,0xF8,0xA,0x0,0x0,0x0
/*	cmp	%rax,-0x08(%rbp)	\ 409954 	*/.byte 0x48,0x39,0x45,0xF8
/*	sbb	%rax,%rax	\ 409958 	*/.byte 0x48,0x19,0xC0
;/   IF 
	test	%rax,%rax	\ 40995B 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40995E 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409962 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409A25  { DIGIT+E9  } 	\ 409966 	*/.byte 0xF,0x84,0xB9,0x0,0x0,0x0
;/      DUP [CHAR] A [CHAR] 0 -     < IF  RDROP DROP 0 EXIT      THEN
/*	mov	%rax,-0x08(%rbp)	\ 40996C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 409970 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$0x41,-0x18(%rbp)	\ 409974 	*/.byte 0x48,0xC7,0x45,0xE8,0x41,0x0,0x0,0x0
/*	movq	$-0x30,%rax	\ 40997C 	*/.byte 0x48,0xC7,0xC0,0xD0,0xFF,0xFF,0xFF
/*	add	-0x18(%rbp),%rax	\ 409983 	*/.byte 0x48,0x3,0x45,0xE8
/*	cmp	-0x10(%rbp),%rax	\ 409987 	*/.byte 0x48,0x3B,0x45,0xF0
	setNle	%al	\ 40998B F 9F C0 
/*		neg	%al	\ 40998E 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 409990 	*/.byte 0x48,0xF,0xBE,0xC0
	test	%rax,%rax	\ 409994 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 409997 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4099AC  { DIGIT+70  } 	\ 40999B 	*/.byte 0xF,0x84,0xB,0x0,0x0,0x0
/*	lea	0x08(%rsp),%rsp	\ 4099A1 	*/.byte 0x48,0x8D,0x64,0x24,0x8
/*	mov	$0x0,%eax	\ 4099A6 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 4099AB C3 
;/      DUP [CHAR] a [CHAR] 0 -  1- > IF [CHAR] a  [CHAR] A - -  THEN
/*	mov	%rax,-0x08(%rbp)	\ 4099AC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 4099B0 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$0x61,-0x18(%rbp)	\ 4099B4 	*/.byte 0x48,0xC7,0x45,0xE8,0x61,0x0,0x0,0x0
/*	movq	$-0x30,%rax	\ 4099BC 	*/.byte 0x48,0xC7,0xC0,0xD0,0xFF,0xFF,0xFF
/*	add	-0x18(%rbp),%rax	\ 4099C3 	*/.byte 0x48,0x3,0x45,0xE8
/*	lea	-0x01(%rax),%rax	\ 4099C7 	*/.byte 0x48,0x8D,0x40,0xFF
/*	cmp	-0x10(%rbp),%rax	\ 4099CB 	*/.byte 0x48,0x3B,0x45,0xF0
	setl	%al	\ 4099CF F 9C C0 
/*		neg	%al	\ 4099D2 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 4099D4 	*/.byte 0x48,0xF,0xBE,0xC0
	test	%rax,%rax	\ 4099D8 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4099DB 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x409A03  { DIGIT+C7  } 	\ 4099DF 	*/.byte 0xF,0x84,0x1E,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4099E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x61,-0x10(%rbp)	\ 4099E9 	*/.byte 0x48,0xC7,0x45,0xF0,0x61,0x0,0x0,0x0
/*	movq	$-0x41,%rax	\ 4099F1 	*/.byte 0x48,0xC7,0xC0,0xBF,0xFF,0xFF,0xFF
/*	add	-0x10(%rbp),%rax	\ 4099F8 	*/.byte 0x48,0x3,0x45,0xF0
/*		negq	%rax	\ 4099FC 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 4099FF 	*/.byte 0x48,0x3,0x45,0xF8
;/          [CHAR] A [CHAR] 0 - 10 - -
/*	mov	%rax,-0x08(%rbp)	\ 409A03 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x41,-0x10(%rbp)	\ 409A07 	*/.byte 0x48,0xC7,0x45,0xF0,0x41,0x0,0x0,0x0
/*	movq	$-0x30,%rax	\ 409A0F 	*/.byte 0x48,0xC7,0xC0,0xD0,0xFF,0xFF,0xFF
/*	add	-0x10(%rbp),%rax	\ 409A16 	*/.byte 0x48,0x3,0x45,0xF0
/*	addq	$-0x0A,%rax	\ 409A1A 	*/.byte 0x48,0x83,0xC0,0xF6
/*		negq	%rax	\ 409A1E 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 409A21 	*/.byte 0x48,0x3,0x45,0xF8
;/   THEN R> OVER U> DUP 0= IF NIP THEN ;
/*	mov	%rax,-0x08(%rbp)	\ 409A25 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 409A29 8F 45 F0 
/*	mov	-0x08(%rbp),%rax	\ 409A2C 	*/.byte 0x48,0x8B,0x45,0xF8
/*	cmp	-0x10(%rbp),%rax	\ 409A30 	*/.byte 0x48,0x3B,0x45,0xF0
/*	sbb	%rax,%rax	\ 409A34 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,-0x10(%rbp)	\ 409A37 	*/.byte 0x48,0x89,0x45,0xF0
/*	subq	$0x01,%rax	\ 409A3B 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409A3F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 409A42 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 409A45 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 409A49 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x409A57  { DIGIT+11B  } 	\ 409A4D 	*/.byte 0xF,0x84,0x4,0x0,0x0,0x0
/*	lea	0x08(%rbp),%rbp	\ 409A53 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 409A57 C3 
;/
;/
;/: >NUMBER ( ud1 c-addr1 u1 -- ud2 c-addr2 u2 ) \ 94
;/  BEGIN
;/    DUP


greatNUMBER:
/*	mov	%rax,-0x08(%rbp)	\ 409A58 	*/.byte 0x48,0x89,0x45,0xF8
	test	%rax,%rax	\ 409A5C 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 409A5F 	*/.byte 0x48,0x8B,0x45,0xF8
;/  WHILE
/*	jz	0x409B0B  { >NUMBER+B3  } 	\ 409A63 	*/.byte 0xF,0x84,0xA2,0x0,0x0,0x0
;/    >R
	Push	%rax	\ 409A69 50 
/*	mov	0x00(%rbp),%rax	\ 409A6A 	*/.byte 0x48,0x8B,0x45,0x0
	Push	%rax	\ 409A6E 50 
/*	mov	0x00(%rbp),%rax	\ 409A6F 	*/.byte 0x48,0x8B,0x45,0x0
;/    DUP >R
/*	movzb	(%rax),%eax	\ 409A73 	*/.byte 0xF,0xB6,0x0
/*	mov	%rax,0x00(%rbp)	\ 409A76 	*/.byte 0x48,0x89,0x45,0x0
;/    C@ BASE @ DIGIT 0=     \ ud n flag
/*	mov	0x401558  { SLEEP+48B  } (%rip),%rax	\ 409A7A 	*/.byte 0x48,0x8B,0x5,0xD7,0x7A,0xFF,0xFF
	call	0x40993C  { DIGIT } 	\ 409A81 E8 B6 FE FF FF 
/*	subq	$0x01,%rax	\ 409A86 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409A8A 	*/.byte 0x48,0x19,0xC0
;/    IF R> R> EXIT THEN     \ ud n  ( ud = udh udl )
	test	%rax,%rax	\ 409A8D 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 409A90 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409A94 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409AAB  { >NUMBER+53  } 	\ 409A98 	*/.byte 0xF,0x84,0xD,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 409A9E 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 409AA2 8F 45 F0 
	pop	%rax	\ 409AA5 58 
/*	lea	-0x10(%rbp),%rbp	\ 409AA6 	*/.byte 0x48,0x8D,0x6D,0xF0
	ret		\ 409AAA C3 
;/    SWAP BASE @ UM* DROP   \ udl n udh*base
/*	mov	0x00(%rbp),%rdx	\ 409AAB 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 409AAF 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 409AB3 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	0x401558  { SLEEP+48B  } (%rip),%rax	\ 409AB7 	*/.byte 0x48,0x8B,0x5,0x9A,0x7A,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 409ABE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4007AC  { UM* } 	\ 409AC2 E8 E5 6C FF FF 
/*	mov	0x00(%rbp),%rax	\ 409AC7 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	0x08(%rbp),%rdx	\ 409ACB 	*/.byte 0x48,0x8B,0x55,0x8
;/    ROT BASE @ UM* D+      \ (n udh*base)+(udl*baseD)
/*	mov	%rax,0x08(%rbp)	\ 409ACF 	*/.byte 0x48,0x89,0x45,0x8
/*	mov	0x10(%rbp),%rax	\ 409AD3 	*/.byte 0x48,0x8B,0x45,0x10
/*	mov	%rdx,0x10(%rbp)	\ 409AD7 	*/.byte 0x48,0x89,0x55,0x10
/*	mov	%rax,0x00(%rbp)	\ 409ADB 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	0x401558  { SLEEP+48B  } (%rip),%rax	\ 409ADF 	*/.byte 0x48,0x8B,0x5,0x72,0x7A,0xFF,0xFF
	call	0x4007AC  { UM* } 	\ 409AE6 E8 C1 6C FF FF 
	call	0x4006ED  { D+ } 	\ 409AEB E8 FD 6B FF FF 
;/    R> 1+ R> 1-
/*	mov	%rax,-0x08(%rbp)	\ 409AF0 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 409AF4 58 
/*	lea	0x01(%rax),%rax	\ 409AF5 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 409AF9 	*/.byte 0x48,0x89,0x45,0xF0
	pop	%rax	\ 409AFD 58 
/*	lea	-0x01(%rax),%rax	\ 409AFE 	*/.byte 0x48,0x8D,0x40,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 409B02 	*/.byte 0x48,0x8D,0x6D,0xF0
;/  REPEAT
/*	jmp	0x409A58  { >NUMBER } 	\ 409B06 	*/.byte 0xE9,0x4D,0xFF,0xFF,0xFF
;/;
	ret		\ 409B0B C3 
;/
;/
;/\  0 0 S" 1234"  >NUMBER H. H. H. H.
;/
;/: /STRING DUP>R - SWAP R> + SWAP ;


rslSTRING:
	Push	%rax	\ 409B0C 50 
/*		negq	%rax	\ 409B0D 	*/.byte 0x48,0xF7,0xD8
/*	add	0x00(%rbp),%rax	\ 409B10 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	0x08(%rbp),%rdx	\ 409B14 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rax,0x08(%rbp)	\ 409B18 	*/.byte 0x48,0x89,0x45,0x8
/*	mov	%rdx,%rax	\ 409B1C 	*/.byte 0x48,0x89,0xD0
/*	mov	%rax,0x00(%rbp)	\ 409B1F 	*/.byte 0x48,0x89,0x45,0x0
	pop	%rax	\ 409B23 58 
/*	add	0x00(%rbp),%rax	\ 409B24 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	0x08(%rbp),%rdx	\ 409B28 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rax,0x08(%rbp)	\ 409B2C 	*/.byte 0x48,0x89,0x45,0x8
/*	mov	%rdx,%rax	\ 409B30 	*/.byte 0x48,0x89,0xD0
/*	lea	0x08(%rbp),%rbp	\ 409B33 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 409B37 C3 
;/
;/VARIABLE &DOUBLE?

	DQ 0x0
;/VARIABLE &?MINUS
	DQ 0x0
;/
;/: DOUBLE? &DOUBLE? @ ;

DOUBLEque:
/*	mov	%rax,-0x08(%rbp)	\ 409B48 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x409B38  { /STRING+2C  } (%rip),%rax	\ 409B4C 	*/.byte 0x48,0x8B,0x5,0xE5,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 409B53 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 409B57 C3 
;/: ?MINUS  &?MINUS @ ;


queMINUS:
/*	mov	%rax,-0x08(%rbp)	\ 409B58 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x409B40  { /STRING+34  } (%rip),%rax	\ 409B5C 	*/.byte 0x48,0x8B,0x5,0xDD,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 409B63 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 409B67 C3 
;/
;/: NUMBER?       ( addr len -- d1 f1 )
;/                FALSE &DOUBLE? !                \ initially not a double #


NUMBERque:
/*	movq	$0x0,0x409B38  { /STRING+2C  } (%rip)	\ 409B68 	*/.byte 0x48,0xC7,0x5,0xC5,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0
;/                OVER C@ [CHAR] - =
/*	mov	%rax,-0x08(%rbp)	\ 409B73 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 409B77 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzb	(%rax),%eax	\ 409B7B 	*/.byte 0xF,0xB6,0x0
/*	xor	$0x2D,%rax	\ 409B7E 	*/.byte 0x48,0x35,0x2D,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 409B84 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409B88 	*/.byte 0x48,0x19,0xC0
/*	and	-0x08(%rbp),%rax	\ 409B8B 	*/.byte 0x48,0x23,0x45,0xF8
;/                OVER AND DUP>R
	Push	%rax	\ 409B8F 50 
	test	%rax,%rax	\ 409B90 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 409B93 	*/.byte 0x48,0x8B,0x45,0xF8
;/                IF      1 /STRING
/*	jz	0x409BAF  { NUMBER?+47  } 	\ 409B97 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 409B9D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1,%eax	\ 409BA1 	*/.byte 0xB8,0x1,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409BA6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x409B0C  { /STRING } 	\ 409BAA E8 5D FF FF FF 
;/                THEN
;/                DUP 0=
/*	mov	%rax,-0x08(%rbp)	\ 409BAF 	*/.byte 0x48,0x89,0x45,0xF8
/*	subq	$0x01,%rax	\ 409BB3 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409BB7 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 409BBA 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 409BBD 	*/.byte 0x48,0x8B,0x45,0xF8
;/                IF      R>DROP      FALSE &?MINUS !
/*	jz	0x409BF1  { NUMBER?+89  } 	\ 409BC1 	*/.byte 0xF,0x84,0x2A,0x0,0x0,0x0
/*	lea	0x08(%rsp),%rsp	\ 409BC7 	*/.byte 0x48,0x8D,0x64,0x24,0x8
/*	movq	$0x0,0x409B40  { /STRING+34  } (%rip)	\ 409BCC 	*/.byte 0x48,0xC7,0x5,0x69,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0
;/                        2DROP 0 0 FALSE EXIT   \ always return zero on failure
/*	movq	$0x0,0x00(%rbp)	\ 409BD7 	*/.byte 0x48,0xC7,0x45,0x0,0x0,0x0,0x0,0x0
/*	movq	$0x0,-0x08(%rbp)	\ 409BDF 	*/.byte 0x48,0xC7,0x45,0xF8,0x0,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 409BE7 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409BEC 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 409BF0 C3 
;/                THEN
;/                0 0 2SWAP >NUMBER
/*	mov	%rax,-0x08(%rbp)	\ 409BF1 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x0,-0x10(%rbp)	\ 409BF5 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 409BFD 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	mov	-0x10(%rbp),%rcx	\ 409C02 	*/.byte 0x48,0x8B,0x4D,0xF0
/*	mov	-0x08(%rbp),%rdx	\ 409C06 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	0x00(%rbp),%rbx	\ 409C0A 	*/.byte 0x48,0x8B,0x5D,0x0
/*	mov	%rcx,0x00(%rbp)	\ 409C0E 	*/.byte 0x48,0x89,0x4D,0x0
/*	mov	%rax,-0x08(%rbp)	\ 409C12 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rbx,-0x10(%rbp)	\ 409C16 	*/.byte 0x48,0x89,0x5D,0xF0
/*	mov	%rdx,%rax	\ 409C1A 	*/.byte 0x48,0x89,0xD0
/*	lea	-0x10(%rbp),%rbp	\ 409C1D 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x409A58  { >NUMBER } 	\ 409C21 E8 32 FE FF FF 
;/                OVER C@ [CHAR] . =              \ next char is a '.'
/*	mov	%rax,-0x08(%rbp)	\ 409C26 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 409C2A 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzb	(%rax),%eax	\ 409C2E 	*/.byte 0xF,0xB6,0x0
/*	xor	$0x2E,%rax	\ 409C31 	*/.byte 0x48,0x35,0x2E,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 409C37 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409C3B 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,%rdx	\ 409C3E 	*/.byte 0x48,0x89,0xC2
/*	mov	-0x08(%rbp),%rax	\ 409C41 	*/.byte 0x48,0x8B,0x45,0xF8
;/                OVER SWAP 0< AND                     \ more chars to look at
/*	mov	%rax,-0x10(%rbp)	\ 409C45 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%rdx,%rax	\ 409C49 	*/.byte 0x48,0x89,0xD0
/*	sar	$0x3F,%rax	\ 409C4C 	*/.byte 0x48,0xC1,0xF8,0x3F
/*	and	-0x10(%rbp),%rax	\ 409C50 	*/.byte 0x48,0x23,0x45,0xF0
	test	%rax,%rax	\ 409C54 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 409C57 	*/.byte 0x48,0x8B,0x45,0xF8
;/                IF \     DUP 1- TO DP-LOCATION
/*	jz	0x409CBF  { NUMBER?+157  } 	\ 409C5B 	*/.byte 0xF,0x84,0x5E,0x0,0x0,0x0
;/			BEGIN
;/                        1 /STRING >NUMBER
/*	mov	%rax,-0x08(%rbp)	\ 409C61 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1,%eax	\ 409C65 	*/.byte 0xB8,0x1,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 409C6A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x409B0C  { /STRING } 	\ 409C6E E8 99 FE FF FF 
	call	0x409A58  { >NUMBER } 	\ 409C73 E8 E0 FD FF FF 
;/                        DUP 0=
/*	mov	%rax,-0x08(%rbp)	\ 409C78 	*/.byte 0x48,0x89,0x45,0xF8
/*	subq	$0x01,%rax	\ 409C7C 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409C80 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 409C83 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 409C86 	*/.byte 0x48,0x8B,0x45,0xF8
;/                        IF      TRUE &DOUBLE? ! \ mark as a double number
/*	jz	0x409C9B  { NUMBER?+133  } 	\ 409C8A 	*/.byte 0xF,0x84,0xB,0x0,0x0,0x0
/*	movq	$-0x1,0x409B38  { /STRING+2C  } (%rip)	\ 409C90 	*/.byte 0x48,0xC7,0x5,0x9D,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
;/                        THEN
;/  OVER C@ [CHAR] . <>			UNTIL 
/*	mov	%rax,-0x08(%rbp)	\ 409C9B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 409C9F 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzb	(%rax),%eax	\ 409CA3 	*/.byte 0xF,0xB6,0x0
/*	xor	$0x2E,%rax	\ 409CA6 	*/.byte 0x48,0x35,0x2E,0x0,0x0,0x0
/*		negq	%rax	\ 409CAC 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 409CAF 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 409CB2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 409CB5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x409C61  { NUMBER?+F9  } 	\ 409CB9 	*/.byte 0xF,0x84,0xA2,0xFF,0xFF,0xFF
;/                THEN    NIP 0=
/*	subq	$0x01,%rax	\ 409CBF 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409CC3 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,0x00(%rbp)	\ 409CC6 	*/.byte 0x48,0x89,0x45,0x0
;/                R> ?MINUS XOR
	pop	%rax	\ 409CCA 58 
/*	xor	0x409B40  { /STRING+34  } (%rip),%rax	\ 409CCB 	*/.byte 0x48,0x33,0x5,0x6E,0xFE,0xFF,0xFF
;/                IF      >R DNEGATE R>
	test	%rax,%rax	\ 409CD2 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 409CD5 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409CD9 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409CFA  { NUMBER?+192  } 	\ 409CDD 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
	Push	%rax	\ 409CE3 50 
/*	mov	0x00(%rbp),%rax	\ 409CE4 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409CE8 	*/.byte 0x48,0x8D,0x6D,0x8
	call	0x4006CE  { DNEGATE } 	\ 409CEC E8 DD 69 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 409CF1 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 409CF5 58 
/*	lea	-0x08(%rbp),%rbp	\ 409CF6 	*/.byte 0x48,0x8D,0x6D,0xF8
;/                THEN  FALSE &?MINUS !
/*	movq	$0x0,0x409B40  { /STRING+34  } (%rip)	\ 409CFA 	*/.byte 0x48,0xC7,0x5,0x3B,0xFE,0xFF,0xFF,0x0,0x0,0x0,0x0
;/;
	ret		\ 409D05 C3 
;/
