;/REQUIRE DUPENDCASE ~mak/case.f
;/
;/\- M_WL : M_WL CS-DUP POSTPONE WHILE ; IMMEDIATE
;/
;/\- C>S : C>S ( c -- n )  $FF AND $80 XOR $80 - ;
;/\- L>S : L>S ( c -- n )  $FFFFFFFF AND $80000000 XOR $80000000 - ;
;/
;/\- -CELL  -1 CELLS CONSTANT -CELL
;/
;/\- ANDC : ANDC	INVERT AND ;
;/\-  XOR! : XOR!	DUP @ ROT XOR SWAP ! ;
;/
;/\- 4* : 4* 2 << ;
;/\- 3+ : 3+ 2+ 1+ ;
;/
;/\- M@ : M@ @ ;
;/\- THERE : THERE HERE ;
;/\- TBASE BASE CONSTANT TBASE
;/\- SHORT? : SHORT? ( n -- -128 < n < 127 )  0x80 + 0x100 U< ;
;/\- LONG? : LONG? ( n -- -2147483648<n<2147483647 )
;/\- LONG? $80000000 + $100000000 U< ;
;/\- HH. : HH. H. ;
;/\- OPTVALNEED -1 VALUE OPTVALNEED
;/
;/
;/0 VALUE J_COD  \ код для Jx, он же признак ?BRANCH

J_COD:
	call	0x400AF4  { DOVALUE } 	\ 4021E8 E8 7 E9 FF FF 

	DQ 0x0
;/
;/TBASE M@ HEX
;/
;/OPTVALNEED
;/[IF]
;/0 VALUE MO_TST_VAL

MO_TST_VAL:
	call	0x400AF4  { DOVALUE } 	\ 4021F5 E8 FA E8 FF FF 

	DQ 0x0
;/
;/   TRUE VALUE OPT?

OPTque:
	call	0x400AF4  { DOVALUE } 	\ 402202 E8 ED E8 FF FF 

	DQ 0xFFFFFFFFFFFFFFFF
;/
;/0x20 VALUE MM_SIZE

MM_SIZE:
	call	0x400AF4  { DOVALUE } 	\ 40220F E8 E0 E8 FF FF 

	DQ 0x20
;/
;/0 VALUE OFF-EBP

OFFsubEBP:
	call	0x400AF4  { DOVALUE } 	\ 40221C E8 D3 E8 FF FF 

	DQ 0x0
;/
;/0 VALUE OFF-EAX

OFFsubEAX:
	call	0x400AF4  { DOVALUE } 	\ 402229 E8 C6 E8 FF FF 

	DQ 0x0
;/
;/0 VALUE TOFF-PSP

TOFFsubPSP:
	call	0x400AF4  { DOVALUE } 	\ 402236 E8 B9 E8 FF FF 

	DQ 0x0
;/
;/0 VALUE LAST-HERE

LASTsubHERE:
	call	0x400AF4  { DOVALUE } 	\ 402243 E8 AC E8 FF FF 

	DQ 0x0
;/
;/$22 CELLS DUP CONSTANT OpBuffSize
;/
;/CREATE OP0 2 CELLS + ALLOT
	DQ 0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	DQ  0x0,0x0,0x0,0x0,0x0,0x0
;/OP0
;/CELL+ DUP CONSTANT OP1
;/CELL+ DUP CONSTANT OP2
;/CELL+ DUP CONSTANT OP3
;/CELL+ DUP CONSTANT OP4
;/CELL+ DUP CONSTANT OP5
;/CELL+ DUP CONSTANT OP6
;/CELL+ DUP CONSTANT OP7
;/CELL+ DUP CONSTANT OP8
;/DROP
;/
;/0 VALUE :-SET

dcomasubSET:
	call	0x400AF4  { DOVALUE } 	\ 402370 E8 7F E7 FF FF 

	DQ 0x0
;/
;/[THEN]
;/
;/: SET-OPT TRUE TO OPT? ;

SETsubOPT:
/*	movq	$-0x1,0x402207  { OPT?+5  } (%rip)	\ 40237D 	*/.byte 0x48,0xC7,0x5,0x7F,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
	ret		\ 402388 C3 
;/
;/: DIS-OPT FALSE TO OPT? ;


DISsubOPT:
/*	movq	$0x0,0x402207  { OPT?+5  } (%rip)	\ 402389 	*/.byte 0x48,0xC7,0x5,0x73,0xFE,0xFF,0xFF,0x0,0x0,0x0,0x0
	ret		\ 402394 C3 
;/
;/0 VALUE OP0@


OP0load:
	call	0x400AF4  { DOVALUE } 	\ 402395 E8 5A E7 FF FF 

	DQ 0x0
;/0 VALUE OP1@

OP1load:
	call	0x400AF4  { DOVALUE } 	\ 4023A2 E8 4D E7 FF FF 

	DQ 0x0
;/0 VALUE OP2@

OP2load:
	call	0x400AF4  { DOVALUE } 	\ 4023AF E8 40 E7 FF FF 

	DQ 0x0
;/0 VALUE OP3@

OP3load:
	call	0x400AF4  { DOVALUE } 	\ 4023BC E8 33 E7 FF FF 

	DQ 0x0
;/0 VALUE OP4@

OP4load:
	call	0x400AF4  { DOVALUE } 	\ 4023C9 E8 26 E7 FF FF 

	DQ 0x0
;/0 VALUE OP5@

OP5load:
	call	0x400AF4  { DOVALUE } 	\ 4023D6 E8 19 E7 FF FF 

	DQ 0x0
;/
;/: OPLast OP0 OpBuffSize + CELL- ;

OPLast:
/*	mov	%rax,-0x08(%rbp)	\ 4023E3 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402358  { LAST-HERE+115  } (%rip),%rax	\ 4023E7 	*/.byte 0x48,0x8D,0x5,0x6A,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4023EE 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 4023F2 C3 
;/
;/: ?OPlast  ( OPX -- OPX flag )
;/     DUP OPLast CELL- U> ;


queOPlast:
/*	mov	%rax,-0x08(%rbp)	\ 4023F3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 4023F7 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x402350  { LAST-HERE+10D  } (%rip),%rax	\ 4023FB 	*/.byte 0x48,0x8D,0x5,0x4E,0xFF,0xFF,0xFF
/*	cmp	-0x10(%rbp),%rax	\ 402402 	*/.byte 0x48,0x3B,0x45,0xF0
/*	sbb	%rax,%rax	\ 402406 	*/.byte 0x48,0x19,0xC0
/*	lea	-0x08(%rbp),%rbp	\ 402409 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40240D C3 
;/
;/: SetOP ( -- )
;/ THERE OP0 @ = IF -8FD THROW THEN \ -2301 THROW \ do not alow OP1 be the same as OP0


SetOP:
/*	mov	%rax,-0x08(%rbp)	\ 40240E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 402412 	*/.byte 0x48,0x8B,0x5,0x37,0xF2,0xFF,0xFF
/*	xor	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 402419 	*/.byte 0x48,0x33,0x5,0x30,0xFE,0xFF,0xFF
/*	subq	$0x01,%rax	\ 402420 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 402424 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 402427 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40242A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402448  { SetOP+3A  } 	\ 40242E 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402434 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x8FD,%rax	\ 402438 	*/.byte 0x48,0xC7,0xC0,0x3,0xF7,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40243F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 402443 E8 E8 FA FF FF 
;/ OP0 OP1 OpBuffSize CELL- CMOVE>
/*	mov	%rax,-0x08(%rbp)	\ 402448 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 40244C 	*/.byte 0x48,0x8D,0x5,0xFD,0xFD,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 402453 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 402457 	*/.byte 0x48,0x8D,0x5,0xFA,0xFD,0xFF,0xFF
/*	mov	%rax,-0x18(%rbp)	\ 40245E 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	$0x108,%eax	\ 402462 	*/.byte 0xB8,0x8,0x1,0x0,0x0
/*	lea	-0x18(%rbp),%rbp	\ 402467 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x400993  { CMOVE> } 	\ 40246B E8 23 E5 FF FF 
;/ THERE OP0 !
/*	mov	%rax,-0x08(%rbp)	\ 402470 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 402474 	*/.byte 0x48,0x8B,0x5,0xD5,0xF1,0xFF,0xFF
/*	mov	%rax,0x402250  { LAST-HERE+D  } (%rip)	\ 40247B 	*/.byte 0x48,0x89,0x5,0xCE,0xFD,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 402482 	*/.byte 0x48,0x8B,0x45,0xF8
;/;
	ret		\ 402486 C3 
;/
;/: ToOP0 ( OPn -- )
;/     OP0 OpBuffSize CELL- CMOVE ;


ToOP0:
/*	mov	%rax,-0x08(%rbp)	\ 402487 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 40248B 	*/.byte 0x48,0x8D,0x5,0xBE,0xFD,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 402492 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x108,%eax	\ 402496 	*/.byte 0xB8,0x8,0x1,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40249B 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4009EE  { CMOVE } 	\ 40249F E8 4A E5 FF FF 
	ret		\ 4024A4 C3 
;/
;/: ?SET THERE


queSET:
/*	mov	%rax,-0x08(%rbp)	\ 4024A5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 4024A9 	*/.byte 0x48,0x8B,0x5,0xA0,0xF1,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 4024B0 	*/.byte 0x48,0x89,0x45,0xF0
;/	DUP LAST-HERE
/*	xor	0x402248  { LAST-HERE+5  } (%rip),%rax	\ 4024B4 	*/.byte 0x48,0x33,0x5,0x8D,0xFD,0xFF,0xFF
	test	%rax,%rax	\ 4024BB 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 4024BE 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 4024C2 	*/.byte 0x48,0x8D,0x6D,0xF8
;/ XOR IF DUP TO :-SET THEN
/*	jz	0x4024D3  { ?SET+2E  } 	\ 4024C6 	*/.byte 0xF,0x84,0x7,0x0,0x0,0x0
/*	mov	%rax,0x402375  { :-SET+5  } (%rip)	\ 4024CC 	*/.byte 0x48,0x89,0x5,0xA2,0xFE,0xFF,0xFF
;/	DUP    OP0 @ U< IF OP0 0! THEN
/*	mov	%rax,-0x08(%rbp)	\ 4024D3 	*/.byte 0x48,0x89,0x45,0xF8
/*	cmp	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 4024D7 	*/.byte 0x48,0x3B,0x5,0x72,0xFD,0xFF,0xFF
/*	sbb	%rax,%rax	\ 4024DE 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4024E1 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4024E4 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4024F9  { ?SET+54  } 	\ 4024E8 	*/.byte 0xF,0x84,0xB,0x0,0x0,0x0
/*	movq	$0x0,0x402250  { LAST-HERE+D  } (%rip)	\ 4024EE 	*/.byte 0x48,0xC7,0x5,0x57,0xFD,0xFF,0xFF,0x0,0x0,0x0,0x0
;/	DUP    OP1 @ U< IF OP1 0! THEN
/*	mov	%rax,-0x08(%rbp)	\ 4024F9 	*/.byte 0x48,0x89,0x45,0xF8
/*	cmp	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4024FD 	*/.byte 0x48,0x3B,0x5,0x54,0xFD,0xFF,0xFF
/*	sbb	%rax,%rax	\ 402504 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 402507 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40250A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40251F  { ?SET+7A  } 	\ 40250E 	*/.byte 0xF,0x84,0xB,0x0,0x0,0x0
/*	movq	$0x0,0x402258  { LAST-HERE+15  } (%rip)	\ 402514 	*/.byte 0x48,0xC7,0x5,0x39,0xFD,0xFF,0xFF,0x0,0x0,0x0,0x0
;/	DROP
/*	mov	0x00(%rbp),%rax	\ 40251F 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 402523 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 402527 C3 
;/
;/: ?^OP ( addr -- flg )
;/\
;/  DUP :-SET U< IF DROP FALSE BREAK


quepicOP:
/*	mov	%rax,-0x08(%rbp)	\ 402528 	*/.byte 0x48,0x89,0x45,0xF8
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 40252C 	*/.byte 0x48,0x3B,0x5,0x42,0xFE,0xFF,0xFF
/*	sbb	%rax,%rax	\ 402533 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 402536 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402539 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402549  { ?^OP+21  } 	\ 40253D 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 402543 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 402548 C3 
;/  DROP TRUE
/*	movq	$-0x1,%rax	\ 402549 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
;/;
	ret		\ 402550 C3 
;/
;/M\ ' DROP ->DEFER DTST


DTST:
	call	0x400B02  { DOVECT } 	\ 402551 E8 AC E5 FF FF 
	.quad 0x4003FC  { D>S } 

;/
;/ TRUE VALUE ?C-JMP

queCsubJMP:
	call	0x400AF4  { DOVALUE } 	\ 40255E E8 91 E5 FF FF 

	DQ 0xFFFFFFFFFFFFFFFF
;/
;/ 0 VALUE OPXXX

OPXXX:
	call	0x400AF4  { DOVALUE } 	\ 40256B E8 84 E5 FF FF 

	DQ 0x0
;/
;/: OP_SIZE ( OP - n )
;/  DUP CELL- @ SWAP @ - ;

OP_SIZE:
/*	mov	%rax,%rdx	\ 402578 	*/.byte 0x48,0x89,0xC2
/*	mov	-0x08(%rax),%rax	\ 40257B 	*/.byte 0x48,0x8B,0x40,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 40257F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rdx),%rax	\ 402583 	*/.byte 0x48,0x8B,0x2
/*		negq	%rax	\ 402586 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 402589 	*/.byte 0x48,0x3,0x45,0xF8
	ret		\ 40258D C3 
;/
;/: RIPADR? ( w -- flg )
;/	CASE
;/
;/	DUP C7FF AND	05F6 XOR IF


RIPADRque:
/*	mov	%rax,-0x08(%rbp)	\ 40258E 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xC7FF,%eax	\ 402592 	*/.byte 0x25,0xFF,0xC7,0x0,0x0
/*	xor	$0x5F6,%eax	\ 402597 	*/.byte 0x35,0xF6,0x5,0x0,0x0
	test	%rax,%rax	\ 40259C 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40259F 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 4025A3 	*/.byte 0xF,0x84,0x57,0x1,0x0,0x0
;/	DUP D7FF AND	15F7 XOR IF
/*	mov	%rax,-0x08(%rbp)	\ 4025A9 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xD7FF,%eax	\ 4025AD 	*/.byte 0x25,0xFF,0xD7,0x0,0x0
/*	xor	$0x15F7,%eax	\ 4025B2 	*/.byte 0x35,0xF7,0x15,0x0,0x0
	test	%rax,%rax	\ 4025B7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4025BA 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 4025BE 	*/.byte 0xF,0x84,0x3C,0x1,0x0,0x0
;/	DUP E7FF AND	25F7 XOR IF
/*	mov	%rax,-0x08(%rbp)	\ 4025C4 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xE7FF,%eax	\ 4025C8 	*/.byte 0x25,0xFF,0xE7,0x0,0x0
/*	xor	$0x25F7,%eax	\ 4025CD 	*/.byte 0x35,0xF7,0x25,0x0,0x0
	test	%rax,%rax	\ 4025D2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4025D5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 4025D9 	*/.byte 0xF,0x84,0x21,0x1,0x0,0x0
;/	DUP F7FF AND	05FE XOR IF
/*	mov	%rax,-0x08(%rbp)	\ 4025DF 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xF7FF,%eax	\ 4025E3 	*/.byte 0x25,0xFF,0xF7,0x0,0x0
/*	xor	$0x5FE,%eax	\ 4025E8 	*/.byte 0x35,0xFE,0x5,0x0,0x0
	test	%rax,%rax	\ 4025ED 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4025F0 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 4025F4 	*/.byte 0xF,0x84,0x6,0x1,0x0,0x0
;/	DUP C7FF AND	05FF XOR IF
/*	mov	%rax,-0x08(%rbp)	\ 4025FA 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xC7FF,%eax	\ 4025FE 	*/.byte 0x25,0xFF,0xC7,0x0,0x0
/*	xor	$0x5FF,%eax	\ 402603 	*/.byte 0x35,0xFF,0x5,0x0,0x0
	test	%rax,%rax	\ 402608 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40260B 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 40260F 	*/.byte 0xF,0x84,0xEB,0x0,0x0,0x0
;/
;/	DUP		05c0 XOR IF \ rolb    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 402615 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x5C0,%rax	\ 402619 	*/.byte 0x48,0x35,0xC0,0x5,0x0,0x0
	test	%rax,%rax	\ 40261F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402622 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 402626 	*/.byte 0xF,0x84,0xD4,0x0,0x0,0x0
;/	DUP		05c1 XOR IF \ roll    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 40262C 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x5C1,%rax	\ 402630 	*/.byte 0x48,0x35,0xC1,0x5,0x0,0x0
	test	%rax,%rax	\ 402636 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402639 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 40263D 	*/.byte 0xF,0x84,0xBD,0x0,0x0,0x0
;/	DUP		05c6 XOR IF \ movb    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 402643 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x5C6,%rax	\ 402647 	*/.byte 0x48,0x35,0xC6,0x5,0x0,0x0
	test	%rax,%rax	\ 40264D 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402650 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 402654 	*/.byte 0xF,0x84,0xA6,0x0,0x0,0x0
;/	DUP		05c7 XOR IF \ movl    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 40265A 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x5C7,%rax	\ 40265E 	*/.byte 0x48,0x35,0xC7,0x5,0x0,0x0
	test	%rax,%rax	\ 402664 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402667 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 40266B 	*/.byte 0xF,0x84,0x8F,0x0,0x0,0x0
;/
;/	DUP C7C4 AND	0500 XOR IF \ add..cmp    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 402671 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xC7C4,%eax	\ 402675 	*/.byte 0x25,0xC4,0xC7,0x0,0x0
/*	xor	$0x500,%eax	\ 40267A 	*/.byte 0x35,0x0,0x5,0x0,0x0
	test	%rax,%rax	\ 40267F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402682 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 402686 	*/.byte 0xF,0x84,0x74,0x0,0x0,0x0
;/	DUP		0563 XOR IF \ movsxd    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 40268C 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x563,%rax	\ 402690 	*/.byte 0x48,0x35,0x63,0x5,0x0,0x0
	test	%rax,%rax	\ 402696 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402699 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 40269D 	*/.byte 0xF,0x84,0x5D,0x0,0x0,0x0
;/	C7FD AND
/*	and	$0xC7FD,%eax	\ 4026A3 	*/.byte 0x25,0xFD,0xC7,0x0,0x0
;/	DUP		0569 XOR IF \ imul    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 4026A8 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x569,%rax	\ 4026AC 	*/.byte 0x48,0x35,0x69,0x5,0x0,0x0
	test	%rax,%rax	\ 4026B2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4026B5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 4026B9 	*/.byte 0xF,0x84,0x41,0x0,0x0,0x0
;/	C7F0 AND
/*	and	$0xC7F0,%eax	\ 4026BF 	*/.byte 0x25,0xF0,0xC7,0x0,0x0
;/	DUP		0580 XOR IF \ mov..    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 4026C4 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x580,%rax	\ 4026C8 	*/.byte 0x48,0x35,0x80,0x5,0x0,0x0
	test	%rax,%rax	\ 4026CE 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4026D1 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 4026D5 	*/.byte 0xF,0x84,0x25,0x0,0x0,0x0
;/	DUP		0580 XOR IF \ mov..    %e_x,x(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 4026DB 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x580,%rax	\ 4026DF 	*/.byte 0x48,0x35,0x80,0x5,0x0,0x0
	test	%rax,%rax	\ 4026E5 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4026E8 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402700  { RIPADR?+172  } 	\ 4026EC 	*/.byte 0xF,0x84,0xE,0x0,0x0,0x0
;/	    		05D0 = \ rol..    %e_x,x(%rip)
/*	xor	$0x5D0,%rax	\ 4026F2 	*/.byte 0x48,0x35,0xD0,0x5,0x0,0x0
/*	subq	$0x01,%rax	\ 4026F8 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4026FC 	*/.byte 0x48,0x19,0xC0
;/		EXIT
	ret		\ 4026FF C3 
;/  DUPENDCASE DROP TRUE ;
/*	movq	$-0x1,%rax	\ 402700 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 402707 C3 
;/
;/VARIABLE PREF_S 

	DQ 0xBFFFFF+fimg
;/
;/: PREF+  PREF_S @ + ;

PREFadd:
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 402710 	*/.byte 0x48,0x3,0x5,0xF1,0xFF,0xFF,0xFF
	ret		\ 402717 C3 
;/
;/: >PREF  F0 AND 40 <> 1+ PREF_S ! ;


greatPREF:
/*	and	$0xF0,%eax	\ 402718 	*/.byte 0x25,0xF0,0x0,0x0,0x0
/*	xor	$0x40,%rax	\ 40271D 	*/.byte 0x48,0x35,0x40,0x0,0x0,0x0
/*		negq	%rax	\ 402723 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 402726 	*/.byte 0x48,0x19,0xC0
/*	lea	0x01(%rax),%rax	\ 402729 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	%rax,0x402708  { RIPADR?+17A  } (%rip)	\ 40272D 	*/.byte 0x48,0x89,0x5,0xD4,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 402734 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 402738 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40273C C3 
;/
;/: OP_SHIFTS (  n OPX -- )
;/	OP0


OP_SHIFTS:
/*	mov	%rax,-0x08(%rbp)	\ 40273D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 402741 	*/.byte 0x48,0x8D,0x5,0x8,0xFB,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 402748 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	?DO
	call	0x400A59  { (?DO) } 	\ 40274C E8 8 E3 FF FF 
	.quad 0x4027D4  { OP_SHIFTS+97  } 
;/	 I @ C@ >PREF
/*	mov	%rax,-0x08(%rbp)	\ 402759 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%r14),%rax	\ 40275D 	*/.byte 0x49,0x8B,0x6
/*	movzb	(%rax),%eax	\ 402760 	*/.byte 0xF,0xB6,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402763 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402718  { >PREF } 	\ 402767 E8 AC FF FF FF 
;/	 I @ PREF+ W@ RIPADR? IF DUP NEGATE I @ PREF+ 2+ L+! THEN
/*	mov	%rax,-0x08(%rbp)	\ 40276C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%r14),%rax	\ 402770 	*/.byte 0x49,0x8B,0x6
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 402773 	*/.byte 0x48,0x3,0x5,0x8E,0xFF,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 40277A 	*/.byte 0xF,0xB7,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40277D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40258E  { RIPADR? } 	\ 402781 E8 8 FE FF FF 
	test	%rax,%rax	\ 402786 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 402789 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40278D 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x4027BA  { OP_SHIFTS+7D  } 	\ 402791 	*/.byte 0xF,0x84,0x23,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402797 	*/.byte 0x48,0x89,0x45,0xF8
/*		negq	%rax	\ 40279B 	*/.byte 0x48,0xF7,0xD8
/*	mov	%rax,-0x10(%rbp)	\ 40279E 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	(%r14),%rax	\ 4027A2 	*/.byte 0x49,0x8B,0x6
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 4027A5 	*/.byte 0x48,0x3,0x5,0x5C,0xFF,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 4027AC 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%rdx	\ 4027B0 	*/.byte 0x48,0x8B,0x55,0xF0
/*	add	%edx,(%rax)	\ 4027B4 	*/.byte 0x1,0x10
/*	mov	-0x08(%rbp),%rax	\ 4027B6 	*/.byte 0x48,0x8B,0x45,0xF8
;/	DUP I +!
/*	add	%rax,(%r14)	\ 4027BA 	*/.byte 0x49,0x1,0x6
;/	CELL +LOOP
/*	mov	%rax,-0x08(%rbp)	\ 4027BD 	*/.byte 0x48,0x89,0x45,0xF8
/*	add	$0x08,%r14	\ 4027C1 	*/.byte 0x49,0x83,0xC6,0x8
/*	add	$0x08,%r15	\ 4027C5 	*/.byte 0x49,0x83,0xC7,0x8
/*	mov	-0x08(%rbp),%rax	\ 4027C9 	*/.byte 0x48,0x8B,0x45,0xF8
	jNo	0x402759  { OP_SHIFTS+1C  } 	\ 4027CD 71 8A 
	pop	%r14	\ 4027CF 41 5E 
	pop	%r15	\ 4027D1 41 5F 
	pop	%rcx	\ 4027D3 59 
;/;
	ret		\ 4027D4 C3 
;/
;/: OPresize ( OPX shift+ -- )
;/\ изменение размера кода на величину n. OPX адрес в таблице ссылок на код.
;/\ Код сдвигается. Если n больше 0 - сдвиг в сторону старших адресов.
;/\ Если n меньше 0 - сдвиг затиранием начала кода
;/  DUP>R


OPresize:
	Push	%rax	\ 4027D5 50 
;/ OVER @ C@ >PREF
/*	mov	%rax,-0x08(%rbp)	\ 4027D6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 4027DA 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	(%rax),%rax	\ 4027DE 	*/.byte 0x48,0x8B,0x0
/*	movzb	(%rax),%eax	\ 4027E1 	*/.byte 0xF,0xB6,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4027E4 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402718  { >PREF } 	\ 4027E8 E8 2B FF FF FF 
;/ OVER @ PREF+ W@ RIPADR? IF 2DUP NEGATE SWAP @ PREF+ 2+ L+! THEN
/*	mov	%rax,-0x08(%rbp)	\ 4027ED 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 4027F1 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	(%rax),%rax	\ 4027F5 	*/.byte 0x48,0x8B,0x0
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 4027F8 	*/.byte 0x48,0x3,0x5,0x9,0xFF,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 4027FF 	*/.byte 0xF,0xB7,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402802 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40258E  { RIPADR? } 	\ 402806 E8 83 FD FF FF 
	test	%rax,%rax	\ 40280B 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40280E 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 402812 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40284B  { OPresize+76  } 	\ 402816 	*/.byte 0xF,0x84,0x2F,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rdx	\ 40281C 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402820 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 402824 	*/.byte 0x48,0x89,0x55,0xF0
/*		negq	%rax	\ 402828 	*/.byte 0x48,0xF7,0xD8
/*	mov	-0x10(%rbp),%rdx	\ 40282B 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40282F 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	(%rdx),%rax	\ 402833 	*/.byte 0x48,0x8B,0x2
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 402836 	*/.byte 0x48,0x3,0x5,0xCB,0xFE,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 40283D 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%rdx	\ 402841 	*/.byte 0x48,0x8B,0x55,0xF0
/*	add	%edx,(%rax)	\ 402845 	*/.byte 0x1,0x10
/*	mov	-0x08(%rbp),%rax	\ 402847 	*/.byte 0x48,0x8B,0x45,0xF8
;/  OVER OP_SHIFTS
/*	mov	%rax,-0x08(%rbp)	\ 40284B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40284F 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402853 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40273D  { OP_SHIFTS } 	\ 402857 E8 E1 FE FF FF 
;/  ALLOT
/*	add	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40285C 	*/.byte 0x48,0x1,0x5,0xED,0xED,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 402863 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	(%rax),%rax	\ 402867 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,0x00(%rbp)	\ 40286A 	*/.byte 0x48,0x89,0x45,0x0
;/\  @ DUP  R> +
;/\  DUP   THERE - NEGATE MOVE
;/  @ DUP R>
/*	mov	%rax,-0x08(%rbp)	\ 40286E 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 402872 58 
	test	%rax,%rax	\ 402873 48 85 C0 
/*	lea	-0x08(%rbp),%rbp	\ 402876 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  DUP 0<
/*	jNl	0x40289B  { OPresize+C6  } 	\ 40287A 	*/.byte 0xF,0x8D,0x1B,0x0,0x0,0x0
;/  IF   -  SWAP
/*		negq	%rax	\ 402880 	*/.byte 0x48,0xF7,0xD8
/*	add	0x00(%rbp),%rax	\ 402883 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	0x08(%rbp),%rdx	\ 402887 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rax,0x08(%rbp)	\ 40288B 	*/.byte 0x48,0x89,0x45,0x8
/*	mov	%rdx,%rax	\ 40288F 	*/.byte 0x48,0x89,0xD0
/*	lea	0x08(%rbp),%rbp	\ 402892 	*/.byte 0x48,0x8D,0x6D,0x8
;/  ELSE +  
/*	jmp	0x4028A3  { OPresize+CE  } 	\ 402896 	*/.byte 0xE9,0x8,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 40289B 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40289F 	*/.byte 0x48,0x8D,0x6D,0x8
;/  THEN DUP THERE - NEGATE MOVE
/*	mov	%rax,-0x08(%rbp)	\ 4028A3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 4028A7 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 4028AB 	*/.byte 0x48,0x8B,0x5,0x9E,0xED,0xFF,0xFF
/*	sub	-0x10(%rbp),%rax	\ 4028B2 	*/.byte 0x48,0x2B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 4028B6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401A27  { MOVE } 	\ 4028BA E8 68 F1 FF FF 
;/
;/;
	ret		\ 4028BF C3 
;/
;/
;/: OPinsert ( OPX n -- )
;/  DUP>R


OPinsert:
	Push	%rax	\ 4028C0 50 
;/  2DUP OPresize DROP
/*	mov	0x00(%rbp),%rdx	\ 4028C1 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4028C5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 4028C9 	*/.byte 0x48,0x89,0x55,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 4028CD 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 4028D1 E8 FF FE FF FF 
/*	mov	0x00(%rbp),%rax	\ 4028D6 	*/.byte 0x48,0x8B,0x45,0x0
;/  DUP
;/  DUP CELL + OVER OP0 -  OpBuffSize CELL- - NEGATE MOVE
/*	mov	%rax,-0x08(%rbp)	\ 4028DA 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x08(%rax),%rax	\ 4028DE 	*/.byte 0x48,0x8D,0x40,0x8
/*	mov	%rax,-0x10(%rbp)	\ 4028E2 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	-0x08(%rbp),%rax	\ 4028E6 	*/.byte 0x48,0x8B,0x45,0xF8
/*	mov	%rax,-0x18(%rbp)	\ 4028EA 	*/.byte 0x48,0x89,0x45,0xE8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 4028EE 	*/.byte 0x48,0x8D,0x5,0x5B,0xF9,0xFF,0xFF
/*		negq	%rax	\ 4028F5 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x18(%rbp),%rax	\ 4028F8 	*/.byte 0x48,0x3,0x45,0xE8
/*	lea	-0x108(%rax),%rax	\ 4028FC 	*/.byte 0x48,0x8D,0x80,0xF8,0xFE,0xFF,0xFF
/*		negq	%rax	\ 402903 	*/.byte 0x48,0xF7,0xD8
/*	lea	-0x10(%rbp),%rbp	\ 402906 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401A27  { MOVE } 	\ 40290A E8 18 F1 FF FF 
;/  R> SWAP +!
/*	mov	%rax,%rdx	\ 40290F 	*/.byte 0x48,0x89,0xC2
	pop	-0x08(%rbp)	\ 402912 8F 45 F8 
/*	mov	%rdx,%rax	\ 402915 	*/.byte 0x48,0x89,0xD0
/*	mov	-0x08(%rbp),%rdx	\ 402918 	*/.byte 0x48,0x8B,0x55,0xF8
/*	add	%rdx,(%rax)	\ 40291C 	*/.byte 0x48,0x1,0x10
/*	mov	0x00(%rbp),%rax	\ 40291F 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 402923 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 402927 C3 
;/
;/: OPsize! ( OPX n -- )
;/\ установка нового размера кода. OPX - адрес в таблице ссылок на код.
;/\ код остается на месте. Если размер меньше прежнего, код урезается в конце
;/  OVER OP_SIZE -


OPsizesave:
/*	mov	%rax,-0x08(%rbp)	\ 402928 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40292C 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rax,%rdx	\ 402930 	*/.byte 0x48,0x89,0xC2
/*	mov	-0x08(%rax),%rax	\ 402933 	*/.byte 0x48,0x8B,0x40,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 402937 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	(%rdx),%rax	\ 40293B 	*/.byte 0x48,0x8B,0x2
/*	sub	-0x10(%rbp),%rax	\ 40293E 	*/.byte 0x48,0x2B,0x45,0xF0
/*	add	-0x08(%rbp),%rax	\ 402942 	*/.byte 0x48,0x3,0x45,0xF8
;/  DUP>R
	Push	%rax	\ 402946 50 
;/  OVER OP_SHIFTS
/*	mov	%rax,-0x08(%rbp)	\ 402947 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40294B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40294F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40273D  { OP_SHIFTS } 	\ 402953 E8 E5 FD FF FF 
;/  ALLOT
/*	add	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 402958 	*/.byte 0x48,0x1,0x5,0xF1,0xEC,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 40295F 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	-0x08(%rax),%rax	\ 402963 	*/.byte 0x48,0x8B,0x40,0xF8
;/  CELL- @ DUP R> - SWAP DUP THERE - NEGATE MOVE
/*	mov	%rax,0x00(%rbp)	\ 402967 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40296B 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40296F 58 
/*		negq	%rax	\ 402970 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 402973 	*/.byte 0x48,0x3,0x45,0xF8
/*	mov	0x00(%rbp),%rdx	\ 402977 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 40297B 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 40297F 	*/.byte 0x48,0x89,0xD0
/*	mov	%rax,-0x08(%rbp)	\ 402982 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 402986 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40298A 	*/.byte 0x48,0x8B,0x5,0xBF,0xEC,0xFF,0xFF
/*	sub	-0x10(%rbp),%rax	\ 402991 	*/.byte 0x48,0x2B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 402995 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401A27  { MOVE } 	\ 402999 E8 89 F0 FF FF 
;/;
	ret		\ 40299E C3 
;/
;/: OPexcise ( OPX -- )
;/\ удаление кода вместе со ссылкой на него
;/	DUP OP0 = IF @ DP! OP1 ToOP0 BREAK


OPexcise:
/*	mov	%rax,-0x08(%rbp)	\ 40299F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 4029A3 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 4029A7 	*/.byte 0x48,0x8D,0x5,0xA2,0xF8,0xFF,0xFF
/*	xor	-0x10(%rbp),%rax	\ 4029AE 	*/.byte 0x48,0x33,0x45,0xF0
/*	subq	$0x01,%rax	\ 4029B2 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4029B6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4029B9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4029BC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4029DD  { OPexcise+3E  } 	\ 4029C0 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
/*	mov	(%rax),%rax	\ 4029C6 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4029C9 	*/.byte 0x48,0x89,0x5,0x80,0xEC,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4029D0 	*/.byte 0x48,0x8D,0x5,0x81,0xF8,0xFF,0xFF
	call	0x402487  { ToOP0 } 	\ 4029D7 E8 AB FA FF FF 
	ret		\ 4029DC C3 
;/	DUP 0 OPsize!
/*	mov	%rax,-0x08(%rbp)	\ 4029DD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 4029E1 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x0,%eax	\ 4029E5 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 4029EA 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402928  { OPsize! } 	\ 4029EE E8 35 FF FF FF 
;/	DUP>R CELL+ R@ OpBuffSize CELL- R> - OP0 + CMOVE
	Push	%rax	\ 4029F3 50 
/*	lea	0x08(%rax),%rax	\ 4029F4 	*/.byte 0x48,0x8D,0x40,0x8
/*	mov	%rax,-0x08(%rbp)	\ 4029F8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rsp),%rax	\ 4029FC 	*/.byte 0x48,0x8B,0x4,0x24
/*	mov	%rax,-0x10(%rbp)	\ 402A00 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$0x108,-0x18(%rbp)	\ 402A04 	*/.byte 0x48,0xC7,0x45,0xE8,0x8,0x1,0x0,0x0
	pop	%rax	\ 402A0C 58 
/*		negq	%rax	\ 402A0D 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x18(%rbp),%rax	\ 402A10 	*/.byte 0x48,0x3,0x45,0xE8
/*	mov	%rax,-0x18(%rbp)	\ 402A14 	*/.byte 0x48,0x89,0x45,0xE8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 402A18 	*/.byte 0x48,0x8D,0x5,0x31,0xF8,0xFF,0xFF
/*	add	-0x18(%rbp),%rax	\ 402A1F 	*/.byte 0x48,0x3,0x45,0xE8
/*	lea	-0x10(%rbp),%rbp	\ 402A23 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4009EE  { CMOVE } 	\ 402A27 E8 C2 DF FF FF 
;/;
	ret		\ 402A2C C3 
;/
;/: EVEN-EAX OFF-EAX


EVENsubEAX:
/*	mov	%rax,-0x08(%rbp)	\ 402A2D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 402A31 	*/.byte 0x48,0x8B,0x5,0xF6,0xF7,0xFF,0xFF
	test	%rax,%rax	\ 402A38 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402A3B 	*/.byte 0x48,0x8B,0x45,0xF8
;/   IF      M\ 1000 DTST
/*	jz	0x402B40  { EVEN-EAX+113  } 	\ 402A3F 	*/.byte 0xF,0x84,0xFB,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402A45 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1000,%eax	\ 402A49 	*/.byte 0xB8,0x0,0x10,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402A4E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 402A52 E8 FA FA FF FF 
;/	SetOP 48 C, 
	call	0x40240E  { SetOP } 	\ 402A57 E8 B2 F9 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 402A5C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x48,%eax	\ 402A60 	*/.byte 0xB8,0x48,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402A65 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 402A69 E8 80 EC FF FF 
;/	OFF-EAX DUP SHORT?
/*	mov	%rax,-0x08(%rbp)	\ 402A6E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 402A72 	*/.byte 0x48,0x8B,0x5,0xB5,0xF7,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 402A79 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 402A7D 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401FD6  { SHORT? } 	\ 402A81 E8 50 F5 FF FF 
;/     IF		J_COD IF c083 ELSE 408D THEN W, C,
	test	%rax,%rax	\ 402A86 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 402A89 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 402A8D 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x402ADD  { EVEN-EAX+B0  } 	\ 402A91 	*/.byte 0xF,0x84,0x46,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402A97 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 402A9B 	*/.byte 0x48,0x8B,0x5,0x4B,0xF7,0xFF,0xFF
	test	%rax,%rax	\ 402AA2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402AA5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402AC1  { EVEN-EAX+94  } 	\ 402AA9 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402AAF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC083,%eax	\ 402AB3 	*/.byte 0xB8,0x83,0xC0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402AB8 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jmp	0x402ACE  { EVEN-EAX+A1  } 	\ 402ABC 	*/.byte 0xE9,0xD,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402AC1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x408D,%eax	\ 402AC5 	*/.byte 0xB8,0x8D,0x40,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402ACA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 402ACE E8 F9 EB FF FF 
	call	0x4016EE  { C, } 	\ 402AD3 E8 16 EC FF FF 
;/     ELSE	J_COD IF 5 C, ELSE 808D W, THEN  L,
/*	jmp	0x402B23  { EVEN-EAX+F6  } 	\ 402AD8 	*/.byte 0xE9,0x46,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402ADD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 402AE1 	*/.byte 0x48,0x8B,0x5,0x5,0xF7,0xFF,0xFF
	test	%rax,%rax	\ 402AE8 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402AEB 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402B0C  { EVEN-EAX+DF  } 	\ 402AEF 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402AF5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5,%eax	\ 402AF9 	*/.byte 0xB8,0x5,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402AFE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 402B02 E8 E7 EB FF FF 
/*	jmp	0x402B1E  { EVEN-EAX+F1  } 	\ 402B07 	*/.byte 0xE9,0x12,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402B0C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x808D,%eax	\ 402B10 	*/.byte 0xB8,0x8D,0x80,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402B15 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 402B19 E8 AE EB FF FF 
	call	0x4016AB  { L, } 	\ 402B1E E8 88 EB FF FF 
;/     THEN   \  LEA   EAX,  OFF-EBP [EAX]
;/     0 TO OFF-EAX
/*	movq	$0x0,0x40222E  { OFF-EAX+5  } (%rip)	\ 402B23 	*/.byte 0x48,0xC7,0x5,0x0,0xF7,0xFF,0xFF,0x0,0x0,0x0,0x0
;/       M\ 1001 DTST
/*	mov	%rax,-0x08(%rbp)	\ 402B2E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1001,%eax	\ 402B32 	*/.byte 0xB8,0x1,0x10,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402B37 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 402B3B E8 11 FA FF FF 
;/   THEN
;/;
	ret		\ 402B40 C3 
;/
;/: EVEN-EBP OFF-EBP


EVENsubEBP:
/*	mov	%rax,-0x08(%rbp)	\ 402B41 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 402B45 	*/.byte 0x48,0x8B,0x5,0xD5,0xF6,0xFF,0xFF
	test	%rax,%rax	\ 402B4C 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402B4F 	*/.byte 0x48,0x8B,0x45,0xF8
;/   IF SetOP
/*	jz	0x402BA1  { EVEN-EBP+60  } 	\ 402B53 	*/.byte 0xF,0x84,0x48,0x0,0x0,0x0
	call	0x40240E  { SetOP } 	\ 402B59 E8 B0 F8 FF FF 
;/  48 C, 06D8D W, OFF-EBP C, \   LEA   ebp,  OFF-EBP [EBP]
/*	mov	%rax,-0x08(%rbp)	\ 402B5E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x48,%eax	\ 402B62 	*/.byte 0xB8,0x48,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402B67 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 402B6B E8 7E EB FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 402B70 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x6D8D,%eax	\ 402B74 	*/.byte 0xB8,0x8D,0x6D,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 402B79 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 402B7D E8 4A EB FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 402B82 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 402B86 	*/.byte 0x48,0x8B,0x5,0x94,0xF6,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 402B8D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 402B91 E8 58 EB FF FF 
;/      0 TO OFF-EBP
/*	movq	$0x0,0x402221  { OFF-EBP+5  } (%rip)	\ 402B96 	*/.byte 0x48,0xC7,0x5,0x80,0xF6,0xFF,0xFF,0x0,0x0,0x0,0x0
;/   THEN
;/;
	ret		\ 402BA1 C3 
;/
;/: +>OFF-EBP ( C -- )
;/   C>S OFF-EBP + TO OFF-EBP ;


addgreatOFFsubEBP:
/*	movsbq	%al,%rax	\ 402BA2 	*/.byte 0x48,0xF,0xBE,0xC0
/*	add	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 402BA6 	*/.byte 0x48,0x3,0x5,0x74,0xF6,0xFF,0xFF
/*	mov	%rax,0x402221  { OFF-EBP+5  } (%rip)	\ 402BAD 	*/.byte 0x48,0x89,0x5,0x6D,0xF6,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 402BB4 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 402BB8 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 402BBC C3 
;/
;/: ADD|OR|AND|XOR<>  ( l -- FLAG )
;/  FFFFFF AND


ADDlORlANDlXORlessgreat:
/*	and	$fimg+0xBFFFFF,%eax	\ 402BBD 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/   CASE
;/	DUP	450348 XOR IF \ ADD
/*	mov	%rax,-0x08(%rbp)	\ 402BC2 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x50348,%rax	\ 402BC6 	*/.byte 0x48,0x35,0x48,0x3,0x45,0x0
	test	%rax,%rax	\ 402BCC 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402BCF 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402C26  { ADD|OR|AND|XOR<>+69  } 	\ 402BD3 	*/.byte 0xF,0x84,0x4D,0x0,0x0,0x0
;/	DUP	450B48 XOR IF \  OR
/*	mov	%rax,-0x08(%rbp)	\ 402BD9 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x50B48,%rax	\ 402BDD 	*/.byte 0x48,0x35,0x48,0xB,0x45,0x0
	test	%rax,%rax	\ 402BE3 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402BE6 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402C26  { ADD|OR|AND|XOR<>+69  } 	\ 402BEA 	*/.byte 0xF,0x84,0x36,0x0,0x0,0x0
;/	DUP	452348 XOR IF \ AND
/*	mov	%rax,-0x08(%rbp)	\ 402BF0 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x52348,%rax	\ 402BF4 	*/.byte 0x48,0x35,0x48,0x23,0x45,0x0
	test	%rax,%rax	\ 402BFA 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402BFD 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402C26  { ADD|OR|AND|XOR<>+69  } 	\ 402C01 	*/.byte 0xF,0x84,0x1F,0x0,0x0,0x0
;/	DUP	453348 XOR IF \ XOR
/*	mov	%rax,-0x08(%rbp)	\ 402C07 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x53348,%rax	\ 402C0B 	*/.byte 0x48,0x35,0x48,0x33,0x45,0x0
	test	%rax,%rax	\ 402C11 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402C14 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402C26  { ADD|OR|AND|XOR<>+69  } 	\ 402C18 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
;/             DROP TRUE EXIT
/*	movq	$-0x1,%rax	\ 402C1E 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 402C25 C3 
;/  DUPENDCASE DROP FALSE ;
/*	mov	$0x0,%eax	\ 402C26 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 402C2B C3 
;/
;/: -EVEN-EBP
;/     OP0 @ :-SET


subEVENsubEBP:
/*	mov	%rax,-0x08(%rbp)	\ 402C2C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 402C30 	*/.byte 0x48,0x8B,0x5,0x19,0xF6,0xFF,0xFF
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 402C37 	*/.byte 0x48,0x3B,0x5,0x37,0xF7,0xFF,0xFF
/*	sbb	%rax,%rax	\ 402C3E 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 402C41 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402C44 	*/.byte 0x48,0x8B,0x45,0xF8
;/ U< IF BREAK
/*	jz	0x402C4F  { -EVEN-EBP+23  } 	\ 402C48 	*/.byte 0xF,0x84,0x1,0x0,0x0,0x0
	ret		\ 402C4E C3 
;/     OP0 @ L@ FFFFFF AND 06D8D48 =  \  LEA   ebp,  OFF-EBP [EBP]
/*	mov	%rax,-0x08(%rbp)	\ 402C4F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 402C53 	*/.byte 0x48,0x8B,0x5,0xF6,0xF5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 402C5A 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 402C5C 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x2D8D48,%rax	\ 402C61 	*/.byte 0x48,0x35,0x48,0x8D,0x6D,0x0
/*	subq	$0x01,%rax	\ 402C67 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 402C6B 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 402C6E 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402C71 	*/.byte 0x48,0x8B,0x45,0xF8
;/     IF  OP0 @ 3 + C@ +>OFF-EBP
/*	jz	0x402CB5  { -EVEN-EBP+89  } 	\ 402C75 	*/.byte 0xF,0x84,0x3A,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402C7B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 402C7F 	*/.byte 0x48,0x8B,0x5,0xCA,0xF5,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 402C86 	*/.byte 0xF,0xB6,0x40,0x3
/*	movsbq	%al,%rax	\ 402C8A 	*/.byte 0x48,0xF,0xBE,0xC0
/*	add	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 402C8E 	*/.byte 0x48,0x3,0x5,0x8C,0xF5,0xFF,0xFF
/*	mov	%rax,0x402221  { OFF-EBP+5  } (%rip)	\ 402C95 	*/.byte 0x48,0x89,0x5,0x85,0xF5,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 402C9C 	*/.byte 0x48,0x8D,0x5,0xB5,0xF5,0xFF,0xFF
;/         OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 402CA3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 402CA7 E8 DB F7 FF FF 
;/        -4 ALLOT EXIT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 402CAC 	*/.byte 0x48,0x83,0x5,0x9C,0xE9,0xFF,0xFF,0xFC
	ret		\ 402CB4 C3 
;/     THEN ;
	ret		\ 402CB5 C3 
;/
;/
;/: DUP2B? ( w -- w flg )
;/  DUP


DUP2Bque:
/*	mov	%rax,-0x08(%rbp)	\ 402CB6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 402CBA 	*/.byte 0x48,0x89,0x45,0xF0
;/   CASE
;/  DUP		1088	XOR IF \	mov    %dl,(%rax)
/*	xor	$0x1088,%rax	\ 402CBE 	*/.byte 0x48,0x35,0x88,0x10,0x0,0x0
	test	%rax,%rax	\ 402CC4 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 402CC7 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 402CCB 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402CCF 	*/.byte 0xF,0x84,0x71,0x1,0x0,0x0
;/  DUP		1089	XOR IF \	mov    %edx,(%rax)
/*	mov	%rax,-0x08(%rbp)	\ 402CD5 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x1089,%rax	\ 402CD9 	*/.byte 0x48,0x35,0x89,0x10,0x0,0x0
	test	%rax,%rax	\ 402CDF 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402CE2 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402CE6 	*/.byte 0xF,0x84,0x5A,0x1,0x0,0x0
;/  DUP		1001	XOR IF \	add     %rdx,(%rax)
/*	mov	%rax,-0x08(%rbp)	\ 402CEC 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x1001,%rax	\ 402CF0 	*/.byte 0x48,0x35,0x1,0x10,0x0,0x0
	test	%rax,%rax	\ 402CF6 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402CF9 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402CFD 	*/.byte 0xF,0x84,0x43,0x1,0x0,0x0
;/  DUP		C019	XOR IF \	sbb     %eax,%eax
/*	mov	%rax,-0x08(%rbp)	\ 402D03 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xC019,%rax	\ 402D07 	*/.byte 0x48,0x35,0x19,0xC0,0x0,0x0
	test	%rax,%rax	\ 402D0D 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402D10 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402D14 	*/.byte 0xF,0x84,0x2C,0x1,0x0,0x0
;/  DUP		C063	XOR IF \	movslq %eax,%rax
/*	mov	%rax,-0x08(%rbp)	\ 402D1A 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xC063,%rax	\ 402D1E 	*/.byte 0x48,0x35,0x63,0xC0,0x0,0x0
	test	%rax,%rax	\ 402D24 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402D27 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402D2B 	*/.byte 0xF,0x84,0x15,0x1,0x0,0x0
;/  DUP		D031	XOR IF \	xor     %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 402D31 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xD031,%rax	\ 402D35 	*/.byte 0x48,0x35,0x31,0xD0,0x0,0x0
	test	%rax,%rax	\ 402D3B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402D3E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402D42 	*/.byte 0xF,0x84,0xFE,0x0,0x0,0x0
;/  DUP		D029	XOR IF \	sub     %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 402D48 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xD029,%rax	\ 402D4C 	*/.byte 0x48,0x35,0x29,0xD0,0x0,0x0
	test	%rax,%rax	\ 402D52 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402D55 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402D59 	*/.byte 0xF,0x84,0xE7,0x0,0x0,0x0
;/  DUP		008B	XOR IF \	mov	(%rax),%eax
/*	mov	%rax,-0x08(%rbp)	\ 402D5F 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x8B,%rax	\ 402D63 	*/.byte 0x48,0x35,0x8B,0x0,0x0,0x0
	test	%rax,%rax	\ 402D69 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402D6C 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402D70 	*/.byte 0xF,0x84,0xD0,0x0,0x0,0x0
;/  DUP		00FF	XOR IF \	incl	(%rax)
/*	mov	%rax,-0x08(%rbp)	\ 402D76 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xFF,%rax	\ 402D7A 	*/.byte 0x48,0x35,0xFF,0x0,0x0,0x0
	test	%rax,%rax	\ 402D80 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402D83 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402D87 	*/.byte 0xF,0x84,0xB9,0x0,0x0,0x0
;/  DUP		028B	XOR IF \	mov	(%rdx),%eax
/*	mov	%rax,-0x08(%rbp)	\ 402D8D 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x28B,%rax	\ 402D91 	*/.byte 0x48,0x35,0x8B,0x2,0x0,0x0
	test	%rax,%rax	\ 402D97 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402D9A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402D9E 	*/.byte 0xF,0x84,0xA2,0x0,0x0,0x0
;/  DUP		F9F7	XOR IF \	idiv   %ecx
/*	mov	%rax,-0x08(%rbp)	\ 402DA4 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xF9F7,%rax	\ 402DA8 	*/.byte 0x48,0x35,0xF7,0xF9,0x0,0x0
	test	%rax,%rax	\ 402DAE 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402DB1 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402DB5 	*/.byte 0xF,0x84,0x8B,0x0,0x0,0x0
;/  DUP		9948	XOR IF \	cqto
/*	mov	%rax,-0x08(%rbp)	\ 402DBB 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x9948,%rax	\ 402DBF 	*/.byte 0x48,0x35,0x48,0x99,0x0,0x0
	test	%rax,%rax	\ 402DC5 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402DC8 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402DCC 	*/.byte 0xF,0x84,0x74,0x0,0x0,0x0
;/  DUP E4FC AND	C088	XOR IF \   mov    %e<abcd>x,%e<abcd>x
/*	mov	%rax,-0x08(%rbp)	\ 402DD2 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xE4FC,%eax	\ 402DD6 	*/.byte 0x25,0xFC,0xE4,0x0,0x0
/*	xor	$0xC088,%eax	\ 402DDB 	*/.byte 0x35,0x88,0xC0,0x0,0x0
	test	%rax,%rax	\ 402DE0 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402DE3 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402DE7 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
;/  DUP E7FC AND	E0D0	XOR IF \ s<a|h>r	$1,%rax
/*	mov	%rax,-0x08(%rbp)	\ 402DED 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xE7FC,%eax	\ 402DF1 	*/.byte 0x25,0xFC,0xE7,0x0,0x0
/*	xor	$0xE0D0,%eax	\ 402DF6 	*/.byte 0x35,0xD0,0xE0,0x0,0x0
	test	%rax,%rax	\ 402DFB 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402DFE 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402E02 	*/.byte 0xF,0x84,0x3E,0x0,0x0,0x0
;/  F6FF AND
/*	and	$0xF6FF,%eax	\ 402E08 	*/.byte 0x25,0xFF,0xF6,0x0,0x0
;/  DUP		C0FF	XOR IF \ <in|de>cq	%eax
/*	mov	%rax,-0x08(%rbp)	\ 402E0D 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xC0FF,%rax	\ 402E11 	*/.byte 0x48,0x35,0xFF,0xC0,0x0,0x0
	test	%rax,%rax	\ 402E17 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402E1A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402E1E 	*/.byte 0xF,0x84,0x22,0x0,0x0,0x0
;/  F0FE AND
/*	and	$0xF0FE,%eax	\ 402E24 	*/.byte 0x25,0xFE,0xF0,0x0,0x0
;/  DUP		D0F6	XOR IF \ n<ot|eg>	%eax
/*	mov	%rax,-0x08(%rbp)	\ 402E29 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xD0F6,%rax	\ 402E2D 	*/.byte 0x48,0x35,0xF6,0xD0,0x0,0x0
	test	%rax,%rax	\ 402E33 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402E36 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402E46  { DUP2B?+190  } 	\ 402E3A 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
;/ DROP  FALSE  EXIT
/*	mov	$0x0,%eax	\ 402E40 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 402E45 C3 
;/   DUPENDCASE DROP TRUE ;
/*	movq	$-0x1,%rax	\ 402E46 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 402E4D C3 
;/
;/: DUP3B?[EBP]  ( u -- u FLAG )
;/  DUP FFFF AND


DUP3BquexcEBPyc:
/*	mov	%rax,-0x08(%rbp)	\ 402E4E 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFFFF,%eax	\ 402E52 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 402E57 	*/.byte 0x48,0x89,0x45,0xF0
;/   CASE
;/  DUP E7FC AND	4588	XOR IF \ mov    0x_(%rbp),%e<abcd>x | %e<abcd>x,0x_(%rbp)
/*	and	$0xE7FC,%eax	\ 402E5B 	*/.byte 0x25,0xFC,0xE7,0x0,0x0
/*	xor	$0x4588,%eax	\ 402E60 	*/.byte 0x35,0x88,0x45,0x0,0x0
	test	%rax,%rax	\ 402E65 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 402E68 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 402E6C 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x402EC5  { DUP3B?[EBP]+77  } 	\ 402E70 	*/.byte 0xF,0x84,0x4F,0x0,0x0,0x0
;/  DUP FFC5 AND	4501	XOR IF \ add|or|adc|sbb|and|sub|xor|cmp  0x_(%rbp),%eax | %eax,0x_(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 402E76 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFFC5,%eax	\ 402E7A 	*/.byte 0x25,0xC5,0xFF,0x0,0x0
/*	xor	$0x4501,%eax	\ 402E7F 	*/.byte 0x35,0x1,0x45,0x0,0x0
	test	%rax,%rax	\ 402E84 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402E87 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402EC5  { DUP3B?[EBP]+77  } 	\ 402E8B 	*/.byte 0xF,0x84,0x34,0x0,0x0,0x0
;/  DUP		558B	XOR IF \ mov 0x00(%rbp),%edx
/*	mov	%rax,-0x08(%rbp)	\ 402E91 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x558B,%rax	\ 402E95 	*/.byte 0x48,0x35,0x8B,0x55,0x0,0x0
	test	%rax,%rax	\ 402E9B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402E9E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402EC5  { DUP3B?[EBP]+77  } 	\ 402EA2 	*/.byte 0xF,0x84,0x1D,0x0,0x0,0x0
;/  DUP		6DF7	XOR IF \ imulL   0x00(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 402EA8 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x6DF7,%rax	\ 402EAC 	*/.byte 0x48,0x35,0xF7,0x6D,0x0,0x0
	test	%rax,%rax	\ 402EB2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402EB5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402EC5  { DUP3B?[EBP]+77  } 	\ 402EB9 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
;/            DROP FALSE EXIT
/*	mov	$0x0,%eax	\ 402EBF 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 402EC4 C3 
;/  DUPENDCASE DROP TRUE ;
/*	movq	$-0x1,%rax	\ 402EC5 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 402ECC C3 
;/
;/: DUP3B? ( u -- u flg )
;/  DUP 


DUP3Bque:
/*	mov	%rax,-0x08(%rbp)	\ 402ECD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 402ED1 	*/.byte 0x48,0x89,0x45,0xF0
;/  DUP FF AND 48 = IF 8 >> DUP2B? NIP BREAK  \ rex.w
/*	and	$0xFF,%eax	\ 402ED5 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 402EDA 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 402EE0 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 402EE4 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 402EE7 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 402EEA 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 402EEE 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x402F06  { DUP3B?+39  } 	\ 402EF2 	*/.byte 0xF,0x84,0xE,0x0,0x0,0x0
/*	shr	$0x08,%rax	\ 402EF8 	*/.byte 0x48,0xC1,0xE8,0x8
	call	0x402CB6  { DUP2B? } 	\ 402EFC E8 B5 FD FF FF 
/*	lea	0x08(%rbp),%rbp	\ 402F01 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 402F05 C3 
;/   CASE
;/ FFFFFF AND
/*	and	$fimg+0xBFFFFF,%eax	\ 402F06 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/  
;/  DUP		00B60F	XOR IF \ movzbl  (%rax),%eax 
/*	mov	%rax,-0x08(%rbp)	\ 402F0B 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xB60F,%rax	\ 402F0F 	*/.byte 0x48,0x35,0xF,0xB6,0x0,0x0
	test	%rax,%rax	\ 402F15 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402F18 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402F1C 	*/.byte 0xF,0x84,0x24,0x1,0x0,0x0
;/  DUP		00B70F	XOR IF \ movzwl  (%rax),%eax 
/*	mov	%rax,-0x08(%rbp)	\ 402F22 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xB70F,%rax	\ 402F26 	*/.byte 0x48,0x35,0xF,0xB7,0x0,0x0
	test	%rax,%rax	\ 402F2C 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402F2F 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402F33 	*/.byte 0xF,0x84,0xD,0x1,0x0,0x0
;/  DUP		C0BE0F	XOR IF \ movsbl %al,%eax
/*	mov	%rax,-0x08(%rbp)	\ 402F39 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x80BE0F,%rax	\ 402F3D 	*/.byte 0x48,0x35,0xF,0xBE,0xC0,0x0
	test	%rax,%rax	\ 402F43 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402F46 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402F4A 	*/.byte 0xF,0x84,0xF6,0x0,0x0,0x0
;/  DUP		C0BF0F	XOR IF \ movswl %ax,%eax
/*	mov	%rax,-0x08(%rbp)	\ 402F50 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x80BF0F,%rax	\ 402F54 	*/.byte 0x48,0x35,0xF,0xBF,0xC0,0x0
	test	%rax,%rax	\ 402F5A 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402F5D 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402F61 	*/.byte 0xF,0x84,0xDF,0x0,0x0,0x0
;/  DUP		C09F0F	XOR IF \ setg	%al
/*	mov	%rax,-0x08(%rbp)	\ 402F67 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x809F0F,%rax	\ 402F6B 	*/.byte 0x48,0x35,0xF,0x9F,0xC0,0x0
	test	%rax,%rax	\ 402F71 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402F74 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402F78 	*/.byte 0xF,0x84,0xC8,0x0,0x0,0x0
;/  DUP		C09C0F	XOR IF \ setl	%al
/*	mov	%rax,-0x08(%rbp)	\ 402F7E 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x809C0F,%rax	\ 402F82 	*/.byte 0x48,0x35,0xF,0x9C,0xC0,0x0
	test	%rax,%rax	\ 402F88 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402F8B 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402F8F 	*/.byte 0xF,0x84,0xB1,0x0,0x0,0x0
;/  DUP		108966	XOR IF \ mov     %dx,(%rax)
/*	mov	%rax,-0x08(%rbp)	\ 402F95 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x108966,%rax	\ 402F99 	*/.byte 0x48,0x35,0x66,0x89,0x10,0x0
	test	%rax,%rax	\ 402F9F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402FA2 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402FA6 	*/.byte 0xF,0x84,0x9A,0x0,0x0,0x0
;/ FFFF AND
/*	and	$0xFFFF,%eax	\ 402FAC 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
;/  DUP		E883	XOR IF \ sub	$_,%rax
/*	mov	%rax,-0x08(%rbp)	\ 402FB1 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xE883,%rax	\ 402FB5 	*/.byte 0x48,0x35,0x83,0xE8,0x0,0x0
	test	%rax,%rax	\ 402FBB 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402FBE 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402FC2 	*/.byte 0xF,0x84,0x7E,0x0,0x0,0x0
;/  DUP		408B	XOR IF \ mov    0x_(%rax),%eax
/*	mov	%rax,-0x08(%rbp)	\ 402FC8 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x408B,%rax	\ 402FCC 	*/.byte 0x48,0x35,0x8B,0x40,0x0,0x0
	test	%rax,%rax	\ 402FD2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402FD5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402FD9 	*/.byte 0xF,0x84,0x67,0x0,0x0,0x0
;/  DUP		408D	XOR IF \ lea    -0x70(%rax),%eax
/*	mov	%rax,-0x08(%rbp)	\ 402FDF 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x408D,%rax	\ 402FE3 	*/.byte 0x48,0x35,0x8D,0x40,0x0,0x0
	test	%rax,%rax	\ 402FE9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402FEC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 402FF0 	*/.byte 0xF,0x84,0x50,0x0,0x0,0x0
;/  DUP		508D	XOR IF \ lea 0x_(%rax),%rdx
/*	mov	%rax,-0x08(%rbp)	\ 402FF6 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x508D,%rax	\ 402FFA 	*/.byte 0x48,0x35,0x8D,0x50,0x0,0x0
	test	%rax,%rax	\ 403000 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403003 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 403007 	*/.byte 0xF,0x84,0x39,0x0,0x0,0x0
;/  DUP		048D	XOR IF \ lea (%rax,%rax),%rax
/*	mov	%rax,-0x08(%rbp)	\ 40300D 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x48D,%rax	\ 403011 	*/.byte 0x48,0x35,0x8D,0x4,0x0,0x0
	test	%rax,%rax	\ 403017 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40301A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 40301E 	*/.byte 0xF,0x84,0x22,0x0,0x0,0x0
;/C7FE AND
/*	and	$0xC7FE,%eax	\ 403024 	*/.byte 0x25,0xFE,0xC7,0x0,0x0
;/  DUP		C0C0	XOR IF \ rol..sar $X,%al
/*	mov	%rax,-0x08(%rbp)	\ 403029 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xC0C0,%rax	\ 40302D 	*/.byte 0x48,0x35,0xC0,0xC0,0x0,0x0
	test	%rax,%rax	\ 403033 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403036 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403046  { DUP3B?+179  } 	\ 40303A 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
;/	DROP FALSE EXIT
/*	mov	$0x0,%eax	\ 403040 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 403045 C3 
;/  DUPENDCASE DROP TRUE ;
/*	movq	$-0x1,%rax	\ 403046 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 40304D C3 
;/
;/: DUP4B? ( u -- u flg )
;/  DUP FF AND 48 = IF DUP 8 >> DUP3B? NIP BREAK  \ rex.w


DUP4Bque:
/*	mov	%rax,-0x08(%rbp)	\ 40304E 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFF,%eax	\ 403052 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 403057 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40305D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403061 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403064 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403067 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403087  { DUP4B?+39  } 	\ 40306B 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403071 	*/.byte 0x48,0x89,0x45,0xF8
/*	shr	$0x08,%rax	\ 403075 	*/.byte 0x48,0xC1,0xE8,0x8
/*	lea	-0x08(%rbp),%rbp	\ 403079 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402ECD  { DUP3B? } 	\ 40307D E8 4B FE FF FF 
/*	lea	0x08(%rbp),%rbp	\ 403082 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403086 C3 
;/   CASE
;/  DUP	40B60F	XOR IF \ movzbl X(%rax),%eax
/*	mov	%rax,-0x08(%rbp)	\ 403087 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0xB60F,%rax	\ 40308B 	*/.byte 0x48,0x35,0xF,0xB6,0x40,0x0
	test	%rax,%rax	\ 403091 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403094 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4030B4  { DUP4B?+66  } 	\ 403098 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
;/  DUP	40B70F	= EXIT \ movzwl	X(%rax),%eax             
/*	mov	%rax,-0x08(%rbp)	\ 40309E 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0xB70F,%rax	\ 4030A2 	*/.byte 0x48,0x35,0xF,0xB7,0x40,0x0
/*	subq	$0x01,%rax	\ 4030A8 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4030AC 	*/.byte 0x48,0x19,0xC0
/*	lea	-0x08(%rbp),%rbp	\ 4030AF 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 4030B3 C3 
;/  DUPENDCASE  TRUE ;
/*	mov	%rax,-0x08(%rbp)	\ 4030B4 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1,%rax	\ 4030B8 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4030BF 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 4030C3 C3 
;/
;/
;/: DUP5B? ( u -- u flg )
;/  DUP


DUP5Bque:
/*	mov	%rax,-0x08(%rbp)	\ 4030C4 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFF,%eax	\ 4030C8 	*/.byte 0x25,0xFF,0x0,0x0,0x0
;/   CASE
;/ FF AND
/*	mov	%rax,-0x10(%rbp)	\ 4030CD 	*/.byte 0x48,0x89,0x45,0xF0
;/  DUP	B8 XOR IF \ mov    $_,%eax
/*	xor	$0xB8,%rax	\ 4030D1 	*/.byte 0x48,0x35,0xB8,0x0,0x0,0x0
	test	%rax,%rax	\ 4030D7 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 4030DA 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 4030DE 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x40310A  { DUP5B?+46  } 	\ 4030E2 	*/.byte 0xF,0x84,0x22,0x0,0x0,0x0
;/ CF AND
/*	and	$0xCF,%eax	\ 4030E8 	*/.byte 0x25,0xCF,0x0,0x0,0x0
;/  DUP	05 XOR IF \ sub	$_,%eax
/*	mov	%rax,-0x08(%rbp)	\ 4030ED 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x5,%rax	\ 4030F1 	*/.byte 0x48,0x35,0x5,0x0,0x0,0x0
	test	%rax,%rax	\ 4030F7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4030FA 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40310A  { DUP5B?+46  } 	\ 4030FE 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
;/	DROP FALSE EXIT
/*	mov	$0x0,%eax	\ 403104 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 403109 C3 
;/  DUPENDCASE DROP TRUE ;
/*	movq	$-0x1,%rax	\ 40310A 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 403111 C3 
;/
;/: DUP6B?  ( u -- u FLAG )
;/  DUP FF AND 48 = IF DUP 8 >> DUP5B? NIP BREAK  \ rex.w


DUP6Bque:
/*	mov	%rax,-0x08(%rbp)	\ 403112 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFF,%eax	\ 403116 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 40311B 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403121 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403125 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403128 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40312B 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40314B  { DUP6B?+39  } 	\ 40312F 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403135 	*/.byte 0x48,0x89,0x45,0xF8
/*	shr	$0x08,%rax	\ 403139 	*/.byte 0x48,0xC1,0xE8,0x8
/*	lea	-0x08(%rbp),%rbp	\ 40313D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4030C4  { DUP5B? } 	\ 403141 E8 7E FF FF FF 
/*	lea	0x08(%rbp),%rbp	\ 403146 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40314A C3 
;/  DUP FFFF AND
/*	mov	%rax,-0x08(%rbp)	\ 40314B 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFFFF,%eax	\ 40314F 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 403154 	*/.byte 0x48,0x89,0x45,0xF0
;/   CASE
;/  DUP		00C7	XOR IF \ movq	$_,(%rax)
/*	xor	$0xC7,%rax	\ 403158 	*/.byte 0x48,0x35,0xC7,0x0,0x0,0x0
	test	%rax,%rax	\ 40315E 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 403161 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 403165 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x403175  { DUP6B?+63  } 	\ 403169 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
;/            DROP FALSE EXIT
/*	mov	$0x0,%eax	\ 40316F 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 403174 C3 
;/  DUPENDCASE DROP TRUE ;
/*	movq	$-0x1,%rax	\ 403175 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 40317C C3 
;/
;/: DUP4B?[EBP] ( u -- u flg )
;/  DUP 


DUP4BquexcEBPyc:
/*	mov	%rax,-0x08(%rbp)	\ 40317D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 403181 	*/.byte 0x48,0x89,0x45,0xF0
;/  DUP FF AND 48 = IF 8 >> DUP3B?[EBP] NIP BREAK
/*	and	$0xFF,%eax	\ 403185 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 40318A 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403190 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403194 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403197 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40319A 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 40319E 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x4031B6  { DUP4B?[EBP]+39  } 	\ 4031A2 	*/.byte 0xF,0x84,0xE,0x0,0x0,0x0
/*	shr	$0x08,%rax	\ 4031A8 	*/.byte 0x48,0xC1,0xE8,0x8
	call	0x402E4E  { DUP3B?[EBP] } 	\ 4031AC E8 9D FC FF FF 
/*	lea	0x08(%rbp),%rbp	\ 4031B1 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4031B5 C3 
;/   CASE
;/ FFFFFF AND
/*	and	$fimg+0xBFFFFF,%eax	\ 4031B6 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/  DUP FFF0FF AND 45400F	XOR IF \ cmov_  0x0(%rbp),%rax
/*	mov	%rax,-0x08(%rbp)	\ 4031BB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 4031BF 	*/.byte 0x48,0x89,0x45,0xF0
/*	and	$fimg+0xBFF0FF,%eax	\ 4031C3 	*/.byte 0x25,0xFF,0xF0,0xFF,0x0
/*	xor	$fimg+0x5400F,%eax	\ 4031C8 	*/.byte 0x35,0xF,0x40,0x45,0x0
	test	%rax,%rax	\ 4031CD 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4031D0 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4031E0  { DUP4B?[EBP]+63  } 	\ 4031D4 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
;/            DROP FALSE EXIT
/*	mov	$0x0,%eax	\ 4031DA 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 4031DF C3 
;/  DUPENDCASE DROP TRUE ;
/*	movq	$-0x1,%rax	\ 4031E0 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 4031E7 C3 
;/
;/: DUP5B?[EBP] ( u -- u flg )
;/  DUP FF AND 48 = IF DUP 8 >> DUP4B?[EBP] NIP BREAK  \ 3b have meanings


DUP5BquexcEBPyc:
/*	mov	%rax,-0x08(%rbp)	\ 4031E8 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFF,%eax	\ 4031EC 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 4031F1 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 4031F7 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4031FB 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4031FE 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403201 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403221  { DUP5B?[EBP]+39  } 	\ 403205 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40320B 	*/.byte 0x48,0x89,0x45,0xF8
/*	shr	$0x08,%rax	\ 40320F 	*/.byte 0x48,0xC1,0xE8,0x8
/*	lea	-0x08(%rbp),%rbp	\ 403213 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40317D  { DUP4B?[EBP] } 	\ 403217 E8 61 FF FF FF 
/*	lea	0x08(%rbp),%rbp	\ 40321C 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403220 C3 
;/  0 ;
/*	mov	%rax,-0x08(%rbp)	\ 403221 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 403225 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40322A 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40322E C3 
;/
;/: DUP6B?IP  ( u -- u FLAG )
;/  DUP


DUP6BqueIP:
/*	mov	%rax,-0x08(%rbp)	\ 40322F 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFFFF,%eax	\ 403233 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
;/   CASE
;/  FFFF AND
/*	mov	%rax,-0x10(%rbp)	\ 403238 	*/.byte 0x48,0x89,0x45,0xF0
;/  DUP		058D	XOR IF \ lea     X(%rip),%rax
/*	xor	$0x58D,%rax	\ 40323C 	*/.byte 0x48,0x35,0x8D,0x5,0x0,0x0
	test	%rax,%rax	\ 403242 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 403245 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 403249 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x403291  { DUP6B?IP+62  } 	\ 40324D 	*/.byte 0xF,0x84,0x3E,0x0,0x0,0x0
;/  FFFD AND	\ direction independent
/*	and	$0xFFFD,%eax	\ 403253 	*/.byte 0x25,0xFD,0xFF,0x0,0x0
;/  DUP		0589	XOR IF \ mov     %rax,X(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 403258 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x589,%rax	\ 40325C 	*/.byte 0x48,0x35,0x89,0x5,0x0,0x0
	test	%rax,%rax	\ 403262 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403265 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403291  { DUP6B?IP+62  } 	\ 403269 	*/.byte 0xF,0x84,0x22,0x0,0x0,0x0
;/  FFC0 AND	\
/*	and	$0xFFC0,%eax	\ 40326F 	*/.byte 0x25,0xC0,0xFF,0x0,0x0
;/  DUP		0500	XOR IF \ add .. cmp   %rax|al,X(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 403274 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x500,%rax	\ 403278 	*/.byte 0x48,0x35,0x0,0x5,0x0,0x0
	test	%rax,%rax	\ 40327E 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403281 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403291  { DUP6B?IP+62  } 	\ 403285 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
;/            DROP FALSE EXIT
/*	mov	$0x0,%eax	\ 40328B 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 403290 C3 
;/  DUPENDCASE DROP TRUE ;
/*	movq	$-0x1,%rax	\ 403291 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 403298 C3 
;/
;/: DUP7B? ( l -- l flg )
;/  DUP FF AND 48 = IF DUP 8 >> DUP6B? NIP BREAK  \ rex.w


DUP7Bque:
/*	mov	%rax,-0x08(%rbp)	\ 403299 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFF,%eax	\ 40329D 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 4032A2 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 4032A8 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4032AC 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4032AF 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4032B2 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4032D2  { DUP7B?+39  } 	\ 4032B6 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4032BC 	*/.byte 0x48,0x89,0x45,0xF8
/*	shr	$0x08,%rax	\ 4032C0 	*/.byte 0x48,0xC1,0xE8,0x8
/*	lea	-0x08(%rbp),%rbp	\ 4032C4 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x403112  { DUP6B? } 	\ 4032C8 E8 45 FE FF FF 
/*	lea	0x08(%rbp),%rbp	\ 4032CD 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4032D1 C3 
;/ FALSE ;
/*	mov	%rax,-0x08(%rbp)	\ 4032D2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 4032D6 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4032DB 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 4032DF C3 
;/
;/: DUP7B?IP ( l -- l flg )
;/  DUP FF AND 48 = IF DUP 8 >> DUP6B?IP NIP BREAK  \ rex.w


DUP7BqueIP:
/*	mov	%rax,-0x08(%rbp)	\ 4032E0 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFF,%eax	\ 4032E4 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 4032E9 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 4032EF 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4032F3 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4032F6 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4032F9 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403319  { DUP7B?IP+39  } 	\ 4032FD 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403303 	*/.byte 0x48,0x89,0x45,0xF8
/*	shr	$0x08,%rax	\ 403307 	*/.byte 0x48,0xC1,0xE8,0x8
/*	lea	-0x08(%rbp),%rbp	\ 40330B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40322F  { DUP6B?IP } 	\ 40330F E8 1B FF FF FF 
/*	lea	0x08(%rbp),%rbp	\ 403314 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403318 C3 
;/ FALSE ;
/*	mov	%rax,-0x08(%rbp)	\ 403319 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 40331D 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403322 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 403326 C3 
;/
;/: NEWRAX0  ( addr -- flg ) \ 0 set rax wichout rax using
;/ L@ DUP FF AND 48 = IF 8 >> THEN \ rax -> eax


NEWRAX0:
/*	mov	(%rax),%eax	\ 403327 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403329 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFF,%eax	\ 40332D 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 403332 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403338 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40333C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40333F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403342 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403350  { NEWRAX0+29  } 	\ 403346 	*/.byte 0xF,0x84,0x4,0x0,0x0,0x0
/*	shr	$0x08,%rax	\ 40334C 	*/.byte 0x48,0xC1,0xE8,0x8
;/   CASE
;/ FFFFFF AND
/*	and	$fimg+0xBFFFFF,%eax	\ 403350 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/ DUP F0894C XOR IF \ mov     %r14,%rax
/*	mov	%rax,-0x08(%rbp)	\ 403355 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0xB0894C,%rax	\ 403359 	*/.byte 0x48,0x35,0x4C,0x89,0xF0,0x0
	test	%rax,%rax	\ 40335F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403362 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40341F  { NEWRAX0+F8  } 	\ 403366 	*/.byte 0xF,0x84,0xB3,0x0,0x0,0x0
;/ FFFF AND
/*	and	$0xFFFF,%eax	\ 40336C 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
;/ DUP	458B XOR IF \	mov    X(%rbp),%rax
/*	mov	%rax,-0x08(%rbp)	\ 403371 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x458B,%rax	\ 403375 	*/.byte 0x48,0x35,0x8B,0x45,0x0,0x0
	test	%rax,%rax	\ 40337B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40337E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40341F  { NEWRAX0+F8  } 	\ 403382 	*/.byte 0xF,0x84,0x97,0x0,0x0,0x0
;/ DUP	058a XOR IF \	mov    X(%rip),%al
/*	mov	%rax,-0x08(%rbp)	\ 403388 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x58A,%rax	\ 40338C 	*/.byte 0x48,0x35,0x8A,0x5,0x0,0x0
	test	%rax,%rax	\ 403392 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403395 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40341F  { NEWRAX0+F8  } 	\ 403399 	*/.byte 0xF,0x84,0x80,0x0,0x0,0x0
;/ DUP	058b XOR IF \	mov    X(%rip),%eax
/*	mov	%rax,-0x08(%rbp)	\ 40339F 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x58B,%rax	\ 4033A3 	*/.byte 0x48,0x35,0x8B,0x5,0x0,0x0
	test	%rax,%rax	\ 4033A9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4033AC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40341F  { NEWRAX0+F8  } 	\ 4033B0 	*/.byte 0xF,0x84,0x69,0x0,0x0,0x0
;/ DUP	058d XOR IF \	lea    X(%rip),%eax
/*	mov	%rax,-0x08(%rbp)	\ 4033B6 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x58D,%rax	\ 4033BA 	*/.byte 0x48,0x35,0x8D,0x5,0x0,0x0
	test	%rax,%rax	\ 4033C0 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4033C3 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40341F  { NEWRAX0+F8  } 	\ 4033C7 	*/.byte 0xF,0x84,0x52,0x0,0x0,0x0
;/ DUP	D089 XOR IF \	mov     %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4033CD 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xD089,%rax	\ 4033D1 	*/.byte 0x48,0x35,0x89,0xD0,0x0,0x0
	test	%rax,%rax	\ 4033D7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4033DA 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40341F  { NEWRAX0+F8  } 	\ 4033DE 	*/.byte 0xF,0x84,0x3B,0x0,0x0,0x0
;/ DUP	C0C7 XOR IF \	movq    $-0x2CBE,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4033E4 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xC0C7,%rax	\ 4033E8 	*/.byte 0x48,0x35,0xC7,0xC0,0x0,0x0
	test	%rax,%rax	\ 4033EE 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4033F1 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40341F  { NEWRAX0+F8  } 	\ 4033F5 	*/.byte 0xF,0x84,0x24,0x0,0x0,0x0
;/ FF AND
/*	and	$0xFF,%eax	\ 4033FB 	*/.byte 0x25,0xFF,0x0,0x0,0x0
;/ DUP	B8 XOR IF \	 mov     $X,%eax
/*	mov	%rax,-0x08(%rbp)	\ 403400 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xB8,%rax	\ 403404 	*/.byte 0x48,0x35,0xB8,0x0,0x0,0x0
	test	%rax,%rax	\ 40340A 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40340D 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40341F  { NEWRAX0+F8  } 	\ 403411 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
;/ DROP TRUE EXIT
/*	movq	$-0x1,%rax	\ 403417 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 40341E C3 
;/ DUPENDCASE DROP FALSE ;
/*	mov	$0x0,%eax	\ 40341F 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 403424 C3 
;/
;/: NEWRAX0+  ( addr -- flg ) \ NEWRAX0 with a ban on deletion
;/  DUP C@ 58 XOR IF \ pop     %rax 


NEWRAX0add:
/*	mov	%rax,-0x08(%rbp)	\ 403425 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 403429 	*/.byte 0xF,0xB6,0x0
/*	xor	$0x58,%al	\ 40342C 	*/.byte 0x34,0x58
	test	%rax,%rax	\ 40342E 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403431 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403441  { NEWRAX0++1C  } 	\ 403435 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
;/  NEWRAX0
	call	0x403327  { NEWRAX0 } 	\ 40343B E8 E7 FE FF FF 
;/  BREAK DROP FALSE ;
	ret		\ 403440 C3 
/*	mov	$0x0,%eax	\ 403441 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 403446 C3 
;/
;/: AX_apply<> ( addr -- flg )  \ 0 is not AX application
;/ L@ DUP FF AND 48 = IF 8 >> THEN \ rax -> eax


AX_applylessgreat:
/*	mov	(%rax),%eax	\ 403447 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403449 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFF,%eax	\ 40344D 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 403452 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403458 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40345C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40345F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403462 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403470  { AX_apply<>+29  } 	\ 403466 	*/.byte 0xF,0x84,0x4,0x0,0x0,0x0
/*	shr	$0x08,%rax	\ 40346C 	*/.byte 0x48,0xC1,0xE8,0x8
;/   CASE
;/ FFFFFF AND
/*	and	$fimg+0xBFFFFF,%eax	\ 403470 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/ DUP 75894C XOR IF \ mov     %r14,-0x10(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 403475 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x35894C,%rax	\ 403479 	*/.byte 0x48,0x35,0x4C,0x89,0x75,0x0
	test	%rax,%rax	\ 40347F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403482 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4034FA  { AX_apply<>+B3  } 	\ 403486 	*/.byte 0xF,0x84,0x6E,0x0,0x0,0x0
;/ FFFF AND
/*	and	$0xFFFF,%eax	\ 40348C 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
;/ DUP d285 XOR IF \ test   %rdx,%rdx
/*	mov	%rax,-0x08(%rbp)	\ 403491 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xD285,%rax	\ 403495 	*/.byte 0x48,0x35,0x85,0xD2,0x0,0x0
	test	%rax,%rax	\ 40349B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40349E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4034FA  { AX_apply<>+B3  } 	\ 4034A2 	*/.byte 0xF,0x84,0x52,0x0,0x0,0x0
;/ DUP 35FF XOR IF \ pushq   X (%rip)
/*	mov	%rax,-0x08(%rbp)	\ 4034A8 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x35FF,%rax	\ 4034AC 	*/.byte 0x48,0x35,0xFF,0x35,0x0,0x0
	test	%rax,%rax	\ 4034B2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4034B5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4034FA  { AX_apply<>+B3  } 	\ 4034B9 	*/.byte 0xF,0x84,0x3B,0x0,0x0,0x0
;/ DUP 45C7 XOR IF \ mov<lq>    $0x4D,-0x08(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 4034BF 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x45C7,%rax	\ 4034C3 	*/.byte 0x48,0x35,0xC7,0x45,0x0,0x0
	test	%rax,%rax	\ 4034C9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4034CC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4034FA  { AX_apply<>+B3  } 	\ 4034D0 	*/.byte 0xF,0x84,0x24,0x0,0x0,0x0
;/ FF AND
/*	and	$0xFF,%eax	\ 4034D6 	*/.byte 0x25,0xFF,0x0,0x0,0x0
;/ DUP	B1 XOR IF \ mov     $0x03,%cl
/*	mov	%rax,-0x08(%rbp)	\ 4034DB 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xB1,%rax	\ 4034DF 	*/.byte 0x48,0x35,0xB1,0x0,0x0,0x0
	test	%rax,%rax	\ 4034E5 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4034E8 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4034FA  { AX_apply<>+B3  } 	\ 4034EC 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
;/ DROP TRUE EXIT
/*	movq	$-0x1,%rax	\ 4034F2 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 4034F9 C3 
;/ DUPENDCASE DROP FALSE ;
/*	mov	$0x0,%eax	\ 4034FA 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 4034FF C3 
;/
;/: ?ChRAX<> ( addr -- flg ) \ 0 is't chench rax
;/ DUP NEWRAX0+ 0= IF DROP TRUE BREAK


queChRAXlessgreat:
/*	mov	%rax,-0x08(%rbp)	\ 403500 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 403504 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x403425  { NEWRAX0+ } 	\ 403508 E8 18 FF FF FF 
/*	subq	$0x01,%rax	\ 40350D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403511 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403514 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 403517 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40351B 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40352D  { ?ChRAX<>+2D  } 	\ 40351F 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
/*	movq	$-0x1,%rax	\ 403525 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 40352C C3 
;/ DUP AX_apply<> 0= IF DROP FALSE BREAK
/*	mov	%rax,-0x08(%rbp)	\ 40352D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 403531 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x403447  { AX_apply<> } 	\ 403535 E8 D FF FF FF 
/*	subq	$0x01,%rax	\ 40353A 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40353E 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403541 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 403544 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403548 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x403558  { ?ChRAX<>+58  } 	\ 40354C 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 403552 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 403557 C3 
;/ L@ DUP F8 AND 48 = IF 8 >> THEN \ rax -> eax
/*	mov	(%rax),%eax	\ 403558 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40355A 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xF8,%eax	\ 40355E 	*/.byte 0x25,0xF8,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 403563 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403569 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40356D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403570 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403573 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403581  { ?ChRAX<>+81  } 	\ 403577 	*/.byte 0xF,0x84,0x4,0x0,0x0,0x0
/*	shr	$0x08,%rax	\ 40357D 	*/.byte 0x48,0xC1,0xE8,0x8
;/	CASE
;/ FFFFFF AND
/*	and	$fimg+0xBFFFFF,%eax	\ 403581 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/ DUP 243C83 XOR IF \ cmp    $X,(%rsp)
/*	mov	%rax,-0x08(%rbp)	\ 403586 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x243C83,%rax	\ 40358A 	*/.byte 0x48,0x35,0x83,0x3C,0x24,0x0
	test	%rax,%rax	\ 403590 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403593 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 403597 	*/.byte 0xF,0x84,0xE9,0x0,0x0,0x0
;/ DUP 583880 XOR IF \ cmpb   $X,(%rax)
/*	mov	%rax,-0x08(%rbp)	\ 40359D 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x183880,%rax	\ 4035A1 	*/.byte 0x48,0x35,0x80,0x38,0x58,0x0
	test	%rax,%rax	\ 4035A7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4035AA 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 4035AE 	*/.byte 0xF,0x84,0xD2,0x0,0x0,0x0
;/ FFFF AND
/*	and	$0xFFFF,%eax	\ 4035B4 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
;/
;/ DUP 0601 XOR IF \ add    %eax,(%rsi) add    %rax,(%r14)
/*	mov	%rax,-0x08(%rbp)	\ 4035B9 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x601,%rax	\ 4035BD 	*/.byte 0x48,0x35,0x1,0x6,0x0,0x0
	test	%rax,%rax	\ 4035C3 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4035C6 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 4035CA 	*/.byte 0xF,0x84,0xB6,0x0,0x0,0x0
;/ DUP 0689 XOR IF \ mov    %eax,(%rsi) mov    %rax,(%r14)
/*	mov	%rax,-0x08(%rbp)	\ 4035D0 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x689,%rax	\ 4035D4 	*/.byte 0x48,0x35,0x89,0x6,0x0,0x0
	test	%rax,%rax	\ 4035DA 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4035DD 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 4035E1 	*/.byte 0xF,0x84,0x9F,0x0,0x0,0x0
;/ DUP F883 XOR IF \ cmp	$-0x01,%eax
/*	mov	%rax,-0x08(%rbp)	\ 4035E7 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xF883,%rax	\ 4035EB 	*/.byte 0x48,0x35,0x83,0xF8,0x0,0x0
	test	%rax,%rax	\ 4035F1 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4035F4 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 4035F8 	*/.byte 0xF,0x84,0x88,0x0,0x0,0x0
;/ DUP 00FF XOR IF \ incl   (%rax)
/*	mov	%rax,-0x08(%rbp)	\ 4035FE 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xFF,%rax	\ 403602 	*/.byte 0x48,0x35,0xFF,0x0,0x0,0x0
	test	%rax,%rax	\ 403608 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40360B 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 40360F 	*/.byte 0xF,0x84,0x71,0x0,0x0,0x0
;/
;/ DUP FFF0 AND	0580 XOR IF \ mov     %eax,dcomasubSET+0x5 (%rip) ...
/*	mov	%rax,-0x08(%rbp)	\ 403615 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFFF0,%eax	\ 403619 	*/.byte 0x25,0xF0,0xFF,0x0,0x0
/*	xor	$0x580,%eax	\ 40361E 	*/.byte 0x35,0x80,0x5,0x0,0x0
	test	%rax,%rax	\ 403623 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403626 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 40362A 	*/.byte 0xF,0x84,0x56,0x0,0x0,0x0
;/ DUP		05C7 XOR IF \ mov     $X,Y(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 403630 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x5C7,%rax	\ 403634 	*/.byte 0x48,0x35,0xC7,0x5,0x0,0x0
	test	%rax,%rax	\ 40363A 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40363D 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 403641 	*/.byte 0xF,0x84,0x3F,0x0,0x0,0x0
;/ DUP FFF0 AND	5580 XOR IF \ mov|lea     0x08(%rbp),%rdx ...
/*	mov	%rax,-0x08(%rbp)	\ 403647 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFFF0,%eax	\ 40364B 	*/.byte 0x25,0xF0,0xFF,0x0,0x0
/*	xor	$0x5580,%eax	\ 403650 	*/.byte 0x35,0x80,0x55,0x0,0x0
	test	%rax,%rax	\ 403655 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403658 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 40365C 	*/.byte 0xF,0x84,0x24,0x0,0x0,0x0
;/ F8 AND
/*	and	$0xF8,%eax	\ 403662 	*/.byte 0x25,0xF8,0x0,0x0,0x0
;/ DUP	38 XOR IF \ cmp
/*	mov	%rax,-0x08(%rbp)	\ 403667 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x38,%rax	\ 40366B 	*/.byte 0x48,0x35,0x38,0x0,0x0,0x0
	test	%rax,%rax	\ 403671 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403674 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403686  { ?ChRAX<>+186  } 	\ 403678 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
;/ DROP TRUE EXIT
/*	movq	$-0x1,%rax	\ 40367E 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 403685 C3 
;/ DUPENDCASE DROP FALSE ;
/*	mov	$0x0,%eax	\ 403686 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 40368B C3 
;/
;/: ?ChRDX<> ( addr -- flg ) \ 0 is't chench rax
;/ DUP NEWRAX0+ 0= IF DROP FALSE BREAK


queChRDXlessgreat:
/*	mov	%rax,-0x08(%rbp)	\ 40368C 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 403690 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x403425  { NEWRAX0+ } 	\ 403694 E8 8C FD FF FF 
/*	subq	$0x01,%rax	\ 403699 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40369D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4036A0 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 4036A3 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4036A7 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x4036B7  { ?ChRDX<>+2B  } 	\ 4036AB 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 4036B1 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 4036B6 C3 
;/DROP TRUE
/*	movq	$-0x1,%rax	\ 4036B7 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
;/;
	ret		\ 4036BE C3 
;/
;/: DX_apply<> ( addr -- flg )  \ 0 is not DX application
;/ L@ DUP F8 AND 48 = IF 8 >> THEN \ rax -> eax


DX_applylessgreat:
/*	mov	(%rax),%eax	\ 4036BF 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4036C1 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xF8,%eax	\ 4036C5 	*/.byte 0x25,0xF8,0x0,0x0,0x0
/*	xor	$0x48,%rax	\ 4036CA 	*/.byte 0x48,0x35,0x48,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 4036D0 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4036D4 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4036D7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4036DA 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4036E8  { DX_apply<>+29  } 	\ 4036DE 	*/.byte 0xF,0x84,0x4,0x0,0x0,0x0
/*	shr	$0x08,%rax	\ 4036E4 	*/.byte 0x48,0xC1,0xE8,0x8
;/   CASE
;/ FFFF AND
/*	and	$0xFFFF,%eax	\ 4036E8 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
;/DUP	058d XOR IF	\ lea     X(%rip),%eax
/*	mov	%rax,-0x08(%rbp)	\ 4036ED 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x58D,%rax	\ 4036F1 	*/.byte 0x48,0x35,0x8D,0x5,0x0,0x0
	test	%rax,%rax	\ 4036F7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4036FA 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037BA  { DX_apply<>+FB  } 	\ 4036FE 	*/.byte 0xF,0x84,0xB6,0x0,0x0,0x0
;/DUP	408B XOR IF	\ mov	-0x08(%rax),%eax
/*	mov	%rax,-0x08(%rbp)	\ 403704 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x408B,%rax	\ 403708 	*/.byte 0x48,0x35,0x8B,0x40,0x0,0x0
	test	%rax,%rax	\ 40370E 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403711 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037BA  { DX_apply<>+FB  } 	\ 403715 	*/.byte 0xF,0x84,0x9F,0x0,0x0,0x0
;/DUP	458B XOR IF	\ mov	-0x08(%rbp),%eax
/*	mov	%rax,-0x08(%rbp)	\ 40371B 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x458B,%rax	\ 40371F 	*/.byte 0x48,0x35,0x8B,0x45,0x0,0x0
	test	%rax,%rax	\ 403725 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403728 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037BA  { DX_apply<>+FB  } 	\ 40372C 	*/.byte 0xF,0x84,0x88,0x0,0x0,0x0
;/DUP	008B XOR IF	\ mov	 (%rax),%eax
/*	mov	%rax,-0x08(%rbp)	\ 403732 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x8B,%rax	\ 403736 	*/.byte 0x48,0x35,0x8B,0x0,0x0,0x0
	test	%rax,%rax	\ 40373C 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40373F 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037BA  { DX_apply<>+FB  } 	\ 403743 	*/.byte 0xF,0x84,0x71,0x0,0x0,0x0
;/DUP	FFC0 AND 4500 XOR IF	\ add .. cmp -0x08(%rbp),%eax
/*	mov	%rax,-0x08(%rbp)	\ 403749 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xFFC0,%eax	\ 40374D 	*/.byte 0x25,0xC0,0xFF,0x0,0x0
/*	xor	$0x4500,%eax	\ 403752 	*/.byte 0x35,0x0,0x45,0x0,0x0
	test	%rax,%rax	\ 403757 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40375A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037BA  { DX_apply<>+FB  } 	\ 40375E 	*/.byte 0xF,0x84,0x56,0x0,0x0,0x0
;/DUP	f089 XOR IF	\ mov    %esi,%eax mov    %r14,%rax
/*	mov	%rax,-0x08(%rbp)	\ 403764 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 403768 	*/.byte 0x48,0x89,0x45,0xF0
/*	xor	$0xF089,%rax	\ 40376C 	*/.byte 0x48,0x35,0x89,0xF0,0x0,0x0
	test	%rax,%rax	\ 403772 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403775 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037BA  { DX_apply<>+FB  } 	\ 403779 	*/.byte 0xF,0x84,0x3B,0x0,0x0,0x0
;/  FF AND
/*	and	$0xFF,%eax	\ 40377F 	*/.byte 0x25,0xFF,0x0,0x0,0x0
;/DUP	B8 XOR IF	\ mov     $0x0,%eax
/*	mov	%rax,-0x08(%rbp)	\ 403784 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0xB8,%rax	\ 403788 	*/.byte 0x48,0x35,0xB8,0x0,0x0,0x0
	test	%rax,%rax	\ 40378E 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403791 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037BA  { DX_apply<>+FB  } 	\ 403795 	*/.byte 0xF,0x84,0x1F,0x0,0x0,0x0
;/DUP	58 XOR IF	\ pop     %rax
/*	mov	%rax,-0x08(%rbp)	\ 40379B 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x58,%rax	\ 40379F 	*/.byte 0x48,0x35,0x58,0x0,0x0,0x0
	test	%rax,%rax	\ 4037A5 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4037A8 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037BA  { DX_apply<>+FB  } 	\ 4037AC 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
;/
;/ DROP TRUE EXIT
/*	movq	$-0x1,%rax	\ 4037B2 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
	ret		\ 4037B9 C3 
;/ DUPENDCASE DROP FALSE ;
/*	mov	$0x0,%eax	\ 4037BA 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 4037BF C3 
;/
;/: -EBPCLR  ( FLAG OPX  -- FLAG' )
;/   DUP @  :-SET  U< IF DROP BREAK


subEBPCLR:
/*	mov	%rax,-0x08(%rbp)	\ 4037C0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%rax	\ 4037C4 	*/.byte 0x48,0x8B,0x0
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 4037C7 	*/.byte 0x48,0x3B,0x5,0xA7,0xEB,0xFF,0xFF
/*	sbb	%rax,%rax	\ 4037CE 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4037D1 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4037D4 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4037E7  { -EBPCLR+27  } 	\ 4037D8 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 4037DE 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4037E2 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4037E6 C3 
;/  OFF-EBP CELL- TO OFF-EBP
/*	mov	%rax,-0x08(%rbp)	\ 4037E7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 4037EB 	*/.byte 0x48,0x8B,0x5,0x2F,0xEA,0xFF,0xFF
/*	lea	-0x08(%rax),%rax	\ 4037F2 	*/.byte 0x48,0x8D,0x40,0xF8
/*	mov	%rax,0x402221  { OFF-EBP+5  } (%rip)	\ 4037F6 	*/.byte 0x48,0x89,0x5,0x24,0xEA,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 4037FD 	*/.byte 0x48,0x8B,0x45,0xF8
;/  BEGIN
;/	DUP @  4 + THERE  U> IF CELL+ THEN
/*	mov	%rax,-0x08(%rbp)	\ 403801 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%rax	\ 403805 	*/.byte 0x48,0x8B,0x0
/*	lea	0x04(%rax),%rax	\ 403808 	*/.byte 0x48,0x8D,0x40,0x4
/*	cmp	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40380C 	*/.byte 0x48,0x39,0x5,0x3D,0xDE,0xFF,0xFF
/*	sbb	%rax,%rax	\ 403813 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403816 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403819 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403827  { -EBPCLR+67  } 	\ 40381D 	*/.byte 0xF,0x84,0x4,0x0,0x0,0x0
/*	lea	0x08(%rax),%rax	\ 403823 	*/.byte 0x48,0x8D,0x40,0x8
;/		?OPlast    IF DROP BREAK
/*	mov	%rax,-0x08(%rbp)	\ 403827 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 40382B 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x402350  { LAST-HERE+10D  } (%rip),%rax	\ 40382F 	*/.byte 0x48,0x8D,0x5,0x1A,0xEB,0xFF,0xFF
/*	cmp	-0x10(%rbp),%rax	\ 403836 	*/.byte 0x48,0x3B,0x45,0xF0
/*	sbb	%rax,%rax	\ 40383A 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40383D 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403840 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403853  { -EBPCLR+93  } 	\ 403844 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40384A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40384E 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403852 C3 
;/	DUP @ C@ F0
/*	mov	%rax,-0x08(%rbp)	\ 403853 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%rax	\ 403857 	*/.byte 0x48,0x8B,0x0
/*	movzb	(%rax),%eax	\ 40385A 	*/.byte 0xF,0xB6,0x0
/*	and	$0xF0,%eax	\ 40385D 	*/.byte 0x25,0xF0,0x0,0x0,0x0
/*	xor	$0x70,%rax	\ 403862 	*/.byte 0x48,0x35,0x70,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403868 	*/.byte 0x48,0x83,0xE8,0x1
;/		AND 70   = IF DROP BREAK \ Jx
/*	sbb	%rax,%rax	\ 40386C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40386F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403872 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403885  { -EBPCLR+C5  } 	\ 403876 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40387C 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403880 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403884 C3 
;/
;/     DUP @  \ FLAG OPX [OPX]
/*	mov	%rax,-0x08(%rbp)	\ 403885 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%rax	\ 403889 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40388C 	*/.byte 0x48,0x89,0x45,0xF0
;/     DUP W@ 6D8D = IF 2DROP BREAK \ lea  ebp, X[rbp]
/*	movzw	(%rax),%eax	\ 403890 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x6D8D,%rax	\ 403893 	*/.byte 0x48,0x35,0x8D,0x6D,0x0,0x0
/*	subq	$0x01,%rax	\ 403899 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40389D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4038A0 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 4038A3 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 4038A7 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x4038BA  { -EBPCLR+FA  } 	\ 4038AB 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 4038B1 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 4038B5 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 4038B9 C3 
;/     DUP 1+ W@ 6D8D = IF 2DROP BREAK \ lea  rbp, X[rbp]
/*	mov	%rax,-0x08(%rbp)	\ 4038BA 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzw	0x01(%rax),%eax	\ 4038BE 	*/.byte 0xF,0xB7,0x40,0x1
/*	xor	$0x6D8D,%rax	\ 4038C2 	*/.byte 0x48,0x35,0x8D,0x6D,0x0,0x0
/*	subq	$0x01,%rax	\ 4038C8 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4038CC 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4038CF 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4038D2 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4038E5  { -EBPCLR+125  } 	\ 4038D6 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 4038DC 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 4038E0 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 4038E4 C3 
;/     DUP C@ FF   = IF 2DROP BREAK \ CALL [x]
/*	mov	%rax,-0x08(%rbp)	\ 4038E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 4038E9 	*/.byte 0xF,0xB6,0x0
/*	xor	$0xFF,%rax	\ 4038EC 	*/.byte 0x48,0x35,0xFF,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 4038F2 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4038F6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4038F9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4038FC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40390F  { -EBPCLR+14F  } 	\ 403900 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 403906 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40390A 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 40390E C3 
;/     DUP C@ E8   = IF 2DROP BREAK \ CALL
/*	mov	%rax,-0x08(%rbp)	\ 40390F 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 403913 	*/.byte 0xF,0xB6,0x0
/*	xor	$0xE8,%rax	\ 403916 	*/.byte 0x48,0x35,0xE8,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 40391C 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403920 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403923 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403926 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403939  { -EBPCLR+179  } 	\ 40392A 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 403930 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 403934 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 403938 C3 
;/     DUP C@ E9   = IF 2DROP BREAK \ JMP
/*	mov	%rax,-0x08(%rbp)	\ 403939 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 40393D 	*/.byte 0xF,0xB6,0x0
/*	xor	$0xE9,%rax	\ 403940 	*/.byte 0x48,0x35,0xE9,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403946 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40394A 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40394D 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403950 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403963  { -EBPCLR+1A3  } 	\ 403954 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 40395A 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40395E 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 403962 C3 
;/     DUP C@ EB   = IF 2DROP BREAK
/*	mov	%rax,-0x08(%rbp)	\ 403963 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 403967 	*/.byte 0xF,0xB6,0x0
/*	xor	$0xEB,%rax	\ 40396A 	*/.byte 0x48,0x35,0xEB,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403970 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403974 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403977 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40397A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40398D  { -EBPCLR+1CD  } 	\ 40397E 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 403984 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 403988 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 40398C C3 
;/     DUP L@ F0FF
/*	mov	%rax,-0x08(%rbp)	\ 40398D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%eax	\ 403991 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 403993 	*/.byte 0x48,0x89,0x45,0xF0
/*	and	$0xF0FF,%eax	\ 403997 	*/.byte 0x25,0xFF,0xF0,0x0,0x0
/*	xor	$0x800F,%rax	\ 40399C 	*/.byte 0x48,0x35,0xF,0x80,0x0,0x0
;/          AND 800F = IF 2DROP BREAK \ Jx
/*	subq	$0x01,%rax	\ 4039A2 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4039A6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4039A9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4039AC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4039BF  { -EBPCLR+1FF  } 	\ 4039B0 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 4039B6 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 4039BA 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 4039BE C3 
;/     DUP L@ FFFFFF AND C5448B = \ MOV  EAX , FC [EBP] [EAX*8]
/*	mov	%rax,-0x08(%rbp)	\ 4039BF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%eax	\ 4039C3 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4039C5 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x85448B,%rax	\ 4039CA 	*/.byte 0x48,0x35,0x8B,0x44,0xC5,0x0
/*	subq	$0x01,%rax	\ 4039D0 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4039D4 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4039D7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4039DA 	*/.byte 0x48,0x8B,0x45,0xF8
;/              IF 2DROP BREAK
/*	jz	0x4039ED  { -EBPCLR+22D  } 	\ 4039DE 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 4039E4 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 4039E8 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 4039EC C3 
;/
;/     DUP L@  C5448B48 = \ MOV  EAX , FC [EBP] [EAX*8]
/*	mov	%rax,-0x08(%rbp)	\ 4039ED 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%eax	\ 4039F1 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4039F3 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0xC5448B48,%eax	\ 4039F7 	*/.byte 0xB8,0x48,0x8B,0x44,0xC5
/*	xor	-0x10(%rbp),%rax	\ 4039FC 	*/.byte 0x48,0x33,0x45,0xF0
/*	subq	$0x01,%rax	\ 403A00 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403A04 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403A07 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403A0A 	*/.byte 0x48,0x8B,0x45,0xF8
;/              IF 2DROP BREAK
/*	jz	0x403A1D  { -EBPCLR+25D  } 	\ 403A0E 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 403A14 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 403A18 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 403A1C C3 
;/
;/     DUP C@ >PREF
/*	mov	%rax,-0x08(%rbp)	\ 403A1D 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 403A21 	*/.byte 0xF,0xB6,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403A24 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402718  { >PREF } 	\ 403A28 E8 EB EC FF FF 
;/     DUP PREF+ C@ F = IF 1 PREF_S +! THEN
/*	mov	%rax,-0x08(%rbp)	\ 403A2D 	*/.byte 0x48,0x89,0x45,0xF8
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 403A31 	*/.byte 0x48,0x3,0x5,0xD0,0xEC,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 403A38 	*/.byte 0xF,0xB6,0x0
/*	xor	$0xF,%rax	\ 403A3B 	*/.byte 0x48,0x35,0xF,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 403A41 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403A45 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403A48 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403A4B 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x403A6E  { -EBPCLR+2AE  } 	\ 403A4F 	*/.byte 0xF,0x84,0x19,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403A55 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 403A59 	*/.byte 0x48,0x8D,0x5,0xA8,0xEC,0xFF,0xFF
/*	movq	$0x1,%rdx	\ 403A60 	*/.byte 0x48,0xC7,0xC2,0x1,0x0,0x0,0x0
/*	add	%rdx,(%rax)	\ 403A67 	*/.byte 0x48,0x1,0x10
/*	mov	-0x08(%rbp),%rax	\ 403A6A 	*/.byte 0x48,0x8B,0x45,0xF8
;/
;/     DUP PREF+ 2+ C@ C>S OFF-EBP =
/*	mov	%rax,-0x08(%rbp)	\ 403A6E 	*/.byte 0x48,0x89,0x45,0xF8
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 403A72 	*/.byte 0x48,0x3,0x5,0x8F,0xEC,0xFF,0xFF
/*	movzb	0x02(%rax),%eax	\ 403A79 	*/.byte 0xF,0xB6,0x40,0x2
/*	movsbq	%al,%rax	\ 403A7D 	*/.byte 0x48,0xF,0xBE,0xC0
/*	xor	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 403A81 	*/.byte 0x48,0x33,0x5,0x99,0xE7,0xFF,0xFF
/*	subq	$0x01,%rax	\ 403A88 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403A8C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403A8F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403A92 	*/.byte 0x48,0x8B,0x45,0xF8
;/     IF   DUP	PREF+ W@  E7FF AND  4589 =    \ MOV X [EBP] , EAX|EDX|EBX|ECX
/*	jz	0x403B63  { -EBPCLR+3A3  } 	\ 403A96 	*/.byte 0xF,0x84,0xC7,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403A9C 	*/.byte 0x48,0x89,0x45,0xF8
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 403AA0 	*/.byte 0x48,0x3,0x5,0x61,0xEC,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 403AA7 	*/.byte 0xF,0xB7,0x0
/*	and	$0xE7FF,%eax	\ 403AAA 	*/.byte 0x25,0xFF,0xE7,0x0,0x0
/*	xor	$0x4589,%rax	\ 403AAF 	*/.byte 0x48,0x35,0x89,0x45,0x0,0x0
/*	subq	$0x01,%rax	\ 403AB5 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403AB9 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,-0x10(%rbp)	\ 403ABC 	*/.byte 0x48,0x89,0x45,0xF0
;/          OVER	PREF+ W@            45C7 = OR \ MOV     F8 [EBP] , # 2710
/*	mov	-0x08(%rbp),%rax	\ 403AC0 	*/.byte 0x48,0x8B,0x45,0xF8
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 403AC4 	*/.byte 0x48,0x3,0x5,0x3D,0xEC,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 403ACB 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x45C7,%rax	\ 403ACE 	*/.byte 0x48,0x35,0xC7,0x45,0x0,0x0
/*	subq	$0x01,%rax	\ 403AD4 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403AD8 	*/.byte 0x48,0x19,0xC0
/*	or	-0x10(%rbp),%rax	\ 403ADB 	*/.byte 0x48,0xB,0x45,0xF0
	test	%rax,%rax	\ 403ADF 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403AE2 	*/.byte 0x48,0x8B,0x45,0xF8
;/          IF M\ 200 DTST
/*	jz	0x403B39  { -EBPCLR+379  } 	\ 403AE6 	*/.byte 0xF,0x84,0x4D,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403AEC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x200,%eax	\ 403AF0 	*/.byte 0xB8,0x0,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403AF5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403AF9 E8 53 EA FF FF 
;/               OVER  OPexcise >R NIP TRUE SWAP CELL- R>
/*	mov	%rax,-0x08(%rbp)	\ 403AFE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 403B02 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403B06 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 403B0A E8 90 EE FF FF 
	Push	%rax	\ 403B0F 50 
/*	mov	0x00(%rbp),%rax	\ 403B10 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rax,0x08(%rbp)	\ 403B14 	*/.byte 0x48,0x89,0x45,0x8
/*	movq	$-0x1,%rax	\ 403B18 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	mov	0x08(%rbp),%rdx	\ 403B1F 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rax,0x08(%rbp)	\ 403B23 	*/.byte 0x48,0x89,0x45,0x8
/*	lea	-0x04(%rdx),%rax	\ 403B27 	*/.byte 0x48,0x8D,0x42,0xFC
/*	lea	-0x04(%rax),%rax	\ 403B2B 	*/.byte 0x48,0x8D,0x40,0xFC
/*	mov	%rax,0x00(%rbp)	\ 403B2F 	*/.byte 0x48,0x89,0x45,0x0
	pop	%rax	\ 403B33 58 
;/          ELSE  DUP	PREF+ W@ 408B XOR \ not (%rbp)
/*	jmp	0x403B63  { -EBPCLR+3A3  } 	\ 403B34 	*/.byte 0xE9,0x2A,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403B39 	*/.byte 0x48,0x89,0x45,0xF8
/*	add	0x402708  { RIPADR?+17A  } (%rip),%rax	\ 403B3D 	*/.byte 0x48,0x3,0x5,0xC4,0xEB,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 403B44 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x408B,%rax	\ 403B47 	*/.byte 0x48,0x35,0x8B,0x40,0x0,0x0
	test	%rax,%rax	\ 403B4D 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403B50 	*/.byte 0x48,0x8B,0x45,0xF8
;/		IF  2DROP BREAK
/*	jz	0x403B63  { -EBPCLR+3A3  } 	\ 403B54 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 403B5A 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 403B5E 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 403B62 C3 
;/          THEN
;/     THEN
;/
;/   DROP  CELL+   DUP @  :-SET  U<
/*	mov	0x00(%rbp),%rax	\ 403B63 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rax),%rax	\ 403B67 	*/.byte 0x48,0x8D,0x40,0x8
/*	mov	%rax,0x00(%rbp)	\ 403B6B 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	(%rax),%rax	\ 403B6F 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403B72 	*/.byte 0x48,0x89,0x45,0xF8
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 403B76 	*/.byte 0x48,0x3B,0x5,0xF8,0xE7,0xFF,0xFF
/*	sbb	%rax,%rax	\ 403B7D 	*/.byte 0x48,0x19,0xC0
;/  UNTIL DROP ;
	test	%rax,%rax	\ 403B80 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 403B83 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403B87 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x403801  { -EBPCLR+41  } 	\ 403B8B 	*/.byte 0xF,0x84,0x70,0xFC,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 403B91 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403B95 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403B99 C3 
;/
;/: X?EBP
;/ DROP EXIT


XqueEBP:
/*	mov	0x00(%rbp),%rax	\ 403B9A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403B9E 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403BA2 C3 
;/ C@ C>S OFF-EBP  +
/*	movzb	(%rax),%eax	\ 403BA3 	*/.byte 0xF,0xB6,0x0
/*	movsbq	%al,%rax	\ 403BA6 	*/.byte 0x48,0xF,0xBE,0xC0
/*	add	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 403BAA 	*/.byte 0x48,0x3,0x5,0x70,0xE6,0xFF,0xFF
;/  40 + -80 AND
/*	lea	0x40(%rax),%rax	\ 403BB1 	*/.byte 0x48,0x8D,0x40,0x40
/*	andq	$-0x80,%rax	\ 403BB5 	*/.byte 0x48,0x83,0xE0,0x80
;/  IF EVEN-EBP THEN ;
/*	mov	0x00(%rbp),%rax	\ 403BB9 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403BBD 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x403BCC  { X?EBP+32  } 	\ 403BC1 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
	call	0x402B41  { EVEN-EBP } 	\ 403BC7 E8 75 EF FF FF 
	ret		\ 403BCC C3 
;/
;/: 2?EBP OVER 2+  X?EBP ;


2queEBP:
/*	mov	%rax,-0x08(%rbp)	\ 403BCD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 403BD1 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x02(%rax),%rax	\ 403BD5 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x08(%rbp),%rax	\ 403BD9 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 403BDD C3 
;/: 3?EBP OVER 3 + X?EBP ;


3queEBP:
/*	mov	%rax,-0x08(%rbp)	\ 403BDE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 403BE2 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x03(%rax),%rax	\ 403BE6 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x08(%rbp),%rax	\ 403BEA 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 403BEE C3 
;/: 4?EBP OVER 4 + X?EBP ;


4queEBP:
/*	mov	%rax,-0x08(%rbp)	\ 403BEF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 403BF3 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x04(%rax),%rax	\ 403BF7 	*/.byte 0x48,0x8D,0x40,0x4
/*	mov	-0x08(%rbp),%rax	\ 403BFB 	*/.byte 0x48,0x8B,0x45,0xF8
	ret		\ 403BFF C3 
;/
;/: -EVEN-EAX
;/   BEGIN
;/ OP0 @ DUP :-SET U< IF DROP BREAK TO OP0@


subEVENsubEAX:
/*	mov	%rax,-0x08(%rbp)	\ 403C00 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 403C04 	*/.byte 0x48,0x8B,0x5,0x45,0xE6,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 403C0B 	*/.byte 0x48,0x89,0x45,0xF0
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 403C0F 	*/.byte 0x48,0x3B,0x5,0x5F,0xE7,0xFF,0xFF
/*	sbb	%rax,%rax	\ 403C16 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403C19 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 403C1C 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 403C20 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x403C33  { -EVEN-EAX+33  } 	\ 403C24 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 403C2A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403C2E 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403C32 C3 
/*	mov	%rax,0x40239A  { OP0@+5  } (%rip)	\ 403C33 	*/.byte 0x48,0x89,0x5,0x60,0xE7,0xFF,0xFF
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403C3A 	*/.byte 0x48,0x8B,0x5,0x59,0xE7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 403C41 	*/.byte 0x8B,0x0
;/  OP0@ L@ FFFFFF AND 408D48 = \      lea     0x02(%rax),%rax # 41CE14 48 8D 40 2
/*	and	$fimg+0xBFFFFF,%eax	\ 403C43 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x8D48,%rax	\ 403C48 	*/.byte 0x48,0x35,0x48,0x8D,0x40,0x0
/*	subq	$0x01,%rax	\ 403C4E 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403C52 	*/.byte 0x48,0x19,0xC0
;/   M_WL  M\ 2 DTST
	test	%rax,%rax	\ 403C55 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 403C58 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403C5C 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x403CC8  { -EVEN-EAX+C8  } 	\ 403C60 	*/.byte 0xF,0x84,0x62,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403C66 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x2,%eax	\ 403C6A 	*/.byte 0xB8,0x2,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403C6F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403C73 E8 D9 E8 FF FF 
;/       OP0@ 3 + C@ C>S OFF-EAX + TO OFF-EAX
/*	mov	%rax,-0x08(%rbp)	\ 403C78 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403C7C 	*/.byte 0x48,0x8B,0x5,0x17,0xE7,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 403C83 	*/.byte 0xF,0xB6,0x40,0x3
/*	movsbq	%al,%rax	\ 403C87 	*/.byte 0x48,0xF,0xBE,0xC0
/*	add	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 403C8B 	*/.byte 0x48,0x3,0x5,0x9C,0xE5,0xFF,0xFF
/*	mov	%rax,0x40222E  { OFF-EAX+5  } (%rip)	\ 403C92 	*/.byte 0x48,0x89,0x5,0x95,0xE5,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 403C99 	*/.byte 0x48,0x8D,0x5,0xB8,0xE5,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 403CA0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 403CA4 E8 DE E7 FF FF 
;/       -4 ALLOT M\ 3 DTST
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 403CA9 	*/.byte 0x48,0x83,0x5,0x9F,0xD9,0xFF,0xFF,0xFC
/*	mov	%rax,-0x08(%rbp)	\ 403CB1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3,%eax	\ 403CB5 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403CBA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403CBE E8 8E E8 FF FF 
;/   REPEAT
/*	jmp	0x403C00  { -EVEN-EAX } 	\ 403CC3 	*/.byte 0xE9,0x38,0xFF,0xFF,0xFF
;/
;/  OP0@ L@ FFFFFF AND 808D48 = \      lea     0x02(%rax),%rax # 41CE14 48 8D 40 2
/*	mov	%rax,-0x08(%rbp)	\ 403CC8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403CCC 	*/.byte 0x48,0x8B,0x5,0xC7,0xE6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 403CD3 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 403CD5 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x408D48,%rax	\ 403CDA 	*/.byte 0x48,0x35,0x48,0x8D,0x80,0x0
/*	subq	$0x01,%rax	\ 403CE0 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403CE4 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403CE7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403CEA 	*/.byte 0x48,0x8B,0x45,0xF8
;/   M_WL  M\ 22 DTST
/*	jz	0x403D54  { -EVEN-EAX+154  } 	\ 403CEE 	*/.byte 0xF,0x84,0x60,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403CF4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x22,%eax	\ 403CF8 	*/.byte 0xB8,0x22,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403CFD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403D01 E8 4B E8 FF FF 
;/       OP0@ 3 + L@ L>S OFF-EAX + TO OFF-EAX
/*	mov	%rax,-0x08(%rbp)	\ 403D06 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403D0A 	*/.byte 0x48,0x8B,0x5,0x89,0xE6,0xFF,0xFF
/*	mov	0x03(%rax),%eax	\ 403D11 	*/.byte 0x8B,0x40,0x3
/*	movslq	%rax,%rax	\ 403D14 	*/.byte 0x48,0x63,0xC0
/*	add	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 403D17 	*/.byte 0x48,0x3,0x5,0x10,0xE5,0xFF,0xFF
/*	mov	%rax,0x40222E  { OFF-EAX+5  } (%rip)	\ 403D1E 	*/.byte 0x48,0x89,0x5,0x9,0xE5,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 403D25 	*/.byte 0x48,0x8D,0x5,0x2C,0xE5,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 403D2C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 403D30 E8 52 E7 FF FF 
;/       -7 ALLOT M\ 23 DTST
/*	addq	$-0x07,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 403D35 	*/.byte 0x48,0x83,0x5,0x13,0xD9,0xFF,0xFF,0xF9
/*	mov	%rax,-0x08(%rbp)	\ 403D3D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x23,%eax	\ 403D41 	*/.byte 0xB8,0x23,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403D46 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403D4A E8 2 E8 FF FF 
;/   REPEAT
/*	jmp	0x403C00  { -EVEN-EAX } 	\ 403D4F 	*/.byte 0xE9,0xAC,0xFE,0xFF,0xFF
;/
;/  OP0@ L@ F7FFFF AND C0FF48 = \      incq|decq    %rax
/*	mov	%rax,-0x08(%rbp)	\ 403D54 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403D58 	*/.byte 0x48,0x8B,0x5,0x3B,0xE6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 403D5F 	*/.byte 0x8B,0x0
/*	and	$fimg+0xB7FFFF,%eax	\ 403D61 	*/.byte 0x25,0xFF,0xFF,0xF7,0x0
/*	xor	$fimg+0x80FF48,%rax	\ 403D66 	*/.byte 0x48,0x35,0x48,0xFF,0xC0,0x0
/*	subq	$0x01,%rax	\ 403D6C 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403D70 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403D73 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403D76 	*/.byte 0x48,0x8B,0x45,0xF8
;/   M_WL  M\ 4 DTST
/*	jz	0x403DF5  { -EVEN-EAX+1F5  } 	\ 403D7A 	*/.byte 0xF,0x84,0x75,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403D80 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x4,%eax	\ 403D84 	*/.byte 0xB8,0x4,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403D89 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403D8D E8 BF E7 FF FF 
;/       OFF-EAX OP0@ L@ 80000 AND 0<> 1 OR + TO OFF-EAX
/*	mov	%rax,-0x08(%rbp)	\ 403D92 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 403D96 	*/.byte 0x48,0x8B,0x5,0x91,0xE4,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 403D9D 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403DA1 	*/.byte 0x48,0x8B,0x5,0xF2,0xE5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 403DA8 	*/.byte 0x8B,0x0
/*	and	$0x80000,%eax	\ 403DAA 	*/.byte 0x25,0x0,0x0,0x8,0x0
/*		negq	%rax	\ 403DAF 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 403DB2 	*/.byte 0x48,0x19,0xC0
/*	or	$0x1,%rax	\ 403DB5 	*/.byte 0x48,0xD,0x1,0x0,0x0,0x0
/*	add	-0x10(%rbp),%rax	\ 403DBB 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	%rax,0x40222E  { OFF-EAX+5  } (%rip)	\ 403DBF 	*/.byte 0x48,0x89,0x5,0x68,0xE4,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 403DC6 	*/.byte 0x48,0x8D,0x5,0x8B,0xE4,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 403DCD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 403DD1 E8 B1 E6 FF FF 
;/       -3 ALLOT M\ 5 DTST
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 403DD6 	*/.byte 0x48,0x83,0x5,0x72,0xD8,0xFF,0xFF,0xFD
/*	mov	%rax,-0x08(%rbp)	\ 403DDE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5,%eax	\ 403DE2 	*/.byte 0xB8,0x5,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403DE7 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403DEB E8 61 E7 FF FF 
;/   REPEAT
/*	jmp	0x403C00  { -EVEN-EAX } 	\ 403DF0 	*/.byte 0xE9,0xB,0xFE,0xFF,0xFF
;/
;/  OP0@ L@ FFFFFF AND C08148 = \     add     $0x30,%rax
/*	mov	%rax,-0x08(%rbp)	\ 403DF5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403DF9 	*/.byte 0x48,0x8B,0x5,0x9A,0xE5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 403E00 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 403E02 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x808148,%rax	\ 403E07 	*/.byte 0x48,0x35,0x48,0x81,0xC0,0x0
/*	subq	$0x01,%rax	\ 403E0D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403E11 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403E14 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403E17 	*/.byte 0x48,0x8B,0x45,0xF8
;/   M_WL  M\ E DTST
/*	jz	0x403E81  { -EVEN-EAX+281  } 	\ 403E1B 	*/.byte 0xF,0x84,0x60,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403E21 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xE,%eax	\ 403E25 	*/.byte 0xB8,0xE,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403E2A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403E2E E8 1E E7 FF FF 
;/       OP0@ 3 + L@ L>S OFF-EAX + TO OFF-EAX
/*	mov	%rax,-0x08(%rbp)	\ 403E33 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403E37 	*/.byte 0x48,0x8B,0x5,0x5C,0xE5,0xFF,0xFF
/*	mov	0x03(%rax),%eax	\ 403E3E 	*/.byte 0x8B,0x40,0x3
/*	movslq	%rax,%rax	\ 403E41 	*/.byte 0x48,0x63,0xC0
/*	add	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 403E44 	*/.byte 0x48,0x3,0x5,0xE3,0xE3,0xFF,0xFF
/*	mov	%rax,0x40222E  { OFF-EAX+5  } (%rip)	\ 403E4B 	*/.byte 0x48,0x89,0x5,0xDC,0xE3,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 403E52 	*/.byte 0x48,0x8D,0x5,0xFF,0xE3,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 403E59 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 403E5D E8 25 E6 FF FF 
;/       -7 ALLOT M\ F DTST
/*	addq	$-0x07,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 403E62 	*/.byte 0x48,0x83,0x5,0xE6,0xD7,0xFF,0xFF,0xF9
/*	mov	%rax,-0x08(%rbp)	\ 403E6A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xF,%eax	\ 403E6E 	*/.byte 0xB8,0xF,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403E73 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403E77 E8 D5 E6 FF FF 
;/   REPEAT
/*	jmp	0x403C00  { -EVEN-EAX } 	\ 403E7C 	*/.byte 0xE9,0x7F,0xFD,0xFF,0xFF
;/
;/  OP0@ W@ 0548 = \     add     $0x30,%rax
/*	mov	%rax,-0x08(%rbp)	\ 403E81 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403E85 	*/.byte 0x48,0x8B,0x5,0xE,0xE5,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 403E8C 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x548,%rax	\ 403E8F 	*/.byte 0x48,0x35,0x48,0x5,0x0,0x0
/*	subq	$0x01,%rax	\ 403E95 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403E99 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403E9C 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 403E9F 	*/.byte 0x48,0x8B,0x45,0xF8
;/   WHILE  M\ E DTST
/*	jz	0x403F09  { -EVEN-EAX+309  } 	\ 403EA3 	*/.byte 0xF,0x84,0x60,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403EA9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xE,%eax	\ 403EAD 	*/.byte 0xB8,0xE,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403EB2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403EB6 E8 96 E6 FF FF 
;/       OP0@ 2+ L@ L>S OFF-EAX + TO OFF-EAX
/*	mov	%rax,-0x08(%rbp)	\ 403EBB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403EBF 	*/.byte 0x48,0x8B,0x5,0xD4,0xE4,0xFF,0xFF
/*	mov	0x02(%rax),%eax	\ 403EC6 	*/.byte 0x8B,0x40,0x2
/*	movslq	%rax,%rax	\ 403EC9 	*/.byte 0x48,0x63,0xC0
/*	add	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 403ECC 	*/.byte 0x48,0x3,0x5,0x5B,0xE3,0xFF,0xFF
/*	mov	%rax,0x40222E  { OFF-EAX+5  } (%rip)	\ 403ED3 	*/.byte 0x48,0x89,0x5,0x54,0xE3,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 403EDA 	*/.byte 0x48,0x8D,0x5,0x77,0xE3,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 403EE1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 403EE5 E8 9D E5 FF FF 
;/       -6 ALLOT M\ F DTST
/*	addq	$-0x06,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 403EEA 	*/.byte 0x48,0x83,0x5,0x5E,0xD7,0xFF,0xFF,0xFA
/*	mov	%rax,-0x08(%rbp)	\ 403EF2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xF,%eax	\ 403EF6 	*/.byte 0xB8,0xF,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403EFB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403EFF E8 4D E6 FF FF 
;/   REPEAT
/*	jmp	0x403C00  { -EVEN-EAX } 	\ 403F04 	*/.byte 0xE9,0xF7,0xFC,0xFF,0xFF
;/;
	ret		\ 403F09 C3 
;/
;/: OPT-RULES  ( ADDR  -- ADDR )
;/   M\ -1 DTST


OPTsubRULES:
/*	mov	%rax,-0x08(%rbp)	\ 403F0A 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1,%rax	\ 403F0E 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 403F15 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403F19 E8 33 E6 FF FF 
;/   BEGIN
;/   OP0 @ DUP :-SET U< IF DROP BREAK TO OP0@
/*	mov	%rax,-0x08(%rbp)	\ 403F1E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 403F22 	*/.byte 0x48,0x8B,0x5,0x27,0xE3,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 403F29 	*/.byte 0x48,0x89,0x45,0xF0
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 403F2D 	*/.byte 0x48,0x3B,0x5,0x41,0xE4,0xFF,0xFF
/*	sbb	%rax,%rax	\ 403F34 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 403F37 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 403F3A 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 403F3E 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x403F51  { OPT-RULES+47  } 	\ 403F42 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 403F48 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403F4C 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 403F50 C3 
/*	mov	%rax,0x40239A  { OP0@+5  } (%rip)	\ 403F51 	*/.byte 0x48,0x89,0x5,0x42,0xE4,0xFF,0xFF
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403F58 	*/.byte 0x48,0x8B,0x5,0x3B,0xE4,0xFF,0xFF
/*	mov	(%rax),%eax	\ 403F5F 	*/.byte 0x8B,0x0
;/  OP0@ L@ FFFFFF AND D08948 XOR		\ mov	%rdx,%rax
/*	and	$fimg+0xBFFFFF,%eax	\ 403F61 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 403F66 	*/.byte 0x35,0x48,0x89,0xD0,0x0
;/  OFF-EAX 0=
/*	mov	%rax,-0x08(%rbp)	\ 403F6B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 403F6F 	*/.byte 0x48,0x8B,0x5,0xB8,0xE2,0xFF,0xFF
/*	subq	$0x01,%rax	\ 403F76 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403F7A 	*/.byte 0x48,0x19,0xC0
/*	or	-0x08(%rbp),%rax	\ 403F7D 	*/.byte 0x48,0xB,0x45,0xF8
;/  OR 0=
/*	subq	$0x01,%rax	\ 403F81 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 403F85 	*/.byte 0x48,0x19,0xC0
;/  M_WL
	test	%rax,%rax	\ 403F88 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 403F8B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403F8F 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x404047  { OPT-RULES+13D  } 	\ 403F93 	*/.byte 0xF,0x84,0xAE,0x0,0x0,0x0
;/    M\ A DTST
/*	mov	%rax,-0x08(%rbp)	\ 403F99 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xA,%eax	\ 403F9D 	*/.byte 0xB8,0xA,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 403FA2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 403FA6 E8 A6 E5 FF FF 
;/	OFF-EAX DUP SHORT?
/*	mov	%rax,-0x08(%rbp)	\ 403FAB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 403FAF 	*/.byte 0x48,0x8B,0x5,0x78,0xE2,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 403FB6 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 403FBA 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401FD6  { SHORT? } 	\ 403FBE E8 13 E0 FF FF 
;/     IF    428D OP0@ 1+ W! C,
	test	%rax,%rax	\ 403FC3 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 403FC6 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 403FCA 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x403FFF  { OPT-RULES+F5  } 	\ 403FCE 	*/.byte 0xF,0x84,0x2B,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403FD4 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x428D,-0x10(%rbp)	\ 403FD8 	*/.byte 0x48,0xC7,0x45,0xF0,0x8D,0x42,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 403FE0 	*/.byte 0x48,0x8B,0x5,0xB3,0xE3,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 403FE7 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 403FEB 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 403FEE 	*/.byte 0x66,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 403FF1 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x4016EE  { C, } 	\ 403FF5 E8 F4 D6 FF FF 
;/     ELSE  828D OP0@ 1+ W! L,
/*	jmp	0x404025  { OPT-RULES+11B  } 	\ 403FFA 	*/.byte 0xE9,0x26,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 403FFF 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x828D,-0x10(%rbp)	\ 404003 	*/.byte 0x48,0xC7,0x45,0xF0,0x8D,0x82,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40400B 	*/.byte 0x48,0x8B,0x5,0x88,0xE3,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 404012 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 404016 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 404019 	*/.byte 0x66,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 40401C 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x4016AB  { L, } 	\ 404020 E8 86 D6 FF FF 
;/     THEN   \  lea    0x1(%rdx),%rax
;/	0 TO OFF-EAX
/*	movq	$0x0,0x40222E  { OFF-EAX+5  } (%rip)	\ 404025 	*/.byte 0x48,0xC7,0x5,0xFE,0xE1,0xFF,0xFF,0x0,0x0,0x0,0x0
;/       M\ B DTST
/*	mov	%rax,-0x08(%rbp)	\ 404030 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xB,%eax	\ 404034 	*/.byte 0xB8,0xB,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404039 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40403D E8 F E5 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404042 	*/.byte 0xE9,0xD7,0xFE,0xFF,0xFF
;/
;/  OP0@ L@ FFFFFF AND
/*	mov	%rax,-0x08(%rbp)	\ 404047 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40404B 	*/.byte 0x48,0x8B,0x5,0x48,0xE3,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404052 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404054 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404059 	*/.byte 0x48,0x89,0x45,0xF0
;/ DUP 058d48 XOR	\ lea	X(%rip),%rax
/*	xor	$0x58D48,%rax	\ 40405D 	*/.byte 0x48,0x35,0x48,0x8D,0x5,0x0
/*	mov	-0x10(%rbp),%rdx	\ 404063 	*/.byte 0x48,0x8B,0x55,0xF0
;/ SWAP C0C748 <> AND	\ movq	$X,%rax
/*	mov	%rax,-0x10(%rbp)	\ 404067 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%rdx,-0x18(%rbp)	\ 40406B 	*/.byte 0x48,0x89,0x55,0xE8
/*	mov	$fimg+0x80C748,%eax	\ 40406F 	*/.byte 0xB8,0x48,0xC7,0xC0,0x0
/*	xor	-0x18(%rbp),%rax	\ 404074 	*/.byte 0x48,0x33,0x45,0xE8
/*		negq	%rax	\ 404078 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40407B 	*/.byte 0x48,0x19,0xC0
/*	and	-0x10(%rbp),%rax	\ 40407E 	*/.byte 0x48,0x23,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 404082 	*/.byte 0x48,0x89,0x45,0xF0
;/  OFF-EAX 0=
/*	mov	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 404086 	*/.byte 0x48,0x8B,0x5,0xA1,0xE1,0xFF,0xFF
/*	subq	$0x01,%rax	\ 40408D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404091 	*/.byte 0x48,0x19,0xC0
/*	or	-0x10(%rbp),%rax	\ 404094 	*/.byte 0x48,0xB,0x45,0xF0
;/  OR 0=
/*	subq	$0x01,%rax	\ 404098 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40409C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40409F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4040A2 	*/.byte 0x48,0x8B,0x45,0xF8
;/  M_WL
/*	jz	0x404182  { OPT-RULES+278  } 	\ 4040A6 	*/.byte 0xF,0x84,0xD6,0x0,0x0,0x0
;/    M\ 24 DTST
/*	mov	%rax,-0x08(%rbp)	\ 4040AC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x24,%eax	\ 4040B0 	*/.byte 0xB8,0x24,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4040B5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4040B9 E8 93 E4 FF FF 
;/      OP0@ 3 + SL@  OFF-EAX + 
/*	mov	%rax,-0x08(%rbp)	\ 4040BE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4040C2 	*/.byte 0x48,0x8B,0x5,0xD1,0xE2,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 4040C9 	*/.byte 0x48,0x8D,0x40,0x3
/*	lea	-0x08(%rbp),%rbp	\ 4040CD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40048A  { SL@ } 	\ 4040D1 E8 B4 C3 FF FF 
/*	add	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 4040D6 	*/.byte 0x48,0x3,0x5,0x51,0xE1,0xFF,0xFF
;/	DUP LONG?
/*	mov	%rax,-0x08(%rbp)	\ 4040DD 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 4040E1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401FE7  { LONG? } 	\ 4040E5 E8 FD DE FF FF 
;/	IF      OP0@ 3 + L!
	test	%rax,%rax	\ 4040EA 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 4040ED 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4040F1 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40411C  { OPT-RULES+212  } 	\ 4040F5 	*/.byte 0xF,0x84,0x21,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4040FB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4040FF 	*/.byte 0x48,0x8B,0x5,0x94,0xE2,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 404106 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x08(%rbp),%edx	\ 40410A 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 40410D 	*/.byte 0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 40410F 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 404113 	*/.byte 0x48,0x8D,0x6D,0x8
;/	ELSE  OP0@ L@ FFFFFF AND C0C748 XOR IF BREAK \ $X,%rax omly
/*	jmp	0x404160  { OPT-RULES+256  } 	\ 404117 	*/.byte 0xE9,0x44,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40411C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404120 	*/.byte 0x48,0x8B,0x5,0x73,0xE2,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404127 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404129 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x80C748,%eax	\ 40412E 	*/.byte 0x35,0x48,0xC7,0xC0,0x0
	test	%rax,%rax	\ 404133 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404136 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x404141  { OPT-RULES+237  } 	\ 40413A 	*/.byte 0xF,0x84,0x1,0x0,0x0,0x0
	ret		\ 404140 C3 
;/	   -6 ALLOT   $B8 C,  ,	\  movabs $X,%rax
/*	addq	$-0x06,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 404141 	*/.byte 0x48,0x83,0x5,0x7,0xD5,0xFF,0xFF,0xFA
/*	mov	%rax,-0x08(%rbp)	\ 404149 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xB8,%eax	\ 40414D 	*/.byte 0xB8,0xB8,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404152 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 404156 E8 93 D5 FF FF 
	call	0x401690  { , } 	\ 40415B E8 30 D5 FF FF 
;/	THEN
;/	 0 TO OFF-EAX
/*	movq	$0x0,0x40222E  { OFF-EAX+5  } (%rip)	\ 404160 	*/.byte 0x48,0xC7,0x5,0xC3,0xE0,0xFF,0xFF,0x0,0x0,0x0,0x0
;/
;/    M\ 25 DTST
/*	mov	%rax,-0x08(%rbp)	\ 40416B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x25,%eax	\ 40416F 	*/.byte 0xB8,0x25,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404174 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404178 E8 D4 E3 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40417D 	*/.byte 0xE9,0x9C,0xFD,0xFF,0xFF
;/
;/  OP0@ C@ B8 XOR
/*	mov	%rax,-0x08(%rbp)	\ 404182 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404186 	*/.byte 0x48,0x8B,0x5,0xD,0xE2,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 40418D 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x48,%al	\ 404190 	*/.byte 0x34,0xB8
/*	mov	%rax,-0x10(%rbp)	\ 404192 	*/.byte 0x48,0x89,0x45,0xF0
;/  OFF-EAX 0=
/*	mov	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 404196 	*/.byte 0x48,0x8B,0x5,0x91,0xE0,0xFF,0xFF
/*	subq	$0x01,%rax	\ 40419D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4041A1 	*/.byte 0x48,0x19,0xC0
/*	or	-0x10(%rbp),%rax	\ 4041A4 	*/.byte 0x48,0xB,0x45,0xF0
;/  OR 0=
/*	subq	$0x01,%rax	\ 4041A8 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4041AC 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4041AF 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4041B2 	*/.byte 0x48,0x8B,0x45,0xF8
;/  M_WL
/*	jz	0x40426F  { OPT-RULES+365  } 	\ 4041B6 	*/.byte 0xF,0x84,0xB3,0x0,0x0,0x0
;/    M\ 46 DTST
/*	mov	%rax,-0x08(%rbp)	\ 4041BC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x46,%eax	\ 4041C0 	*/.byte 0xB8,0x46,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4041C5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4041C9 E8 83 E3 FF FF 
;/      OP0@ 1+ L@  OFF-EAX +
/*	mov	%rax,-0x08(%rbp)	\ 4041CE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4041D2 	*/.byte 0x48,0x8B,0x5,0xC1,0xE1,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 4041D9 	*/.byte 0x8B,0x40,0x1
/*	add	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 4041DC 	*/.byte 0x48,0x3,0x5,0x4B,0xE0,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 4041E3 	*/.byte 0x48,0x89,0x45,0xF0
;/	DUP 0x100000000 U< 
/*	mov	%rax,-0x18(%rbp)	\ 4041E7 	*/.byte 0x48,0x89,0x45,0xE8
/*	movabs	$0x100000000,%rax	\ 4041EB 	*/.byte 0x48,0xB8,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0
/*	cmp	%rax,-0x18(%rbp)	\ 4041F5 	*/.byte 0x48,0x39,0x45,0xE8
/*	sbb	%rax,%rax	\ 4041F9 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4041FC 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 4041FF 	*/.byte 0x48,0x8B,0x45,0xF0
;/	IF      OP0@ 1+ L!
/*	lea	-0x08(%rbp),%rbp	\ 404203 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x40422E  { OPT-RULES+324  } 	\ 404207 	*/.byte 0xF,0x84,0x21,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40420D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404211 	*/.byte 0x48,0x8B,0x5,0x82,0xE1,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 404218 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x08(%rbp),%edx	\ 40421C 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 40421F 	*/.byte 0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 404221 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 404225 	*/.byte 0x48,0x8D,0x6D,0x8
;/	ELSE   -5 ALLOT   $B848 W,  ,	\  movabs $X,%rax
/*	jmp	0x40424D  { OPT-RULES+343  } 	\ 404229 	*/.byte 0xE9,0x1F,0x0,0x0,0x0
/*	addq	$-0x05,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40422E 	*/.byte 0x48,0x83,0x5,0x1A,0xD4,0xFF,0xFF,0xFB
/*	mov	%rax,-0x08(%rbp)	\ 404236 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xB848,%eax	\ 40423A 	*/.byte 0xB8,0x48,0xB8,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40423F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 404243 E8 84 D4 FF FF 
	call	0x401690  { , } 	\ 404248 E8 43 D4 FF FF 
;/	THEN
;/	 0 TO OFF-EAX
/*	movq	$0x0,0x40222E  { OFF-EAX+5  } (%rip)	\ 40424D 	*/.byte 0x48,0xC7,0x5,0xD6,0xDF,0xFF,0xFF,0x0,0x0,0x0,0x0
;/
;/    M\ 47 DTST
/*	mov	%rax,-0x08(%rbp)	\ 404258 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x47,%eax	\ 40425C 	*/.byte 0xB8,0x47,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404261 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404265 E8 E7 E2 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40426A 	*/.byte 0xE9,0xAF,0xFC,0xFF,0xFF
;/
;/  OP0@ @ 80000000FFFF AND 2548 = \ MO_TST_VAL AND  \ and $_,%rax
/*	mov	%rax,-0x08(%rbp)	\ 40426F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404273 	*/.byte 0x48,0x8B,0x5,0x20,0xE1,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40427A 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40427D 	*/.byte 0x48,0x89,0x45,0xF0
/*	movabs	$0x80000000FFFF,%rax	\ 404281 	*/.byte 0x48,0xB8,0xFF,0xFF,0x0,0x0,0x0,0x80,0x0,0x0
/*	and	-0x10(%rbp),%rax	\ 40428B 	*/.byte 0x48,0x23,0x45,0xF0
/*	xor	$0x2548,%rax	\ 40428F 	*/.byte 0x48,0x35,0x48,0x25,0x0,0x0
/*	subq	$0x01,%rax	\ 404295 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404299 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40429C 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40429F 	*/.byte 0x48,0x8B,0x45,0xF8
;/  M_WL
/*	jz	0x4042F1  { OPT-RULES+3E7  } 	\ 4042A3 	*/.byte 0xF,0x84,0x48,0x0,0x0,0x0
;/    M\ 54 DTST
/*	mov	%rax,-0x08(%rbp)	\ 4042A9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x54,%eax	\ 4042AD 	*/.byte 0xB8,0x54,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4042B2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4042B6 E8 96 E2 FF FF 
;/	OP0 -1 OPresize
/*	mov	%rax,-0x08(%rbp)	\ 4042BB 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 4042BF 	*/.byte 0x48,0x8D,0x5,0x8A,0xDF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 4042C6 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$-0x1,%rax	\ 4042CA 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 4042D1 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 4042D5 E8 FB E4 FF FF 
;/    M\ 53 DTST
/*	mov	%rax,-0x08(%rbp)	\ 4042DA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x53,%eax	\ 4042DE 	*/.byte 0xB8,0x53,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4042E3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4042E7 E8 65 E2 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4042EC 	*/.byte 0xE9,0x2D,0xFC,0xFF,0xFF
;/
;/  OP1 @ DUP :-SET U< IF DROP BREAK TO OP1@
/*	mov	%rax,-0x08(%rbp)	\ 4042F1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4042F5 	*/.byte 0x48,0x8B,0x5,0x5C,0xDF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 4042FC 	*/.byte 0x48,0x89,0x45,0xF0
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 404300 	*/.byte 0x48,0x3B,0x5,0x6E,0xE0,0xFF,0xFF
/*	sbb	%rax,%rax	\ 404307 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40430A 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40430D 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 404311 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x404324  { OPT-RULES+41A  } 	\ 404315 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 40431B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40431F 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 404323 C3 
/*	mov	%rax,0x4023A7  { OP1@+5  } (%rip)	\ 404324 	*/.byte 0x48,0x89,0x5,0x7C,0xE0,0xFF,0xFF
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40432B 	*/.byte 0x48,0x8B,0x5,0x75,0xE0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404332 	*/.byte 0x8B,0x0
;/
;/  OP1@ L@ FFFFFF AND
/*	and	$fimg+0xBFFFFF,%eax	\ 404334 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/  DUP 058d48 XOR	\ lea	X (%rip),%rax
/*	mov	%rax,-0x08(%rbp)	\ 404339 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$0x58D48,%rax	\ 40433D 	*/.byte 0x48,0x35,0x48,0x8D,0x5,0x0
/*	mov	-0x08(%rbp),%rdx	\ 404343 	*/.byte 0x48,0x8B,0x55,0xF8
;/ SWAP 408d48 <> AND	\ lea     -0x08(%rax),%rax 
/*	mov	%rax,-0x08(%rbp)	\ 404347 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 40434B 	*/.byte 0x48,0x89,0x55,0xF0
/*	mov	$fimg+0x8D48,%eax	\ 40434F 	*/.byte 0xB8,0x48,0x8D,0x40,0x0
/*	xor	-0x10(%rbp),%rax	\ 404354 	*/.byte 0x48,0x33,0x45,0xF0
/*		negq	%rax	\ 404358 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40435B 	*/.byte 0x48,0x19,0xC0
/*	and	-0x08(%rbp),%rax	\ 40435E 	*/.byte 0x48,0x23,0x45,0xF8
;/  OP0@ L@ FFFFFF AND 008b48 XOR	\ mov	(%rax),%rax
/*	mov	%rax,-0x08(%rbp)	\ 404362 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404366 	*/.byte 0x48,0x8B,0x5,0x2D,0xE0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40436D 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40436F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x8B48,%eax	\ 404374 	*/.byte 0x35,0x48,0x8B,0x0,0x0
/*	or	-0x08(%rbp),%rax	\ 404379 	*/.byte 0x48,0xB,0x45,0xF8
;/   OR  0=
/*	subq	$0x01,%rax	\ 40437D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404381 	*/.byte 0x48,0x19,0xC0
;/  M_WL  M\ 6 DTST
	test	%rax,%rax	\ 404384 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 404387 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40438B 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x4043F6  { OPT-RULES+4EC  } 	\ 40438F 	*/.byte 0xF,0x84,0x61,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404395 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x6,%eax	\ 404399 	*/.byte 0xB8,0x6,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40439E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4043A2 E8 AA E1 FF FF 
;/       600  OP1@ XOR! \  mov	X (%rip),%rax
/*	mov	%rax,-0x08(%rbp)	\ 4043A7 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x600,-0x10(%rbp)	\ 4043AB 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x6,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4043B3 	*/.byte 0x48,0x8B,0x5,0xED,0xDF,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 4043BA 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 4043BE E8 63 C1 FF FF 
;/       OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 4043C3 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4043C7 	*/.byte 0x48,0x8D,0x5,0x8A,0xDE,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4043CE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 4043D2 E8 B0 E0 FF FF 
;/       -3 ALLOT M\ 7 DTST
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4043D7 	*/.byte 0x48,0x83,0x5,0x71,0xD2,0xFF,0xFF,0xFD
/*	mov	%rax,-0x08(%rbp)	\ 4043DF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x7,%eax	\ 4043E3 	*/.byte 0xB8,0x7,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4043E8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4043EC E8 60 E1 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4043F1 	*/.byte 0xE9,0x28,0xFB,0xFF,0xFF
;/
;/OP1@ L@ FFFFFF AND 408D48 XOR \       lea     X(%rax),%rax
/*	mov	%rax,-0x08(%rbp)	\ 4043F6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4043FA 	*/.byte 0x48,0x8B,0x5,0xA6,0xDF,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404401 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404403 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x8D48,%eax	\ 404408 	*/.byte 0x35,0x48,0x8D,0x40,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40440D 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFEFF AND 00B60F XOR \         movz<bw>l  (%rax),%eax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404411 	*/.byte 0x48,0x8B,0x5,0x82,0xDF,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404418 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFEFF,%eax	\ 40441A 	*/.byte 0x25,0xFF,0xFE,0xFF,0x0
/*	xor	$0xB60F,%eax	\ 40441F 	*/.byte 0x35,0xF,0xB6,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 404424 	*/.byte 0x48,0xB,0x45,0xF0
;/   OR  0=
/*	subq	$0x01,%rax	\ 404428 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40442C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40442F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404432 	*/.byte 0x48,0x8B,0x45,0xF8
;/  M_WL  M\ 26 DTST
/*	jz	0x40449C  { OPT-RULES+592  } 	\ 404436 	*/.byte 0xF,0x84,0x60,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40443C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x26,%eax	\ 404440 	*/.byte 0xB8,0x26,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404445 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404449 E8 3 E1 FF FF 
;/       OP0@ W@  OP1@ W! \  movz<bw>l X(%rax),%eax
/*	mov	%rax,-0x08(%rbp)	\ 40444E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404452 	*/.byte 0x48,0x8B,0x5,0x41,0xDF,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 404459 	*/.byte 0xF,0xB7,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40445C 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404460 	*/.byte 0x48,0x8B,0x5,0x40,0xDF,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 404467 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 40446A 	*/.byte 0x66,0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40446D 	*/.byte 0x48,0x8D,0x5,0xE4,0xDD,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 404474 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404478 E8 A E0 FF FF 
;/       -3 ALLOT M\ 27 DTST
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40447D 	*/.byte 0x48,0x83,0x5,0xCB,0xD1,0xFF,0xFF,0xFD
/*	mov	%rax,-0x08(%rbp)	\ 404485 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x27,%eax	\ 404489 	*/.byte 0xB8,0x27,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40448E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404492 E8 BA E0 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404497 	*/.byte 0xE9,0x82,0xFA,0xFF,0xFF
;/
;/OP1@ L@ FFFFFF AND 408D48 XOR \       lea     X(%rax),%rax
/*	mov	%rax,-0x08(%rbp)	\ 40449C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4044A0 	*/.byte 0x48,0x8B,0x5,0x0,0xDF,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4044A7 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4044A9 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x8D48,%eax	\ 4044AE 	*/.byte 0x35,0x48,0x8D,0x40,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4044B3 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ W@ 008B XOR \         movz<bw>l  (%rax),%eax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4044B7 	*/.byte 0x48,0x8B,0x5,0xDC,0xDE,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 4044BE 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x8B,%rax	\ 4044C1 	*/.byte 0x48,0x35,0x8B,0x0,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 4044C7 	*/.byte 0x48,0xB,0x45,0xF0
;/   OR  0=
/*	subq	$0x01,%rax	\ 4044CB 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4044CF 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4044D2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4044D5 	*/.byte 0x48,0x8B,0x45,0xF8
;/  M_WL  M\ 96 DTST
/*	jz	0x404544  { OPT-RULES+63A  } 	\ 4044D9 	*/.byte 0xF,0x84,0x65,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4044DF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x96,%eax	\ 4044E3 	*/.byte 0xB8,0x96,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4044E8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4044EC E8 60 E0 FF FF 
;/	OP1@ 1+ L@ 6 XOR  OP1@ L! \  movq	X (%rip),%eax
/*	mov	%rax,-0x08(%rbp)	\ 4044F1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4044F5 	*/.byte 0x48,0x8B,0x5,0xAB,0xDE,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 4044FC 	*/.byte 0x8B,0x40,0x1
/*	xor	$0x6,%rax	\ 4044FF 	*/.byte 0x48,0x35,0x6,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404505 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404509 	*/.byte 0x48,0x8B,0x5,0x97,0xDE,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 404510 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 404513 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 404515 	*/.byte 0x48,0x8D,0x5,0x3C,0xDD,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 40451C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404520 E8 62 DF FF FF 
;/       -3 ALLOT
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 404525 	*/.byte 0x48,0x83,0x5,0x23,0xD1,0xFF,0xFF,0xFD
;/ M\ 97 DTST
/*	mov	%rax,-0x08(%rbp)	\ 40452D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x97,%eax	\ 404531 	*/.byte 0xB8,0x97,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404536 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40453A E8 12 E0 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40453F 	*/.byte 0xE9,0xDA,0xF9,0xFF,0xFF
;/
;/  OP1@ L@ FFFFFF AND D08948 XOR	\ mov	%rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 404544 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404548 	*/.byte 0x48,0x8B,0x5,0x58,0xDE,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40454F 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404551 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 404556 	*/.byte 0x35,0x48,0x89,0xD0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40455B 	*/.byte 0x48,0x89,0x45,0xF0
;/  OP0@ L@ FFFFFF AND 00B60F XOR	\ movzbl	(%rax),%eax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40455F 	*/.byte 0x48,0x8B,0x5,0x34,0xDE,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404566 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404568 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0xB60F,%eax	\ 40456D 	*/.byte 0x35,0xF,0xB6,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 404572 	*/.byte 0x48,0xB,0x45,0xF0
;/  OR  0=
/*	subq	$0x01,%rax	\ 404576 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40457A 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40457D 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404580 	*/.byte 0x48,0x8B,0x45,0xF8
;/  M_WL  M\ 8 DTST
/*	jz	0x4045E3  { OPT-RULES+6D9  } 	\ 404584 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40458A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x8,%eax	\ 40458E 	*/.byte 0xB8,0x8,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404593 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404597 E8 B5 DF FF FF 
;/	02b60f  OP1@ L! \           	movzbl (%rdx),%eax
/*	mov	%rax,-0x08(%rbp)	\ 40459C 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x2B60F,-0x10(%rbp)	\ 4045A0 	*/.byte 0x48,0xC7,0x45,0xF0,0xF,0xB6,0x2,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4045A8 	*/.byte 0x48,0x8B,0x5,0xF8,0xDD,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 4045AF 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 4045B2 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4045B4 	*/.byte 0x48,0x8D,0x5,0x9D,0xDC,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 4045BB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 4045BF E8 C3 DE FF FF 
;/       -3 ALLOT M\ 9 DTST
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4045C4 	*/.byte 0x48,0x83,0x5,0x84,0xD0,0xFF,0xFF,0xFD
/*	mov	%rax,-0x08(%rbp)	\ 4045CC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x9,%eax	\ 4045D0 	*/.byte 0xB8,0x9,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4045D5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4045D9 E8 73 DF FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4045DE 	*/.byte 0xE9,0x3B,0xF9,0xFF,0xFF
;/
;/OP1@ W@ 8B XOR		 \	mov     (%rax),%eax     # 42D551 8B 0
/*	mov	%rax,-0x08(%rbp)	\ 4045E3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4045E7 	*/.byte 0x48,0x8B,0x5,0xB9,0xDD,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 4045EE 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x8B,%rax	\ 4045F1 	*/.byte 0x48,0x35,0x8B,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4045F7 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND C06348 XOR \ movslq  %eax,%rax       # 42D553 48 63 C0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4045FB 	*/.byte 0x48,0x8B,0x5,0x98,0xDD,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404602 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404604 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x806348,%eax	\ 404609 	*/.byte 0x35,0x48,0x63,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 40460E 	*/.byte 0x48,0xB,0x45,0xF0
;/  OR  0=
/*	subq	$0x01,%rax	\ 404612 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404616 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404619 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40461C 	*/.byte 0x48,0x8B,0x45,0xF8
;/  M_WL  M\ 12 DTST
/*	jz	0x404685  { OPT-RULES+77B  } 	\ 404620 	*/.byte 0xF,0x84,0x5F,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404626 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x12,%eax	\ 40462A 	*/.byte 0xB8,0x12,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40462F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404633 E8 19 DF FF FF 
;/	OP0 @ W@ OP1 @ L! \ movslq (%rax),%rax
/*	mov	%rax,-0x08(%rbp)	\ 404638 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 40463C 	*/.byte 0x48,0x8B,0x5,0xD,0xDC,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 404643 	*/.byte 0xF,0xB7,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404646 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40464A 	*/.byte 0x48,0x8B,0x5,0x7,0xDC,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 404651 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 404654 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 404656 	*/.byte 0x48,0x8D,0x5,0xFB,0xDB,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 40465D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404661 E8 21 DE FF FF 
;/	-2 ALLOT
/*	addq	$-0x02,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 404666 	*/.byte 0x48,0x83,0x5,0xE2,0xCF,0xFF,0xFF,0xFE
;/	M\ 13 DTST
/*	mov	%rax,-0x08(%rbp)	\ 40466E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x13,%eax	\ 404672 	*/.byte 0xB8,0x13,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404677 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40467B E8 D1 DE FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404680 	*/.byte 0xE9,0x99,0xF8,0xFF,0xFF
;/
;/ J_COD FE AND 0x84 XOR
/*	mov	%rax,-0x08(%rbp)	\ 404685 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 404689 	*/.byte 0x48,0x8B,0x5,0x5D,0xDB,0xFF,0xFF
/*	and	$0xFE,%eax	\ 404690 	*/.byte 0x25,0xFE,0x0,0x0,0x0
/*	xor	$-0x7C,%al	\ 404695 	*/.byte 0x34,0x84
/*	mov	%rax,-0x10(%rbp)	\ 404697 	*/.byte 0x48,0x89,0x45,0xF0
;/  OP1@ L@ FFFFFF AND
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40469B 	*/.byte 0x48,0x8B,0x5,0x5,0xDD,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4046A2 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4046A4 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 4046A9 	*/.byte 0x48,0x89,0x45,0xE8
;/   DUP  F08148  XOR     \  xor	$_,%rax
/*	xor	$fimg+0xB08148,%rax	\ 4046AD 	*/.byte 0x48,0x35,0x48,0x81,0xF0,0x0
/*	mov	%rax,-0x20(%rbp)	\ 4046B3 	*/.byte 0x48,0x89,0x45,0xE0
;/  OVER  F08348  <> AND     \  xor	$_,%rax
/*	mov	-0x18(%rbp),%rax	\ 4046B7 	*/.byte 0x48,0x8B,0x45,0xE8
/*	xor	$fimg+0xB08348,%rax	\ 4046BB 	*/.byte 0x48,0x35,0x48,0x83,0xF0,0x0
/*		negq	%rax	\ 4046C1 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 4046C4 	*/.byte 0x48,0x19,0xC0
/*	and	-0x20(%rbp),%rax	\ 4046C7 	*/.byte 0x48,0x23,0x45,0xE0
/*	mov	%rax,-0x20(%rbp)	\ 4046CB 	*/.byte 0x48,0x89,0x45,0xE0
;/  OVER  E08348  <> AND     \  and	$_,%rax
/*	mov	-0x18(%rbp),%rax	\ 4046CF 	*/.byte 0x48,0x8B,0x45,0xE8
/*	xor	$fimg+0xA08348,%rax	\ 4046D3 	*/.byte 0x48,0x35,0x48,0x83,0xE0,0x0
/*		negq	%rax	\ 4046D9 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 4046DC 	*/.byte 0x48,0x19,0xC0
/*	and	-0x20(%rbp),%rax	\ 4046DF 	*/.byte 0x48,0x23,0x45,0xE0
/*	mov	-0x18(%rbp),%rdx	\ 4046E3 	*/.byte 0x48,0x8B,0x55,0xE8
;/  SWAP  F8C148  <> AND     \  and	$_,%rax
/*	mov	%rax,-0x18(%rbp)	\ 4046E7 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 4046EB 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$fimg+0xB8C148,%eax	\ 4046EF 	*/.byte 0xB8,0x48,0xC1,0xF8,0x0
/*	xor	-0x20(%rbp),%rax	\ 4046F4 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 4046F8 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 4046FB 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 4046FE 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 404702 	*/.byte 0x48,0xB,0x45,0xF0
;/  OR
/*	mov	%rax,-0x10(%rbp)	\ 404706 	*/.byte 0x48,0x89,0x45,0xF0
;/ OP0@ L@ FFFFFF AND c08548 XOR \      test    %rax,%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40470A 	*/.byte 0x48,0x8B,0x5,0x89,0xDC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404711 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404713 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x808548,%eax	\ 404718 	*/.byte 0x35,0x48,0x85,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 40471D 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR  0=
/*	subq	$0x01,%rax	\ 404721 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404725 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404728 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40472B 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 14 DTST
/*	jz	0x40477A  { OPT-RULES+870  } 	\ 40472F 	*/.byte 0xF,0x84,0x45,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404735 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x14,%eax	\ 404739 	*/.byte 0xB8,0x14,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40473E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404742 E8 A DE FF FF 
;/       OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 404747 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40474B 	*/.byte 0x48,0x8D,0x5,0x6,0xDB,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 404752 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404756 E8 2C DD FF FF 
;/	-3 ALLOT
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40475B 	*/.byte 0x48,0x83,0x5,0xED,0xCE,0xFF,0xFF,0xFD
;/	M\ 15 DTST
/*	mov	%rax,-0x08(%rbp)	\ 404763 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x15,%eax	\ 404767 	*/.byte 0xB8,0x15,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40476C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404770 E8 DC DD FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404775 	*/.byte 0xE9,0xA4,0xF7,0xFF,0xFF
;/
;/OP1@ 2+ W@ OP0@ 2+ W@ XOR	\	regs & indexes
/*	mov	%rax,-0x08(%rbp)	\ 40477A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40477E 	*/.byte 0x48,0x8B,0x5,0x22,0xDC,0xFF,0xFF
/*	movzw	0x02(%rax),%eax	\ 404785 	*/.byte 0xF,0xB7,0x40,0x2
/*	mov	%rax,-0x10(%rbp)	\ 404789 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40478D 	*/.byte 0x48,0x8B,0x5,0x6,0xDC,0xFF,0xFF
/*	movzw	0x02(%rax),%eax	\ 404794 	*/.byte 0xF,0xB7,0x40,0x2
/*	xor	-0x10(%rbp),%rax	\ 404798 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40479C 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ EFFDFF AND 458948 XOR OR \	mov 0x00(%rbp),%rax | %rax,0x00(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4047A0 	*/.byte 0x48,0x8B,0x5,0x0,0xDC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4047A7 	*/.byte 0x8B,0x0
/*	and	$fimg+0xAFFDFF,%eax	\ 4047A9 	*/.byte 0x25,0xFF,0xFD,0xEF,0x0
/*	xor	$fimg+0x58948,%eax	\ 4047AE 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4047B3 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4047B7 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ EFFDFF AND 458948 XOR OR \	mov 0x00(%rbp),%rax | %rax,0x00(%rbp)
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4047BB 	*/.byte 0x48,0x8B,0x5,0xD8,0xDB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4047C2 	*/.byte 0x8B,0x0
/*	and	$fimg+0xAFFDFF,%eax	\ 4047C4 	*/.byte 0x25,0xFF,0xFD,0xEF,0x0
/*	xor	$fimg+0x58948,%eax	\ 4047C9 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4047CE 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4047D2 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 4047D6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4047D9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4047DC 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 18 DTST
/*	jz	0x40482B  { OPT-RULES+921  } 	\ 4047E0 	*/.byte 0xF,0x84,0x45,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4047E6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x18,%eax	\ 4047EA 	*/.byte 0xB8,0x18,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4047EF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4047F3 E8 59 DD FF FF 
;/       OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 4047F8 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4047FC 	*/.byte 0x48,0x8D,0x5,0x55,0xDA,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 404803 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404807 E8 7B DC FF FF 
;/	-4 ALLOT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40480C 	*/.byte 0x48,0x83,0x5,0x3C,0xCE,0xFF,0xFF,0xFC
;/	M\ 19 DTST
/*	mov	%rax,-0x08(%rbp)	\ 404814 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x19,%eax	\ 404818 	*/.byte 0xB8,0x19,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40481D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404821 E8 2B DD FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404826 	*/.byte 0xE9,0xF3,0xF6,0xFF,0xFF
;/
;/OP1@ L@ FFFFFF AND f0894c XOR \	mov     %r14,%rax
/*	mov	%rax,-0x08(%rbp)	\ 40482B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40482F 	*/.byte 0x48,0x8B,0x5,0x71,0xDB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404836 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404838 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0xB0894C,%eax	\ 40483D 	*/.byte 0x35,0x4C,0x89,0xF0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404842 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 008b48 XOR \	mov     (%rax),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404846 	*/.byte 0x48,0x8B,0x5,0x4D,0xDB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40484D 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40484F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x8B48,%eax	\ 404854 	*/.byte 0x35,0x48,0x8B,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 404859 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 40485D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404861 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404864 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404867 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 1A DTST
/*	jz	0x4048CA  { OPT-RULES+9C0  } 	\ 40486B 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404871 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1A,%eax	\ 404875 	*/.byte 0xB8,0x1A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40487A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40487E E8 CE DC FF FF 
;/	068b49 OP1@ L! \ mov    (%r14),%rax
/*	mov	%rax,-0x08(%rbp)	\ 404883 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x68B49,-0x10(%rbp)	\ 404887 	*/.byte 0x48,0xC7,0x45,0xF0,0x49,0x8B,0x6,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40488F 	*/.byte 0x48,0x8B,0x5,0x11,0xDB,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 404896 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 404899 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40489B 	*/.byte 0x48,0x8D,0x5,0xB6,0xD9,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 4048A2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 4048A6 E8 DC DB FF FF 
;/	-3 ALLOT
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4048AB 	*/.byte 0x48,0x83,0x5,0x9D,0xCD,0xFF,0xFF,0xFD
;/	M\ 1B DTST
/*	mov	%rax,-0x08(%rbp)	\ 4048B3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1B,%eax	\ 4048B7 	*/.byte 0xB8,0x1B,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4048BC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4048C0 E8 8C DC FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4048C5 	*/.byte 0xE9,0x54,0xF6,0xFF,0xFF
;/
;/OP1@ L@ FFFFFF AND d08948 XOR \ mov     %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4048CA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4048CE 	*/.byte 0x48,0x8B,0x5,0xD2,0xDA,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4048D5 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4048D7 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 4048DC 	*/.byte 0x35,0x48,0x89,0xD0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4048E1 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 008b48 XOR \ mov     (%rax),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4048E5 	*/.byte 0x48,0x8B,0x5,0xAE,0xDA,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4048EC 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4048EE 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x8B48,%eax	\ 4048F3 	*/.byte 0x35,0x48,0x8B,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 4048F8 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 4048FC 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404900 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404903 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404906 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 1C DTST
/*	jz	0x404969  { OPT-RULES+A5F  } 	\ 40490A 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404910 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1C,%eax	\ 404914 	*/.byte 0xB8,0x1C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404919 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40491D E8 2F DC FF FF 
;/	028b48 OP1@ L! \ mov    (%rdx),%rax
/*	mov	%rax,-0x08(%rbp)	\ 404922 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x28B48,-0x10(%rbp)	\ 404926 	*/.byte 0x48,0xC7,0x45,0xF0,0x48,0x8B,0x2,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40492E 	*/.byte 0x48,0x8B,0x5,0x72,0xDA,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 404935 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 404938 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40493A 	*/.byte 0x48,0x8D,0x5,0x17,0xD9,0xFF,0xFF
;/	OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 404941 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404945 E8 3D DB FF FF 
;/	-3 ALLOT
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40494A 	*/.byte 0x48,0x83,0x5,0xFE,0xCC,0xFF,0xFF,0xFD
;/	M\ 1D DTST
/*	mov	%rax,-0x08(%rbp)	\ 404952 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1D,%eax	\ 404956 	*/.byte 0xB8,0x1D,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40495B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40495F E8 ED DB FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404964 	*/.byte 0xE9,0xB5,0xF5,0xFF,0xFF
;/J_COD F0 AND 0x80 XOR
/*	mov	%rax,-0x08(%rbp)	\ 404969 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 40496D 	*/.byte 0x48,0x8B,0x5,0x79,0xD8,0xFF,0xFF
/*	and	$0xF0,%eax	\ 404974 	*/.byte 0x25,0xF0,0x0,0x0,0x0
/*	xor	$-0x80,%al	\ 404979 	*/.byte 0x34,0x80
/*	mov	%rax,-0x10(%rbp)	\ 40497B 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ 1e88348 XOR OR		\ sub     $0x01,%rax      # 80406522      */
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40497F 	*/.byte 0x48,0x8B,0x5,0x21,0xDA,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404986 	*/.byte 0x8B,0x0
/*	xor	$0x1E88348,%rax	\ 404988 	*/.byte 0x48,0x35,0x48,0x83,0xE8,0x1
/*	or	-0x10(%rbp),%rax	\ 40498E 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 404992 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND c01948 XOR OR \ sbb     %rax,%rax       # 80406526
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404996 	*/.byte 0x48,0x8B,0x5,0xFD,0xD9,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40499D 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40499F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x801948,%eax	\ 4049A4 	*/.byte 0x35,0x48,0x19,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 4049A9 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4049AD 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 4049B1 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4049B4 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4049B7 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 20 DTST
/*	jz	0x404A33  { OPT-RULES+B29  } 	\ 4049BB 	*/.byte 0xF,0x84,0x72,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4049C1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20,%eax	\ 4049C5 	*/.byte 0xB8,0x20,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4049CA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4049CE E8 7E DB FF FF 
;/	C085 OP1@ 1+ W! \ test   %rax,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4049D3 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xC085,-0x10(%rbp)	\ 4049D7 	*/.byte 0x48,0xC7,0x45,0xF0,0x85,0xC0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4049DF 	*/.byte 0x48,0x8B,0x5,0xC1,0xD9,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 4049E6 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 4049EA 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 4049ED 	*/.byte 0x66,0x89,0x10
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 4049F0 	*/.byte 0x48,0x8B,0x5,0xF6,0xD7,0xFF,0xFF
;/	J_COD 1 XOR TO J_COD
/*	xor	$0x1,%rax	\ 4049F7 	*/.byte 0x48,0x35,0x1,0x0,0x0,0x0
/*	mov	%rax,0x4021ED  { J_COD+5  } (%rip)	\ 4049FD 	*/.byte 0x48,0x89,0x5,0xE9,0xD7,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 404A04 	*/.byte 0x48,0x8D,0x5,0x4D,0xD8,0xFF,0xFF
;/	OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 404A0B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404A0F E8 73 DA FF FF 
;/	-4 ALLOT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 404A14 	*/.byte 0x48,0x83,0x5,0x34,0xCC,0xFF,0xFF,0xFC
;/	M\ 21 DTST
/*	mov	%rax,-0x08(%rbp)	\ 404A1C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x21,%eax	\ 404A20 	*/.byte 0xB8,0x21,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404A25 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404A29 E8 23 DB FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404A2E 	*/.byte 0xE9,0xEB,0xF4,0xFF,0xFF
;/
;/OP1@ W@ 9248 XOR	\ xchg    %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 404A33 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404A37 	*/.byte 0x48,0x8B,0x5,0x69,0xD9,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 404A3E 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x9248,%rax	\ 404A41 	*/.byte 0x48,0x35,0x48,0x92,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404A47 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404A4B 	*/.byte 0x48,0x8B,0x5,0x48,0xD9,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404A52 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404A54 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 404A59 	*/.byte 0x48,0x89,0x45,0xE8
;/DUP	458948 XOR	\ mov     %rax,-0x08(%rbp)
/*	xor	$fimg+0x58948,%rax	\ 404A5D 	*/.byte 0x48,0x35,0x48,0x89,0x45,0x0
/*	mov	%rax,-0x20(%rbp)	\ 404A63 	*/.byte 0x48,0x89,0x45,0xE0
;/OVER	108948 <> AND	\ mov     %rdx,(%rax)
/*	mov	-0x18(%rbp),%rax	\ 404A67 	*/.byte 0x48,0x8B,0x45,0xE8
/*	xor	$0x108948,%rax	\ 404A6B 	*/.byte 0x48,0x35,0x48,0x89,0x10,0x0
/*		negq	%rax	\ 404A71 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 404A74 	*/.byte 0x48,0x19,0xC0
/*	and	-0x20(%rbp),%rax	\ 404A77 	*/.byte 0x48,0x23,0x45,0xE0
/*	mov	-0x18(%rbp),%rdx	\ 404A7B 	*/.byte 0x48,0x8B,0x55,0xE8
;/SWAP	100148 <> AND	\ add     %rdx,(%rax)
/*	mov	%rax,-0x18(%rbp)	\ 404A7F 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 404A83 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$0x100148,%eax	\ 404A87 	*/.byte 0xB8,0x48,0x1,0x10,0x0
/*	xor	-0x20(%rbp),%rax	\ 404A8C 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 404A90 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 404A93 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 404A96 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 404A9A 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR   0=
/*	subq	$0x01,%rax	\ 404A9E 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404AA2 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404AA5 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404AA8 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 2E DTST
/*	jz	0x404B80  { OPT-RULES+C76  } 	\ 404AAC 	*/.byte 0xF,0x84,0xCE,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404AB2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x2E,%eax	\ 404AB6 	*/.byte 0xB8,0x2E,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404ABB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404ABF E8 8D DA FF FF 
;/	OP0@ 2+ C@ 45 XOR
/*	mov	%rax,-0x08(%rbp)	\ 404AC4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404AC8 	*/.byte 0x48,0x8B,0x5,0xCB,0xD8,0xFF,0xFF
/*	movzb	0x02(%rax),%eax	\ 404ACF 	*/.byte 0xF,0xB6,0x40,0x2
/*	xor	$0x45,%rax	\ 404AD3 	*/.byte 0x48,0x35,0x45,0x0,0x0,0x0
	test	%rax,%rax	\ 404AD9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404ADC 	*/.byte 0x48,0x8B,0x45,0xF8
;/	IF	OP0@ W@ 020000 OR \ %rax,(%rdx)
/*	jz	0x404B1C  { OPT-RULES+C12  } 	\ 404AE0 	*/.byte 0xF,0x84,0x36,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404AE6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404AEA 	*/.byte 0x48,0x8B,0x5,0xA9,0xD8,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 404AF1 	*/.byte 0xF,0xB7,0x0
/*	or	$0x20000,%rax	\ 404AF4 	*/.byte 0x48,0xD,0x0,0x0,0x2,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404AFA 	*/.byte 0x48,0x89,0x45,0xF0
;/		1 OP0 +!
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 404AFE 	*/.byte 0x48,0x8D,0x5,0x4B,0xD7,0xFF,0xFF
/*	movq	$0x1,%rdx	\ 404B05 	*/.byte 0x48,0xC7,0xC2,0x1,0x0,0x0,0x0
/*	add	%rdx,(%rax)	\ 404B0C 	*/.byte 0x48,0x1,0x10
/*	mov	-0x10(%rbp),%rax	\ 404B0F 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 404B13 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	ELSE	OP0@ L@ 500000 OR \ %rax,(%rdx)
/*	jmp	0x404B4C  { OPT-RULES+C42  } 	\ 404B17 	*/.byte 0xE9,0x30,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404B1C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404B20 	*/.byte 0x48,0x8B,0x5,0x73,0xD8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404B27 	*/.byte 0x8B,0x0
/*	or	$fimg+0x100000,%rax	\ 404B29 	*/.byte 0x48,0xD,0x0,0x0,0x50,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404B2F 	*/.byte 0x48,0x89,0x45,0xF0
;/		2 OP0 +!
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 404B33 	*/.byte 0x48,0x8D,0x5,0x16,0xD7,0xFF,0xFF
/*	movq	$0x2,%rdx	\ 404B3A 	*/.byte 0x48,0xC7,0xC2,0x2,0x0,0x0,0x0
/*	add	%rdx,(%rax)	\ 404B41 	*/.byte 0x48,0x1,0x10
/*	mov	-0x10(%rbp),%rax	\ 404B44 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 404B48 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	THEN OP1@ L!	\ __	%rax,(%rdx)
/*	mov	%rax,-0x08(%rbp)	\ 404B4C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404B50 	*/.byte 0x48,0x8B,0x5,0x50,0xD8,0xFF,0xFF
/*	mov	-0x08(%rbp),%edx	\ 404B57 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 404B5A 	*/.byte 0x89,0x10
/*	movq	$0x9248,-0x08(%rbp)	\ 404B5C 	*/.byte 0x48,0xC7,0x45,0xF8,0x48,0x92,0x0,0x0
;/        9248 OP0 @ W!	\ xchg    %rdx,%rax
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 404B64 	*/.byte 0x48,0x8B,0x5,0xE5,0xD6,0xFF,0xFF
/*	mov	-0x08(%rbp),%edx	\ 404B6B 	*/.byte 0x8B,0x55,0xF8
/*	mov	%dx,(%rax)	\ 404B6E 	*/.byte 0x66,0x89,0x10
/*	mov	$0x2F,%eax	\ 404B71 	*/.byte 0xB8,0x2F,0x0,0x0,0x0
	call	0x402551  { DTST } 	\ 404B76 E8 D6 D9 FF FF 
;/	M\ 2F DTST
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404B7B 	*/.byte 0xE9,0x9E,0xF3,0xFF,0xFF
;/
;/OP1@ C@ B8 XOR \ movq    $0x108,%rax
/*	mov	%rax,-0x08(%rbp)	\ 404B80 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404B84 	*/.byte 0x48,0x8B,0x5,0x1C,0xD8,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 404B8B 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x48,%al	\ 404B8E 	*/.byte 0x34,0xB8
/*	mov	%rax,-0x10(%rbp)	\ 404B90 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ F7FFFF AND d0f748 XOR \ negq|notq    %rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404B94 	*/.byte 0x48,0x8B,0x5,0xFF,0xD7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404B9B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xB7FFFF,%eax	\ 404B9D 	*/.byte 0x25,0xFF,0xFF,0xF7,0x0
/*	xor	$fimg+0x90F748,%eax	\ 404BA2 	*/.byte 0x35,0x48,0xF7,0xD0,0x0
/*	or	-0x10(%rbp),%rax	\ 404BA7 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 404BAB 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404BAF 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404BB2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404BB5 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 48 DTST
/*	jz	0x404CA3  { OPT-RULES+D99  } 	\ 404BB9 	*/.byte 0xF,0x84,0xE4,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404BBF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x48,%eax	\ 404BC3 	*/.byte 0xB8,0x48,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404BC8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404BCC E8 80 D9 FF FF 
;/	OP1@ 1+ L@ OP0@ L@ 80000 AND IF NEGATE ELSE INVERT THEN
/*	mov	%rax,-0x08(%rbp)	\ 404BD1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404BD5 	*/.byte 0x48,0x8B,0x5,0xCB,0xD7,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 404BDC 	*/.byte 0x8B,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 404BDF 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404BE3 	*/.byte 0x48,0x8B,0x5,0xB0,0xD7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404BEA 	*/.byte 0x8B,0x0
/*	and	$0x80000,%eax	\ 404BEC 	*/.byte 0x25,0x0,0x0,0x8,0x0
	test	%rax,%rax	\ 404BF1 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 404BF4 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 404BF8 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x404C0A  { OPT-RULES+D00  } 	\ 404BFC 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
/*		negq	%rax	\ 404C02 	*/.byte 0x48,0xF7,0xD8
/*	jmp	0x404C0D  { OPT-RULES+D03  } 	\ 404C05 	*/.byte 0xE9,0x3,0x0,0x0,0x0
/*		notq	%rax	\ 404C0A 	*/.byte 0x48,0xF7,0xD0
;/       OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 404C0D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 404C11 	*/.byte 0x48,0x8D,0x5,0x40,0xD6,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 404C18 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404C1C E8 66 D8 FF FF 
;/	-8 ALLOT 48 C,
/*	addq	$-0x08,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 404C21 	*/.byte 0x48,0x83,0x5,0x27,0xCA,0xFF,0xFF,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 404C29 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x48,%eax	\ 404C2D 	*/.byte 0xB8,0x48,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404C32 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 404C36 E8 B3 CA FF FF 
;/	DUP LONG?
/*	mov	%rax,-0x08(%rbp)	\ 404C3B 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 404C3F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401FE7  { LONG? } 	\ 404C43 E8 9F D3 FF FF 
;/	IF      c0c7 W, L,
	test	%rax,%rax	\ 404C48 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 404C4B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 404C4F 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x404C75  { OPT-RULES+D6B  } 	\ 404C53 	*/.byte 0xF,0x84,0x1C,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404C59 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC0C7,%eax	\ 404C5D 	*/.byte 0xB8,0xC7,0xC0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404C62 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016CC  { W, } 	\ 404C66 E8 61 CA FF FF 
	call	0x4016AB  { L, } 	\ 404C6B E8 3B CA FF FF 
;/	ELSE   $B8 C,  ,	\  movabs $X,%rax
/*	jmp	0x404C8C  { OPT-RULES+D82  } 	\ 404C70 	*/.byte 0xE9,0x17,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404C75 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xB8,%eax	\ 404C79 	*/.byte 0xB8,0xB8,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404C7E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 404C82 E8 67 CA FF FF 
	call	0x401690  { , } 	\ 404C87 E8 4 CA FF FF 
;/	THEN
;/	M\ 49 DTST
/*	mov	%rax,-0x08(%rbp)	\ 404C8C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x49,%eax	\ 404C90 	*/.byte 0xB8,0x49,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404C95 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404C99 E8 B3 D8 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404C9E 	*/.byte 0xE9,0x7B,0xF2,0xFF,0xFF
;/OP1@ C@ B8 XOR \ movq    $0x108,%rax
/*	mov	%rax,-0x08(%rbp)	\ 404CA3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404CA7 	*/.byte 0x48,0x8B,0x5,0xF9,0xD6,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 404CAE 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x48,%al	\ 404CB1 	*/.byte 0x34,0xB8
/*	mov	%rax,-0x10(%rbp)	\ 404CB3 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ W@ C188 XOR \ mov     %al,%cl
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404CB7 	*/.byte 0x48,0x8B,0x5,0xDC,0xD6,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 404CBE 	*/.byte 0xF,0xB7,0x0
/*	xor	$0xC188,%rax	\ 404CC1 	*/.byte 0x48,0x35,0x88,0xC1,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 404CC7 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 404CCB 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404CCF 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404CD2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404CD5 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL	M\ 5E DTST
/*	jz	0x404D3B  { OPT-RULES+E31  } 	\ 404CD9 	*/.byte 0xF,0x84,0x5C,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404CDF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5E,%eax	\ 404CE3 	*/.byte 0xB8,0x5E,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404CE8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404CEC E8 60 D8 FF FF 
;/  B1 OP0@ C! OP1@ 1+ C@ OP0@ 1+ C!   \ mov    $8,%cl
/*	mov	%rax,-0x08(%rbp)	\ 404CF1 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xB1,-0x10(%rbp)	\ 404CF5 	*/.byte 0x48,0xC7,0x45,0xF0,0xB1,0x0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404CFD 	*/.byte 0x48,0x8B,0x5,0x96,0xD6,0xFF,0xFF
/*	mov	-0x10(%rbp),%dl	\ 404D04 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 404D07 	*/.byte 0x88,0x10
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404D09 	*/.byte 0x48,0x8B,0x5,0x97,0xD6,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 404D10 	*/.byte 0xF,0xB6,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 404D14 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404D18 	*/.byte 0x48,0x8B,0x5,0x7B,0xD6,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 404D1F 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 404D23 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 404D26 	*/.byte 0x88,0x10
/*	mov	$0x5F,%eax	\ 404D28 	*/.byte 0xB8,0x5F,0x0,0x0,0x0
;/	M\ 5F DTST
/*	lea	-0x08(%rbp),%rbp	\ 404D2D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404D31 E8 1B D8 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404D36 	*/.byte 0xE9,0xE3,0xF1,0xFF,0xFF
;/
;/
;/OP1@ L@ FFFFFF AND c0c748 XOR \ movq    $0x108,%rax
/*	mov	%rax,-0x08(%rbp)	\ 404D3B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404D3F 	*/.byte 0x48,0x8B,0x5,0x61,0xD6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404D46 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404D48 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x80C748,%eax	\ 404D4D 	*/.byte 0x35,0x48,0xC7,0xC0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404D52 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND d8f748 XOR \ negq    %rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404D56 	*/.byte 0x48,0x8B,0x5,0x3D,0xD6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404D5D 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404D5F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x98F748,%eax	\ 404D64 	*/.byte 0x35,0x48,0xF7,0xD8,0x0
/*	or	-0x10(%rbp),%rax	\ 404D69 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 404D6D 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404D71 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404D74 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404D77 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 36 DTST
/*	jz	0x404DED  { OPT-RULES+EE3  } 	\ 404D7B 	*/.byte 0xF,0x84,0x6C,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404D81 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x36,%eax	\ 404D85 	*/.byte 0xB8,0x36,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404D8A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404D8E E8 BE D7 FF FF 
;/	OP1@ 3 + SL@  NEGATE OP1@ 3 + L!
/*	mov	%rax,-0x08(%rbp)	\ 404D93 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404D97 	*/.byte 0x48,0x8B,0x5,0x9,0xD6,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 404D9E 	*/.byte 0x48,0x8D,0x40,0x3
/*	lea	-0x08(%rbp),%rbp	\ 404DA2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40048A  { SL@ } 	\ 404DA6 E8 DF B6 FF FF 
/*		negq	%rax	\ 404DAB 	*/.byte 0x48,0xF7,0xD8
/*	mov	%rax,-0x08(%rbp)	\ 404DAE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404DB2 	*/.byte 0x48,0x8B,0x5,0xEE,0xD5,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 404DB9 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x08(%rbp),%edx	\ 404DBD 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 404DC0 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 404DC2 	*/.byte 0x48,0x8D,0x5,0x8F,0xD4,0xFF,0xFF
	call	0x402487  { ToOP0 } 	\ 404DC9 E8 B9 D6 FF FF 
;/       OP1 ToOP0
;/	-3 ALLOT
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 404DCE 	*/.byte 0x48,0x83,0x5,0x7A,0xC8,0xFF,0xFF,0xFD
;/	M\ 37 DTST
/*	mov	%rax,-0x08(%rbp)	\ 404DD6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x37,%eax	\ 404DDA 	*/.byte 0xB8,0x37,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404DDF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404DE3 E8 69 D7 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404DE8 	*/.byte 0xE9,0x31,0xF1,0xFF,0xFF
;/
;/OP1@ W@ 9248 XOR		\ xchg    %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 404DED 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404DF1 	*/.byte 0x48,0x8B,0x5,0xAF,0xD5,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 404DF8 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x9248,%rax	\ 404DFB 	*/.byte 0x48,0x35,0x48,0x92,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404E01 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND d08948 XOR	\ mov     %rdx,%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404E05 	*/.byte 0x48,0x8B,0x5,0x8E,0xD5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404E0C 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404E0E 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 404E13 	*/.byte 0x35,0x48,0x89,0xD0,0x0
/*	or	-0x10(%rbp),%rax	\ 404E18 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 404E1C 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404E20 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404E23 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404E26 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 3A DTST
/*	jz	0x404E75  { OPT-RULES+F6B  } 	\ 404E2A 	*/.byte 0xF,0x84,0x45,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404E30 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3A,%eax	\ 404E34 	*/.byte 0xB8,0x3A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404E39 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404E3D E8 F D7 FF FF 
;/       OP2 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 404E42 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 404E46 	*/.byte 0x48,0x8D,0x5,0x13,0xD4,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 404E4D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 404E51 E8 31 D6 FF FF 
;/	-5 ALLOT
/*	addq	$-0x05,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 404E56 	*/.byte 0x48,0x83,0x5,0xF2,0xC7,0xFF,0xFF,0xFB
;/	M\ 3B DTST
/*	mov	%rax,-0x08(%rbp)	\ 404E5E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3B,%eax	\ 404E62 	*/.byte 0xB8,0x3B,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404E67 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404E6B E8 E1 D6 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404E70 	*/.byte 0xE9,0xA9,0xF0,0xFF,0xFF
;/
;/OP1@ @ 80000000FF AND 25 XOR \ and $_,%rax
/*	mov	%rax,-0x08(%rbp)	\ 404E75 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404E79 	*/.byte 0x48,0x8B,0x5,0x27,0xD5,0xFF,0xFF
/*	mov	(%rax),%rax	\ 404E80 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404E83 	*/.byte 0x48,0x89,0x45,0xF0
/*	movabs	$0x80000000FF,%rax	\ 404E87 	*/.byte 0x48,0xB8,0xFF,0x0,0x0,0x0,0x80,0x0,0x0,0x0
/*	and	-0x10(%rbp),%rax	\ 404E91 	*/.byte 0x48,0x23,0x45,0xF0
/*	xor	$0x25,%rax	\ 404E95 	*/.byte 0x48,0x35,0x25,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404E9B 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ 80000000FFFF AND 3548 XOR \ XOR $_,%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404E9F 	*/.byte 0x48,0x8B,0x5,0xF4,0xD4,0xFF,0xFF
/*	mov	(%rax),%rax	\ 404EA6 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x18(%rbp)	\ 404EA9 	*/.byte 0x48,0x89,0x45,0xE8
/*	movabs	$0x80000000FFFF,%rax	\ 404EAD 	*/.byte 0x48,0xB8,0xFF,0xFF,0x0,0x0,0x0,0x80,0x0,0x0
/*	and	-0x18(%rbp),%rax	\ 404EB7 	*/.byte 0x48,0x23,0x45,0xE8
/*	xor	$0x3548,%rax	\ 404EBB 	*/.byte 0x48,0x35,0x48,0x35,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 404EC1 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 404EC5 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404EC9 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404ECC 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404ECF 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 4E DTST
/*	jz	0x404F6E  { OPT-RULES+1064  } 	\ 404ED3 	*/.byte 0xF,0x84,0x95,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404ED9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x4E,%eax	\ 404EDD 	*/.byte 0xB8,0x4E,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404EE2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404EE6 E8 66 D6 FF FF 
;/	OP0 -1 OPresize
/*	mov	%rax,-0x08(%rbp)	\ 404EEB 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 404EEF 	*/.byte 0x48,0x8D,0x5,0x5A,0xD3,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 404EF6 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$-0x1,%rax	\ 404EFA 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 404F01 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 404F05 E8 CB D8 FF FF 
;/	OP0 @ 1+ L@ FF ANDC 0= IF 34 OP0 @ C! -3 ALLOT THEN
/*	mov	%rax,-0x08(%rbp)	\ 404F0A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 404F0E 	*/.byte 0x48,0x8B,0x5,0x3B,0xD3,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 404F15 	*/.byte 0x8B,0x40,0x1
/*	andq	$-0x100,%rax	\ 404F18 	*/.byte 0x48,0x81,0xE0,0x0,0xFF,0xFF,0xFF
/*	subq	$0x01,%rax	\ 404F1F 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404F23 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404F26 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404F29 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x404F57  { OPT-RULES+104D  } 	\ 404F2D 	*/.byte 0xF,0x84,0x24,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404F33 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x34,-0x10(%rbp)	\ 404F37 	*/.byte 0x48,0xC7,0x45,0xF0,0x34,0x0,0x0,0x0
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 404F3F 	*/.byte 0x48,0x8B,0x5,0xA,0xD3,0xFF,0xFF
/*	mov	-0x10(%rbp),%dl	\ 404F46 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 404F49 	*/.byte 0x88,0x10
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 404F4B 	*/.byte 0x48,0x83,0x5,0xFD,0xC6,0xFF,0xFF,0xFD
/*	mov	-0x08(%rbp),%rax	\ 404F53 	*/.byte 0x48,0x8B,0x45,0xF8
;/	
;/	M\ 4F DTST
/*	mov	%rax,-0x08(%rbp)	\ 404F57 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x4F,%eax	\ 404F5B 	*/.byte 0xB8,0x4F,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404F60 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404F64 E8 E8 D5 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 404F69 	*/.byte 0xE9,0xB0,0xEF,0xFF,0xFF
;/
;/OP1@ L@ FFFFFF AND 00B60F  XOR \ movzb	(%rax),%eax	# 80406746 	*/.byte 
/*	mov	%rax,-0x08(%rbp)	\ 404F6E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 404F72 	*/.byte 0x48,0x8B,0x5,0x2E,0xD4,0xFF,0xFF
/*	mov	(%rax),%eax	\ 404F79 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 404F7B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0xB60F,%eax	\ 404F80 	*/.byte 0x35,0xF,0xB6,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 404F85 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ 80000000FFFF AND 3548 XOR \ XOR $_,%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 404F89 	*/.byte 0x48,0x8B,0x5,0xA,0xD4,0xFF,0xFF
/*	mov	(%rax),%rax	\ 404F90 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x18(%rbp)	\ 404F93 	*/.byte 0x48,0x89,0x45,0xE8
/*	movabs	$0x80000000FFFF,%rax	\ 404F97 	*/.byte 0x48,0xB8,0xFF,0xFF,0x0,0x0,0x0,0x80,0x0,0x0
/*	and	-0x18(%rbp),%rax	\ 404FA1 	*/.byte 0x48,0x23,0x45,0xE8
/*	xor	$0x3548,%rax	\ 404FA5 	*/.byte 0x48,0x35,0x48,0x35,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 404FAB 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 404FAF 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 404FB3 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 404FB6 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 404FB9 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 50 DTST
/*	jz	0x405058  { OPT-RULES+114E  } 	\ 404FBD 	*/.byte 0xF,0x84,0x95,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 404FC3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x50,%eax	\ 404FC7 	*/.byte 0xB8,0x50,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 404FCC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 404FD0 E8 7C D5 FF FF 
;/	OP0 -1 OPresize
/*	mov	%rax,-0x08(%rbp)	\ 404FD5 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 404FD9 	*/.byte 0x48,0x8D,0x5,0x70,0xD2,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 404FE0 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$-0x1,%rax	\ 404FE4 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 404FEB 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 404FEF E8 E1 D7 FF FF 
;/	OP0 @ 1+ L@ FF ANDC 0= IF 34 OP0 @ C! -3 ALLOT THEN
/*	mov	%rax,-0x08(%rbp)	\ 404FF4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 404FF8 	*/.byte 0x48,0x8B,0x5,0x51,0xD2,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 404FFF 	*/.byte 0x8B,0x40,0x1
/*	andq	$-0x100,%rax	\ 405002 	*/.byte 0x48,0x81,0xE0,0x0,0xFF,0xFF,0xFF
/*	subq	$0x01,%rax	\ 405009 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40500D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405010 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405013 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x405041  { OPT-RULES+1137  } 	\ 405017 	*/.byte 0xF,0x84,0x24,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40501D 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x34,-0x10(%rbp)	\ 405021 	*/.byte 0x48,0xC7,0x45,0xF0,0x34,0x0,0x0,0x0
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 405029 	*/.byte 0x48,0x8B,0x5,0x20,0xD2,0xFF,0xFF
/*	mov	-0x10(%rbp),%dl	\ 405030 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 405033 	*/.byte 0x88,0x10
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 405035 	*/.byte 0x48,0x83,0x5,0x13,0xC6,0xFF,0xFF,0xFD
/*	mov	-0x08(%rbp),%rax	\ 40503D 	*/.byte 0x48,0x8B,0x45,0xF8
;/	
;/	M\ 51 DTST
/*	mov	%rax,-0x08(%rbp)	\ 405041 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x51,%eax	\ 405045 	*/.byte 0xB8,0x51,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40504A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40504E E8 FE D4 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405053 	*/.byte 0xE9,0xC6,0xEE,0xFF,0xFF
;/
;/OP1@ @ FFFFFF80FF AND B8 XOR \ mov $X,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405058 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40505C 	*/.byte 0x48,0x8B,0x5,0x44,0xD3,0xFF,0xFF
/*	mov	(%rax),%rax	\ 405063 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405066 	*/.byte 0x48,0x89,0x45,0xF0
/*	movabs	$0xFFFFFF80FF,%rax	\ 40506A 	*/.byte 0x48,0xB8,0xFF,0x80,0xFF,0xFF,0xFF,0x0,0x0,0x0
/*	and	-0x10(%rbp),%rax	\ 405074 	*/.byte 0x48,0x23,0x45,0xF0
/*	xor	$0xB8,%rax	\ 405078 	*/.byte 0x48,0x35,0xB8,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40507E 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FEFFFF AND C60149 XOR \ add     %rax,%r14|15
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405082 	*/.byte 0x48,0x8B,0x5,0x11,0xD3,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405089 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBEFFFF,%eax	\ 40508B 	*/.byte 0x25,0xFF,0xFF,0xFE,0x0
/*	xor	$fimg+0x860149,%eax	\ 405090 	*/.byte 0x35,0x49,0x1,0xC6,0x0
/*	or	-0x10(%rbp),%rax	\ 405095 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=
/*	subq	$0x01,%rax	\ 405099 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40509D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4050A0 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4050A3 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 8E DTST
/*	jz	0x405162  { OPT-RULES+1258  } 	\ 4050A7 	*/.byte 0xF,0x84,0xB5,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4050AD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x8E,%eax	\ 4050B1 	*/.byte 0xB8,0x8E,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4050B6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4050BA E8 92 D4 FF FF 
;/	OP1@ 1+ C@ OP0@ 2+ C@
/*	mov	%rax,-0x08(%rbp)	\ 4050BF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4050C3 	*/.byte 0x48,0x8B,0x5,0xDD,0xD2,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 4050CA 	*/.byte 0xF,0xB6,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 4050CE 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4050D2 	*/.byte 0x48,0x8B,0x5,0xC1,0xD2,0xFF,0xFF
/*	movzb	0x02(%rax),%eax	\ 4050D9 	*/.byte 0xF,0xB6,0x40,0x2
/*	mov	%rax,-0x18(%rbp)	\ 4050DD 	*/.byte 0x48,0x89,0x45,0xE8
;/       OP1 ToOP0
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4050E1 	*/.byte 0x48,0x8D,0x5,0x70,0xD1,0xFF,0xFF
/*	lea	-0x18(%rbp),%rbp	\ 4050E8 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x402487  { ToOP0 } 	\ 4050EC E8 96 D3 FF FF 
;/	-3 ALLOT
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4050F1 	*/.byte 0x48,0x83,0x5,0x57,0xC5,0xFF,0xFF,0xFD
;/       OP0 4 OPinsert
/*	mov	%rax,-0x08(%rbp)	\ 4050F9 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 4050FD 	*/.byte 0x48,0x8D,0x5,0x4C,0xD1,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 405104 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x4,%eax	\ 405108 	*/.byte 0xB8,0x4,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40510D 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4028C0  { OPinsert } 	\ 405111 E8 AA D7 FF FF 
;/	OP1@ 2+ C!
/*	mov	%rax,-0x08(%rbp)	\ 405116 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40511A 	*/.byte 0x48,0x8B,0x5,0x86,0xD2,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 405121 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x08(%rbp),%dl	\ 405125 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 405128 	*/.byte 0x88,0x10
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40512A 	*/.byte 0x48,0x8B,0x5,0x76,0xD2,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 405131 	*/.byte 0x48,0x8D,0x40,0x3
;/	OP1@ 3+ C!
/*	mov	0x00(%rbp),%dl	\ 405135 	*/.byte 0x8A,0x55,0x0
/*	mov	%dl,(%rax)	\ 405138 	*/.byte 0x88,0x10
/*	movq	$0x8349,0x00(%rbp)	\ 40513A 	*/.byte 0x48,0xC7,0x45,0x0,0x49,0x83,0x0,0x0
;/         8349 OP1@ W! \ add    $X,%r14		
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405142 	*/.byte 0x48,0x8B,0x5,0x5E,0xD2,0xFF,0xFF
/*	mov	0x00(%rbp),%edx	\ 405149 	*/.byte 0x8B,0x55,0x0
/*	mov	%dx,(%rax)	\ 40514C 	*/.byte 0x66,0x89,0x10
/*	mov	$0x8F,%eax	\ 40514F 	*/.byte 0xB8,0x8F,0x0,0x0,0x0
/*	lea	0x08(%rbp),%rbp	\ 405154 	*/.byte 0x48,0x8D,0x6D,0x8
;/	M\ 8F DTST
	call	0x402551  { DTST } 	\ 405158 E8 F4 D3 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40515D 	*/.byte 0xE9,0xBC,0xED,0xFF,0xFF
;/
;/OP1@ 1+ L@  OP0@ 3+ C@ << FFFFFFFF ANDC  
/*	mov	%rax,-0x08(%rbp)	\ 405162 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405166 	*/.byte 0x48,0x8B,0x5,0x3A,0xD2,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 40516D 	*/.byte 0x8B,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 405170 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405174 	*/.byte 0x48,0x8B,0x5,0x1F,0xD2,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40517B 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%al,%cl	\ 40517F 	*/.byte 0x88,0xC1
/*	mov	-0x10(%rbp),%rax	\ 405181 	*/.byte 0x48,0x8B,0x45,0xF0
	shlq	%cl,%rax	\ 405185 48 D3 E0 
/*	mov	%rax,-0x10(%rbp)	\ 405188 	*/.byte 0x48,0x89,0x45,0xF0
/*	movabs	$-0x100000000,%rax	\ 40518C 	*/.byte 0x48,0xB8,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF
/*	and	-0x10(%rbp),%rax	\ 405196 	*/.byte 0x48,0x23,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40519A 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ C@  B8 XOR OR \ mov $X,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40519E 	*/.byte 0x48,0x8B,0x5,0x2,0xD2,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 4051A5 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x48,%al	\ 4051A8 	*/.byte 0x34,0xB8
/*	or	-0x10(%rbp),%rax	\ 4051AA 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4051AE 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND E0C148 XOR OR \ shl     $0x03,%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4051B2 	*/.byte 0x48,0x8B,0x5,0xE1,0xD1,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4051B9 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4051BB 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0xA0C148,%eax	\ 4051C0 	*/.byte 0x35,0x48,0xC1,0xE0,0x0
/*	or	-0x10(%rbp),%rax	\ 4051C5 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4051C9 	*/.byte 0x48,0x83,0xE8,0x1
;/ 0= M_WL  M\ 92 DTST
/*	sbb	%rax,%rax	\ 4051CD 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4051D0 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4051D3 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x405258  { OPT-RULES+134E  } 	\ 4051D7 	*/.byte 0xF,0x84,0x7B,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4051DD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x92,%eax	\ 4051E1 	*/.byte 0xB8,0x92,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4051E6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4051EA E8 62 D3 FF FF 
;/	OP1@ 1+ L@  OP0@ 3+ C@ << OP1@ 1+ L!
/*	mov	%rax,-0x08(%rbp)	\ 4051EF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4051F3 	*/.byte 0x48,0x8B,0x5,0xAD,0xD1,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 4051FA 	*/.byte 0x8B,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 4051FD 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405201 	*/.byte 0x48,0x8B,0x5,0x92,0xD1,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 405208 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%al,%cl	\ 40520C 	*/.byte 0x88,0xC1
/*	mov	-0x10(%rbp),%rax	\ 40520E 	*/.byte 0x48,0x8B,0x45,0xF0
	shlq	%cl,%rax	\ 405212 48 D3 E0 
/*	mov	%rax,-0x10(%rbp)	\ 405215 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405219 	*/.byte 0x48,0x8B,0x5,0x87,0xD1,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 405220 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 405224 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 405227 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 405229 	*/.byte 0x48,0x8D,0x5,0x28,0xD0,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 405230 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 405234 E8 4E D2 FF FF 
;/        -4 ALLOT	
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 405239 	*/.byte 0x48,0x83,0x5,0xF,0xC4,0xFF,0xFF,0xFC
;/	M\ 93 DTST
/*	mov	%rax,-0x08(%rbp)	\ 405241 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x93,%eax	\ 405245 	*/.byte 0xB8,0x93,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40524A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40524E E8 FE D2 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405253 	*/.byte 0xE9,0xC6,0xEC,0xFF,0xFF
;/
;/OP1@ 1+ L@ 2* FFFFFFFF ANDC  
/*	mov	%rax,-0x08(%rbp)	\ 405258 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40525C 	*/.byte 0x48,0x8B,0x5,0x44,0xD1,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 405263 	*/.byte 0x8B,0x40,0x1
/*	lea	(%rax,%rax,1),%rax	\ 405266 	*/.byte 0x48,0x8D,0x4,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40526A 	*/.byte 0x48,0x89,0x45,0xF0
/*	movabs	$-0x100000000,%rax	\ 40526E 	*/.byte 0x48,0xB8,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF
/*	and	-0x10(%rbp),%rax	\ 405278 	*/.byte 0x48,0x23,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40527C 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ C@  B8 XOR OR \ mov $X,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405280 	*/.byte 0x48,0x8B,0x5,0x20,0xD1,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 405287 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x48,%al	\ 40528A 	*/.byte 0x34,0xB8
/*	or	-0x10(%rbp),%rax	\ 40528C 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405290 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ 00048D48 XOR OR \ lea     (%rax,%rax,1),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405294 	*/.byte 0x48,0x8B,0x5,0xFF,0xD0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40529B 	*/.byte 0x8B,0x0
/*	xor	$0x48D48,%rax	\ 40529D 	*/.byte 0x48,0x35,0x48,0x8D,0x4,0x0
/*	or	-0x10(%rbp),%rax	\ 4052A3 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4052A7 	*/.byte 0x48,0x83,0xE8,0x1
;/ 0= M_WL  M\ 94 DTST
/*	sbb	%rax,%rax	\ 4052AB 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4052AE 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4052B1 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x405322  { OPT-RULES+1418  } 	\ 4052B5 	*/.byte 0xF,0x84,0x67,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4052BB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x94,%eax	\ 4052BF 	*/.byte 0xB8,0x94,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4052C4 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4052C8 E8 84 D2 FF FF 
;/	OP1@ 1+ L@  2* OP1@ 1+ L!
/*	mov	%rax,-0x08(%rbp)	\ 4052CD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4052D1 	*/.byte 0x48,0x8B,0x5,0xCF,0xD0,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 4052D8 	*/.byte 0x8B,0x40,0x1
/*	lea	(%rax,%rax,1),%rax	\ 4052DB 	*/.byte 0x48,0x8D,0x4,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4052DF 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4052E3 	*/.byte 0x48,0x8B,0x5,0xBD,0xD0,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 4052EA 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 4052EE 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 4052F1 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4052F3 	*/.byte 0x48,0x8D,0x5,0x5E,0xCF,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 4052FA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 4052FE E8 84 D1 FF FF 
;/        -4 ALLOT	
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 405303 	*/.byte 0x48,0x83,0x5,0x45,0xC3,0xFF,0xFF,0xFC
;/	M\ 95 DTST
/*	mov	%rax,-0x08(%rbp)	\ 40530B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x95,%eax	\ 40530F 	*/.byte 0xB8,0x95,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405314 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405318 E8 34 D2 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40531D 	*/.byte 0xE9,0xFC,0xEB,0xFF,0xFF
;/
;/ OP1@ L@ FFFFFF AND
/*	mov	%rax,-0x08(%rbp)	\ 405322 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405326 	*/.byte 0x48,0x8B,0x5,0x7A,0xD0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40532D 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40532F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405334 	*/.byte 0x48,0x89,0x45,0xF0
;/ DUP  f08148 XOR		\ xor     $X,%rax
/*	xor	$fimg+0xB08148,%rax	\ 405338 	*/.byte 0x48,0x35,0x48,0x81,0xF0,0x0
/*	mov	-0x10(%rbp),%rdx	\ 40533E 	*/.byte 0x48,0x8B,0x55,0xF0
;/ SWAP 053348 <> AND	\ xor     X(%rip),%rax
/*	mov	%rax,-0x10(%rbp)	\ 405342 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%rdx,-0x18(%rbp)	\ 405346 	*/.byte 0x48,0x89,0x55,0xE8
/*	mov	$0x53348,%eax	\ 40534A 	*/.byte 0xB8,0x48,0x33,0x5,0x0
/*	xor	-0x18(%rbp),%rax	\ 40534F 	*/.byte 0x48,0x33,0x45,0xE8
/*		negq	%rax	\ 405353 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 405356 	*/.byte 0x48,0x19,0xC0
/*	and	-0x10(%rbp),%rax	\ 405359 	*/.byte 0x48,0x23,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40535D 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR OR \ mov     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405361 	*/.byte 0x48,0x8B,0x5,0x32,0xD0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405368 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40536A 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 40536F 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405374 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 405378 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 40537C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40537F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405382 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 16 DTST
/*	jz	0x40541C  { OPT-RULES+1512  } 	\ 405386 	*/.byte 0xF,0x84,0x90,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40538C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x16,%eax	\ 405390 	*/.byte 0xB8,0x16,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405395 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405399 E8 B3 D1 FF FF 
;/	OP1@ 1+ C@ 33 XOR
/*	mov	%rax,-0x08(%rbp)	\ 40539E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4053A2 	*/.byte 0x48,0x8B,0x5,0xFE,0xCF,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 4053A9 	*/.byte 0xF,0xB6,0x40,0x1
/*	xor	$0x33,%rax	\ 4053AD 	*/.byte 0x48,0x35,0x33,0x0,0x0,0x0
	test	%rax,%rax	\ 4053B3 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4053B6 	*/.byte 0x48,0x8B,0x45,0xF8
;/	IF  	F8 OP1@ 2+ C!  \ cmp    $X,%rax
/*	jz	0x4053E5  { OPT-RULES+14DB  } 	\ 4053BA 	*/.byte 0xF,0x84,0x25,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4053C0 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xF8,-0x10(%rbp)	\ 4053C4 	*/.byte 0x48,0xC7,0x45,0xF0,0xF8,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4053CC 	*/.byte 0x48,0x8B,0x5,0xD4,0xCF,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 4053D3 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%dl	\ 4053D7 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 4053DA 	*/.byte 0x88,0x10
/*	mov	-0x08(%rbp),%rax	\ 4053DC 	*/.byte 0x48,0x8B,0x45,0xF8
;/	ELSE 	3B OP1@ 1+ C!  \ cmp    X(%rip),%rax
/*	jmp	0x405405  { OPT-RULES+14FB  } 	\ 4053E0 	*/.byte 0xE9,0x20,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4053E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x3B,-0x10(%rbp)	\ 4053E9 	*/.byte 0x48,0xC7,0x45,0xF0,0x3B,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4053F1 	*/.byte 0x48,0x8B,0x5,0xAF,0xCF,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 4053F8 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 4053FC 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 4053FF 	*/.byte 0x88,0x10
/*	mov	-0x08(%rbp),%rax	\ 405401 	*/.byte 0x48,0x8B,0x45,0xF8
;/	THEN
;/	M\ 17 DTST
/*	mov	%rax,-0x08(%rbp)	\ 405405 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x17,%eax	\ 405409 	*/.byte 0xB8,0x17,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40540E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405412 E8 3A D1 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405417 	*/.byte 0xE9,0x2,0xEB,0xFF,0xFF
;/
;/OP1@ W@		3548	XOR	\ xor     $X,%rax
/*	mov	%rax,-0x08(%rbp)	\ 40541C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405420 	*/.byte 0x48,0x8B,0x5,0x80,0xCF,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 405427 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x3548,%rax	\ 40542A 	*/.byte 0x48,0x35,0x48,0x35,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405430 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR	OR \ mov     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405434 	*/.byte 0x48,0x8B,0x5,0x5F,0xCF,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40543B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40543D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 405442 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405447 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 40544B 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 40544F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405452 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405455 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 4C DTST
/*	jz	0x4054A0  { OPT-RULES+1596  } 	\ 405459 	*/.byte 0xF,0x84,0x41,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40545F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x4C,%eax	\ 405463 	*/.byte 0xB8,0x4C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405468 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40546C E8 E0 D0 FF FF 
;/	3D OP1@	1+ C!  \ cmp	$X,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405471 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x3D,-0x10(%rbp)	\ 405475 	*/.byte 0x48,0xC7,0x45,0xF0,0x3D,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40547D 	*/.byte 0x48,0x8B,0x5,0x23,0xCF,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 405484 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 405488 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 40548B 	*/.byte 0x88,0x10
/*	mov	$0x4D,%eax	\ 40548D 	*/.byte 0xB8,0x4D,0x0,0x0,0x0
;/	M\ 4D DTST
/*	lea	-0x08(%rbp),%rbp	\ 405492 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405496 E8 B6 D0 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40549B 	*/.byte 0xE9,0x7E,0xEA,0xFF,0xFF
;/
;/OP1@ C@ FE AND 34 XOR    \ xor $0x48,%al|eax
/*	mov	%rax,-0x08(%rbp)	\ 4054A0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4054A4 	*/.byte 0x48,0x8B,0x5,0xFC,0xCE,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 4054AB 	*/.byte 0xF,0xB6,0x0
/*	and	$0xFE,%eax	\ 4054AE 	*/.byte 0x25,0xFE,0x0,0x0,0x0
/*	xor	$0x34,%al	\ 4054B3 	*/.byte 0x34,0x34
/*	mov	%rax,-0x10(%rbp)	\ 4054B5 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR \ mov     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4054B9 	*/.byte 0x48,0x8B,0x5,0xDA,0xCE,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4054C0 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4054C2 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 4054C7 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4054CC 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR  0=
/*	subq	$0x01,%rax	\ 4054D0 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4054D4 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4054D7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4054DA 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 56 DTST
/*	jz	0x405529  { OPT-RULES+161F  } 	\ 4054DE 	*/.byte 0xF,0x84,0x45,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4054E4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x56,%eax	\ 4054E8 	*/.byte 0xB8,0x56,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4054ED 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4054F1 E8 5B D0 FF FF 
;/	08 OP1@	XOR! \ cmp    $0x48,%al|eax	
/*	mov	%rax,-0x08(%rbp)	\ 4054F6 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x8,-0x10(%rbp)	\ 4054FA 	*/.byte 0x48,0xC7,0x45,0xF0,0x8,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405502 	*/.byte 0x48,0x8B,0x5,0x9E,0xCE,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 405509 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 40550D E8 14 B0 FF FF 
;/	M\ 57 DTST
/*	mov	%rax,-0x08(%rbp)	\ 405512 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x57,%eax	\ 405516 	*/.byte 0xB8,0x57,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40551B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40551F E8 2D D0 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405524 	*/.byte 0xE9,0xF5,0xE9,0xFF,0xFF
;/
;/OP1@ L@ FFFFFF AND F08348 XOR \ xor	$-0x02,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405529 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40552D 	*/.byte 0x48,0x8B,0x5,0x73,0xCE,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405534 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405536 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0xB08348,%eax	\ 40553B 	*/.byte 0x35,0x48,0x83,0xF0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405540 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR \ mov     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405544 	*/.byte 0x48,0x8B,0x5,0x4F,0xCE,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40554B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40554D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 405552 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405557 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR  0=
/*	subq	$0x01,%rax	\ 40555B 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40555F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405562 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405565 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 56 DTST
/*	jz	0x4055B0  { OPT-RULES+16A6  } 	\ 405569 	*/.byte 0xF,0x84,0x41,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40556F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x56,%eax	\ 405573 	*/.byte 0xB8,0x56,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405578 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40557C E8 D0 CF FF FF 
;/	F8 OP1@ 2+ C! \ cmp    $-0x02,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405581 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xF8,-0x10(%rbp)	\ 405585 	*/.byte 0x48,0xC7,0x45,0xF0,0xF8,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40558D 	*/.byte 0x48,0x8B,0x5,0x13,0xCE,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 405594 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%dl	\ 405598 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 40559B 	*/.byte 0x88,0x10
/*	mov	$0x57,%eax	\ 40559D 	*/.byte 0xB8,0x57,0x0,0x0,0x0
;/	M\ 57 DTST
/*	lea	-0x08(%rbp),%rbp	\ 4055A2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4055A6 E8 A6 CF FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4055AB 	*/.byte 0xE9,0x6E,0xE9,0xFF,0xFF
;/
;/OP1@ L@ FFFFFF AND 453348 XOR \ xor	-0x10(%rbp),%rax
/*	mov	%rax,-0x08(%rbp)	\ 4055B0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4055B4 	*/.byte 0x48,0x8B,0x5,0xEC,0xCD,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4055BB 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4055BD 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x53348,%eax	\ 4055C2 	*/.byte 0x35,0x48,0x33,0x45,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4055C7 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR \ mov     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4055CB 	*/.byte 0x48,0x8B,0x5,0xC8,0xCD,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4055D2 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4055D4 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 4055D9 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4055DE 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR  0=
/*	subq	$0x01,%rax	\ 4055E2 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4055E6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4055E9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4055EC 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 58 DTST
/*	jz	0x405637  { OPT-RULES+172D  } 	\ 4055F0 	*/.byte 0xF,0x84,0x41,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4055F6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x58,%eax	\ 4055FA 	*/.byte 0xB8,0x58,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4055FF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405603 E8 49 CF FF FF 
;/	3B OP1@ 1+ C! \ cmp    -0x10(%rbp),%rax
/*	mov	%rax,-0x08(%rbp)	\ 405608 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x3B,-0x10(%rbp)	\ 40560C 	*/.byte 0x48,0xC7,0x45,0xF0,0x3B,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405614 	*/.byte 0x48,0x8B,0x5,0x8C,0xCD,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 40561B 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 40561F 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 405622 	*/.byte 0x88,0x10
/*	mov	$0x59,%eax	\ 405624 	*/.byte 0xB8,0x59,0x0,0x0,0x0
;/	
;/	M\ 59 DTST
/*	lea	-0x08(%rbp),%rbp	\ 405629 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40562D E8 1F CF FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405632 	*/.byte 0xE9,0xE7,0xE8,0xFF,0xFF
;/
;/OP1@ L@ FFFFFF AND F0894C XOR \ mov	%r14,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405637 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40563B 	*/.byte 0x48,0x8B,0x5,0x65,0xCD,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405642 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405644 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0xB0894C,%eax	\ 405649 	*/.byte 0x35,0x4C,0x89,0xF0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40564E 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458948 XOR \ mov	%rax,-8(%rbp)
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405652 	*/.byte 0x48,0x8B,0x5,0x41,0xCD,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405659 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40565B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 405660 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405665 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR  0=
/*	subq	$0x01,%rax	\ 405669 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40566D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405670 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405673 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 74 DTST
/*	jz	0x4056C2  { OPT-RULES+17B8  } 	\ 405677 	*/.byte 0xF,0x84,0x45,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40567D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x74,%eax	\ 405681 	*/.byte 0xB8,0x74,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405686 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40568A E8 C2 CE FF FF 
;/	300004 OP0@ XOR! \ mov	%r14,-0x10(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 40568F 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x300004,-0x10(%rbp)	\ 405693 	*/.byte 0x48,0xC7,0x45,0xF0,0x4,0x0,0x30,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40569B 	*/.byte 0x48,0x8B,0x5,0xF8,0xCC,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 4056A2 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 4056A6 E8 7B AE FF FF 
;/	M\ 75 DTST
/*	mov	%rax,-0x08(%rbp)	\ 4056AB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x75,%eax	\ 4056AF 	*/.byte 0xB8,0x75,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4056B4 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4056B8 E8 94 CE FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4056BD 	*/.byte 0xE9,0x5C,0xE8,0xFF,0xFF
;/
;/OP1@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 4056C2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4056C6 	*/.byte 0x48,0x8B,0x5,0xDA,0xCC,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 4056CD 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 4056D1 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4056D5 	*/.byte 0x48,0x8B,0x5,0xBE,0xCC,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 4056DC 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 4056E0 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4056E4 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 558948 XOR OR \      mov     %rdx,X(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4056E8 	*/.byte 0x48,0x8B,0x5,0xB8,0xCC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4056EF 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4056F1 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x158948,%eax	\ 4056F6 	*/.byte 0x35,0x48,0x89,0x55,0x0
/*	or	-0x10(%rbp),%rax	\ 4056FB 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4056FF 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ ADD|OR|AND|XOR<> OR \     __  X(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405703 	*/.byte 0x48,0x8B,0x5,0x90,0xCC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40570A 	*/.byte 0x8B,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40570C 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402BBD  { ADD|OR|AND|XOR<> } 	\ 405710 E8 A8 D4 FF FF 
/*	or	0x00(%rbp),%rax	\ 405715 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 405719 	*/.byte 0x48,0x83,0xE8,0x1
;/0= M_WL  M\ 5A DTST
/*	sbb	%rax,%rax	\ 40571D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405720 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 405723 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 405727 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x40579A  { OPT-RULES+1890  } 	\ 40572B 	*/.byte 0xF,0x84,0x69,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 405731 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5A,%eax	\ 405735 	*/.byte 0xB8,0x5A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40573A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40573E E8 E CE FF FF 
;/	2 OP0@ 1+ XOR!
/*	mov	%rax,-0x08(%rbp)	\ 405743 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x2,-0x10(%rbp)	\ 405747 	*/.byte 0x48,0xC7,0x45,0xF0,0x2,0x0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40574F 	*/.byte 0x48,0x8B,0x5,0x44,0xCC,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 405756 	*/.byte 0x48,0x8D,0x40,0x1
/*	lea	-0x10(%rbp),%rbp	\ 40575A 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 40575E E8 C3 AD FF FF 
;/	D0 OP0@ 2+ C!	\ add    %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405763 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xD0,-0x10(%rbp)	\ 405767 	*/.byte 0x48,0xC7,0x45,0xF0,0xD0,0x0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40576F 	*/.byte 0x48,0x8B,0x5,0x24,0xCC,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 405776 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%dl	\ 40577A 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 40577D 	*/.byte 0x88,0x10
/*	addq	$-0x01,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40577F 	*/.byte 0x48,0x83,0x5,0xC9,0xBE,0xFF,0xFF,0xFF
;/        -1 ALLOT
/*	mov	$0x5B,%eax	\ 405787 	*/.byte 0xB8,0x5B,0x0,0x0,0x0
;/	M\ 5B DTST
/*	lea	-0x08(%rbp),%rbp	\ 40578C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405790 E8 BC CD FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405795 	*/.byte 0xE9,0x84,0xE7,0xFF,0xFF
;/
;/OP1@ NEWRAX0
/*	mov	%rax,-0x08(%rbp)	\ 40579A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40579E 	*/.byte 0x48,0x8B,0x5,0x2,0xCC,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4057A5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x403327  { NEWRAX0 } 	\ 4057A9 E8 79 DB FF FF 
;/OP1@ L@ C0BE0F48 <> AND \  movsbq	%al,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4057AE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4057B2 	*/.byte 0x48,0x8B,0x5,0xEE,0xCB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4057B9 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4057BB 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0xC0BE0F48,%eax	\ 4057BF 	*/.byte 0xB8,0x48,0xF,0xBE,0xC0
/*	xor	-0x10(%rbp),%rax	\ 4057C4 	*/.byte 0x48,0x33,0x45,0xF0
/*		negq	%rax	\ 4057C8 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 4057CB 	*/.byte 0x48,0x19,0xC0
/*	and	-0x08(%rbp),%rax	\ 4057CE 	*/.byte 0x48,0x23,0x45,0xF8
;/OP0@ NEWRAX0+
/*	mov	%rax,-0x08(%rbp)	\ 4057D2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4057D6 	*/.byte 0x48,0x8B,0x5,0xBD,0xCB,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4057DD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x403425  { NEWRAX0+ } 	\ 4057E1 E8 3F DC FF FF 
;/OP0@ L@ FFFFFF AND C01948 <> AND OR \  sbb     %rax,%rax        
/*	mov	%rax,-0x08(%rbp)	\ 4057E6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4057EA 	*/.byte 0x48,0x8B,0x5,0xA9,0xCB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4057F1 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4057F3 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x801948,%rax	\ 4057F8 	*/.byte 0x48,0x35,0x48,0x19,0xC0,0x0
/*		negq	%rax	\ 4057FE 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 405801 	*/.byte 0x48,0x19,0xC0
/*	and	-0x08(%rbp),%rax	\ 405804 	*/.byte 0x48,0x23,0x45,0xF8
/*	or	0x00(%rbp),%rax	\ 405808 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 40580C 	*/.byte 0x48,0x83,0xE8,0x1
;/0= M_WL  M\ 68 DTST
/*	sbb	%rax,%rax	\ 405810 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405813 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 405816 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40581A 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x405861  { OPT-RULES+1957  } 	\ 40581E 	*/.byte 0xF,0x84,0x3D,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 405824 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x68,%eax	\ 405828 	*/.byte 0xB8,0x68,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40582D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405831 E8 1B CD FF FF 
;/	OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 405836 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40583A 	*/.byte 0x48,0x8D,0x5,0x17,0xCA,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 405841 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 405845 E8 55 D1 FF FF 
;/	M\ 69 DTST
/*	mov	%rax,-0x08(%rbp)	\ 40584A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x69,%eax	\ 40584E 	*/.byte 0xB8,0x69,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405853 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405857 E8 F5 CC FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40585C 	*/.byte 0xE9,0xBD,0xE6,0xFF,0xFF
;/
;/OP1@ L@ 00048d48 XOR \      lea     (%rax,%rax,1),%rax
/*	mov	%rax,-0x08(%rbp)	\ 405861 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405865 	*/.byte 0x48,0x8B,0x5,0x3B,0xCB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40586C 	*/.byte 0x8B,0x0
/*	xor	$0x48D48,%rax	\ 40586E 	*/.byte 0x48,0x35,0x48,0x8D,0x4,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405874 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ 00048d48 XOR \      lea     (%rax,%rax,1),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405878 	*/.byte 0x48,0x8B,0x5,0x1B,0xCB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40587F 	*/.byte 0x8B,0x0
/*	xor	$0x48D48,%rax	\ 405881 	*/.byte 0x48,0x35,0x48,0x8D,0x4,0x0
/*	or	-0x10(%rbp),%rax	\ 405887 	*/.byte 0x48,0xB,0x45,0xF0
;/OR 0= M_WL  M\ 6A DTST
/*	subq	$0x01,%rax	\ 40588B 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40588F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405892 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405895 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4058F8  { OPT-RULES+19EE  } 	\ 405899 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40589F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x6A,%eax	\ 4058A3 	*/.byte 0xB8,0x6A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4058A8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4058AC E8 A0 CC FF FF 
;/        02e0c148 OP1@ L! \ shl    $0x2,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4058B1 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x2E0C148,-0x10(%rbp)	\ 4058B5 	*/.byte 0x48,0xC7,0x45,0xF0,0x48,0xC1,0xE0,0x2
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4058BD 	*/.byte 0x48,0x8B,0x5,0xE3,0xCA,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 4058C4 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 4058C7 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4058C9 	*/.byte 0x48,0x8D,0x5,0x88,0xC9,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 4058D0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 4058D4 E8 AE CB FF FF 
;/        -4 ALLOT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4058D9 	*/.byte 0x48,0x83,0x5,0x6F,0xBD,0xFF,0xFF,0xFC
;/	M\ 6B DTST
/*	mov	%rax,-0x08(%rbp)	\ 4058E1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x6B,%eax	\ 4058E5 	*/.byte 0xB8,0x6B,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4058EA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4058EE E8 5E CC FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4058F3 	*/.byte 0xE9,0x26,0xE6,0xFF,0xFF
;/
;/OP1@ L@ 02e0c148 XOR \       shl    $0x2,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4058F8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4058FC 	*/.byte 0x48,0x8B,0x5,0xA4,0xCA,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405903 	*/.byte 0x8B,0x0
/*	xor	$0x2E0C148,%rax	\ 405905 	*/.byte 0x48,0x35,0x48,0xC1,0xE0,0x2
/*	mov	%rax,-0x10(%rbp)	\ 40590B 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ 00048d48 XOR \      lea     (%rax,%rax,1),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40590F 	*/.byte 0x48,0x8B,0x5,0x84,0xCA,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405916 	*/.byte 0x8B,0x0
/*	xor	$0x48D48,%rax	\ 405918 	*/.byte 0x48,0x35,0x48,0x8D,0x4,0x0
/*	or	-0x10(%rbp),%rax	\ 40591E 	*/.byte 0x48,0xB,0x45,0xF0
;/OR 0= M_WL  M\ 6C DTST
/*	subq	$0x01,%rax	\ 405922 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 405926 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405929 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40592C 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40598F  { OPT-RULES+1A85  } 	\ 405930 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 405936 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x6C,%eax	\ 40593A 	*/.byte 0xB8,0x6C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40593F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405943 E8 9 CC FF FF 
;/        03e0c148 OP1@ L! \ shl    $0x3,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405948 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x3E0C148,-0x10(%rbp)	\ 40594C 	*/.byte 0x48,0xC7,0x45,0xF0,0x48,0xC1,0xE0,0x3
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405954 	*/.byte 0x48,0x8B,0x5,0x4C,0xCA,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 40595B 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 40595E 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 405960 	*/.byte 0x48,0x8D,0x5,0xF1,0xC8,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 405967 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 40596B E8 17 CB FF FF 
;/        -4 ALLOT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 405970 	*/.byte 0x48,0x83,0x5,0xD8,0xBC,0xFF,0xFF,0xFC
;/	M\ 6D DTST
/*	mov	%rax,-0x08(%rbp)	\ 405978 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x6D,%eax	\ 40597C 	*/.byte 0xB8,0x6D,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405981 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405985 E8 C7 CB FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40598A 	*/.byte 0xE9,0x8F,0xE5,0xFF,0xFF
;/OP1@ 3 + C@ OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 40598F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405993 	*/.byte 0x48,0x8B,0x5,0xD,0xCA,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40599A 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 40599E 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4059A2 	*/.byte 0x48,0x8B,0x5,0xF1,0xC9,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 4059A9 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 4059AD 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4059B1 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND 45c748 XOR OR \ movq    $X,-0x10(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4059B5 	*/.byte 0x48,0x8B,0x5,0xEB,0xC9,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4059BC 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4059BF 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x5C748,%eax	\ 4059C4 	*/.byte 0x35,0x48,0xC7,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4059C9 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4059CD 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 453348 XOR OR \ xor     -0x10(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4059D1 	*/.byte 0x48,0x8B,0x5,0xC2,0xC9,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4059D8 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4059DB 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x53348,%eax	\ 4059E0 	*/.byte 0x35,0x48,0x33,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4059E5 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4059E9 	*/.byte 0x48,0x83,0xE8,0x1
;/0= M_WL  M\ 80 DTST
/*	sbb	%rax,%rax	\ 4059ED 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4059F0 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4059F3 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x405A64  { OPT-RULES+1B5A  } 	\ 4059F7 	*/.byte 0xF,0x84,0x67,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4059FD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x80,%eax	\ 405A01 	*/.byte 0xB8,0x80,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405A06 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405A0A E8 42 CB FF FF 
;/	35 OP0@	1+ C! \  xor    $X,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405A0F 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x35,-0x10(%rbp)	\ 405A13 	*/.byte 0x48,0xC7,0x45,0xF0,0x35,0x0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405A1B 	*/.byte 0x48,0x8B,0x5,0x78,0xC9,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 405A22 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 405A26 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 405A29 	*/.byte 0x88,0x10
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405A2B 	*/.byte 0x48,0x8B,0x5,0x75,0xC9,0xFF,0xFF
;/	OP1@ 4 + L@ OP0@ 2+ L! \  xor    $X,%rax
/*	mov	0x04(%rax),%eax	\ 405A32 	*/.byte 0x8B,0x40,0x4
/*	mov	%rax,-0x10(%rbp)	\ 405A35 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405A39 	*/.byte 0x48,0x8B,0x5,0x5A,0xC9,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 405A40 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%edx	\ 405A44 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 405A47 	*/.byte 0x89,0x10
/*	addq	$0x02,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 405A49 	*/.byte 0x48,0x83,0x5,0xFF,0xBB,0xFF,0xFF,0x2
;/	2 ALLOT
/*	mov	$0x81,%eax	\ 405A51 	*/.byte 0xB8,0x81,0x0,0x0,0x0
;/	M\ 81 DTST
/*	lea	-0x08(%rbp),%rbp	\ 405A56 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405A5A E8 F2 CA FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405A5F 	*/.byte 0xE9,0xBA,0xE4,0xFF,0xFF
;/
;/  OP2 @ DUP :-SET U< IF DROP BREAK TO OP2@
/*	mov	%rax,-0x08(%rbp)	\ 405A64 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 405A68 	*/.byte 0x48,0x8B,0x5,0xF1,0xC7,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 405A6F 	*/.byte 0x48,0x89,0x45,0xF0
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 405A73 	*/.byte 0x48,0x3B,0x5,0xFB,0xC8,0xFF,0xFF
/*	sbb	%rax,%rax	\ 405A7A 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405A7D 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 405A80 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 405A84 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x405A97  { OPT-RULES+1B8D  } 	\ 405A88 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 405A8E 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 405A92 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 405A96 C3 
/*	mov	%rax,0x4023B4  { OP2@+5  } (%rip)	\ 405A97 	*/.byte 0x48,0x89,0x5,0x16,0xC9,0xFF,0xFF
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405A9E 	*/.byte 0x48,0x8B,0x5,0xF,0xC9,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405AA5 	*/.byte 0x8B,0x0
;/
;/OP2@ L@ FFFFFF AND d8f748 XOR	\ negq    %rax
/*	and	$fimg+0xBFFFFF,%eax	\ 405AA7 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x98F748,%eax	\ 405AAC 	*/.byte 0x35,0x48,0xF7,0xD8,0x0
;/OP1@ L@ FFFFFF AND 450348 XOR OR \ add     -0x10(%rbp),%rax
/*	mov	%rax,-0x08(%rbp)	\ 405AB1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405AB5 	*/.byte 0x48,0x8B,0x5,0xEB,0xC8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405ABC 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405ABE 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x50348,%eax	\ 405AC3 	*/.byte 0x35,0x48,0x3,0x45,0x0
/*	or	-0x08(%rbp),%rax	\ 405AC8 	*/.byte 0x48,0xB,0x45,0xF8
;/OP0@ L@ FFFFFF AND d8f748 XOR OR \ negq    %rax
/*	mov	%rax,-0x08(%rbp)	\ 405ACC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405AD0 	*/.byte 0x48,0x8B,0x5,0xC3,0xC8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405AD7 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405AD9 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x98F748,%eax	\ 405ADE 	*/.byte 0x35,0x48,0xF7,0xD8,0x0
/*	or	-0x08(%rbp),%rax	\ 405AE3 	*/.byte 0x48,0xB,0x45,0xF8
;/  0=
/*	subq	$0x01,%rax	\ 405AE7 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 405AEB 	*/.byte 0x48,0x19,0xC0
;/ M_WL  M\ 1E DTST
	test	%rax,%rax	\ 405AEE 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 405AF1 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 405AF5 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x405B78  { OPT-RULES+1C6E  } 	\ 405AF9 	*/.byte 0xF,0x84,0x79,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 405AFF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1E,%eax	\ 405B03 	*/.byte 0xB8,0x1E,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405B08 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405B0C E8 40 CA FF FF 
;/	28 OP1@ 1+ XOR!  \	sub    -0x10(%rbp),%rax
/*	mov	%rax,-0x08(%rbp)	\ 405B11 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x28,-0x10(%rbp)	\ 405B15 	*/.byte 0x48,0xC7,0x45,0xF0,0x28,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405B1D 	*/.byte 0x48,0x8B,0x5,0x83,0xC8,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 405B24 	*/.byte 0x48,0x8D,0x40,0x1
/*	lea	-0x10(%rbp),%rbp	\ 405B28 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 405B2C E8 F5 A9 FF FF 
;/	OP2 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 405B31 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 405B35 	*/.byte 0x48,0x8D,0x5,0x24,0xC7,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 405B3C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 405B40 E8 5A CE FF FF 
;/	OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 405B45 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 405B49 	*/.byte 0x48,0x8D,0x5,0x8,0xC7,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 405B50 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 405B54 E8 2E C9 FF FF 
;/	-3 ALLOT
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 405B59 	*/.byte 0x48,0x83,0x5,0xEF,0xBA,0xFF,0xFF,0xFD
;/	M\ 1F DTST
/*	mov	%rax,-0x08(%rbp)	\ 405B61 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x1F,%eax	\ 405B65 	*/.byte 0xB8,0x1F,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405B6A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405B6E E8 DE C9 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405B73 	*/.byte 0xE9,0xA6,0xE3,0xFF,0xFF
;/
;/OP2@ L@ FFFFFF AND 058d48 XOR	\ lea     X(%rip),%rax
/*	mov	%rax,-0x08(%rbp)	\ 405B78 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405B7C 	*/.byte 0x48,0x8B,0x5,0x31,0xC8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405B83 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405B85 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58D48,%eax	\ 405B8A 	*/.byte 0x35,0x48,0x8D,0x5,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405B8F 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405B93 	*/.byte 0x48,0x8B,0x5,0xD,0xC8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405B9A 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405B9C 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 405BA1 	*/.byte 0x48,0x89,0x45,0xE8
;/DUP	108948 XOR		\ mov     %rdx,(%rax)
/*	xor	$0x108948,%rax	\ 405BA5 	*/.byte 0x48,0x35,0x48,0x89,0x10,0x0
/*	mov	-0x18(%rbp),%rdx	\ 405BAB 	*/.byte 0x48,0x8B,0x55,0xE8
;/SWAP	100148 <> AND OR	\ add     %rdx,(%rax)
/*	mov	%rax,-0x18(%rbp)	\ 405BAF 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 405BB3 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$0x100148,%eax	\ 405BB7 	*/.byte 0xB8,0x48,0x1,0x10,0x0
/*	xor	-0x20(%rbp),%rax	\ 405BBC 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 405BC0 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 405BC3 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 405BC6 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 405BCA 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405BCE 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR OR \ mov     -0x10(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405BD2 	*/.byte 0x48,0x8B,0x5,0xC1,0xC7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405BD9 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405BDB 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 405BE0 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405BE5 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 405BE9 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 405BED 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405BF0 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405BF3 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 3C DTST
/*	jz	0x405C60  { OPT-RULES+1D56  } 	\ 405BF7 	*/.byte 0xF,0x84,0x63,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 405BFD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3C,%eax	\ 405C01 	*/.byte 0xB8,0x3C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405C06 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405C0A E8 42 C9 FF FF 
;/	OP1@ 1+ W@ 0500 XOR OP2@ 1+ W!	\ mov    %rdx,X(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 405C0F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405C13 	*/.byte 0x48,0x8B,0x5,0x8D,0xC7,0xFF,0xFF
/*	movzw	0x01(%rax),%eax	\ 405C1A 	*/.byte 0xF,0xB7,0x40,0x1
/*	xor	$0x500,%rax	\ 405C1E 	*/.byte 0x48,0x35,0x0,0x5,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405C24 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405C28 	*/.byte 0x48,0x8B,0x5,0x85,0xC7,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 405C2F 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 405C33 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 405C36 	*/.byte 0x66,0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 405C39 	*/.byte 0x48,0x8D,0x5,0x18,0xC6,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 405C40 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 405C44 E8 56 CD FF FF 
;/	M\ 3D DTST
/*	mov	%rax,-0x08(%rbp)	\ 405C49 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3D,%eax	\ 405C4D 	*/.byte 0xB8,0x3D,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405C52 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405C56 E8 F6 C8 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405C5B 	*/.byte 0xE9,0xBE,0xE2,0xFF,0xFF
;/OP2@ L@ FFFFFF AND c28948 XOR	\ mov     %rax,%rdx       # 80404e9d
/*	mov	%rax,-0x08(%rbp)	\ 405C60 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405C64 	*/.byte 0x48,0x8B,0x5,0x49,0xC7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405C6B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405C6D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x828948,%eax	\ 405C72 	*/.byte 0x35,0x48,0x89,0xC2,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405C77 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405C7B 	*/.byte 0x48,0x8B,0x5,0x25,0xC7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405C82 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405C84 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 405C89 	*/.byte 0x48,0x89,0x45,0xE8
;/DUP	158948 XOR		\ mov     %rdx,X (%rip)
/*	xor	$0x158948,%rax	\ 405C8D 	*/.byte 0x48,0x35,0x48,0x89,0x15,0x0
/*	mov	-0x18(%rbp),%rdx	\ 405C93 	*/.byte 0x48,0x8B,0x55,0xE8
;/SWAP	150148 <>  AND OR	\ add     %rdx,X (%rip)
/*	mov	%rax,-0x18(%rbp)	\ 405C97 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 405C9B 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$0x150148,%eax	\ 405C9F 	*/.byte 0xB8,0x48,0x1,0x15,0x0
/*	xor	-0x20(%rbp),%rax	\ 405CA4 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 405CA8 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 405CAB 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 405CAE 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 405CB2 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405CB6 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR OR \ mov     -0x10(%rbp),%rax        # 8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405CBA 	*/.byte 0x48,0x8B,0x5,0xD9,0xC6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405CC1 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405CC3 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 405CC8 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405CCD 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 405CD1 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 405CD5 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405CD8 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405CDB 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 3E DTST
/*	jz	0x405D70  { OPT-RULES+1E66  } 	\ 405CDF 	*/.byte 0xF,0x84,0x8B,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 405CE5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3E,%eax	\ 405CE9 	*/.byte 0xB8,0x3E,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405CEE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405CF2 E8 5A C8 FF FF 
;/	05 OP1@ 2+ C!	\	mov    %rax,X(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 405CF7 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x5,-0x10(%rbp)	\ 405CFB 	*/.byte 0x48,0xC7,0x45,0xF0,0x5,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405D03 	*/.byte 0x48,0x8B,0x5,0x9D,0xC6,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 405D0A 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%dl	\ 405D0E 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 405D11 	*/.byte 0x88,0x10
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 405D13 	*/.byte 0x48,0x8D,0x5,0x46,0xC5,0xFF,0xFF
;/	OP2 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 405D1A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 405D1E E8 7C CC FF FF 
;/	OP0 3 OPinsert
/*	mov	%rax,-0x08(%rbp)	\ 405D23 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 405D27 	*/.byte 0x48,0x8D,0x5,0x22,0xC5,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 405D2E 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x3,%eax	\ 405D32 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 405D37 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4028C0  { OPinsert } 	\ 405D3B E8 80 CB FF FF 
;/	C289 OP1 @ 1+ W!
/*	mov	%rax,-0x08(%rbp)	\ 405D40 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xC289,-0x10(%rbp)	\ 405D44 	*/.byte 0x48,0xC7,0x45,0xF0,0x89,0xC2,0x0,0x0
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 405D4C 	*/.byte 0x48,0x8B,0x5,0x5,0xC5,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 405D53 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 405D57 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 405D5A 	*/.byte 0x66,0x89,0x10
/*	mov	$0x3F,%eax	\ 405D5D 	*/.byte 0xB8,0x3F,0x0,0x0,0x0
;/	M\ 3F DTST
/*	lea	-0x08(%rbp),%rbp	\ 405D62 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405D66 E8 E6 C7 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405D6B 	*/.byte 0xE9,0xAE,0xE1,0xFF,0xFF
;/
;/OP2@ L@ FFFFFF AND F0894C XOR	\ mov	%r14,%rax
/*	mov	%rax,-0x08(%rbp)	\ 405D70 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405D74 	*/.byte 0x48,0x8B,0x5,0x39,0xC6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405D7B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405D7D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0xB0894C,%eax	\ 405D82 	*/.byte 0x35,0x4C,0x89,0xF0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 405D87 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405D8B 	*/.byte 0x48,0x8B,0x5,0x15,0xC6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405D92 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405D94 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 405D99 	*/.byte 0x48,0x89,0x45,0xE8
;/DUP	108948 XOR		\ mov	%rdx,(%rax)
/*	xor	$0x108948,%rax	\ 405D9D 	*/.byte 0x48,0x35,0x48,0x89,0x10,0x0
/*	mov	-0x18(%rbp),%rdx	\ 405DA3 	*/.byte 0x48,0x8B,0x55,0xE8
;/SWAP	100148 <> AND OR	\ add	%rdx,(%rax)
/*	mov	%rax,-0x18(%rbp)	\ 405DA7 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 405DAB 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$0x100148,%eax	\ 405DAF 	*/.byte 0xB8,0x48,0x1,0x10,0x0
/*	xor	-0x20(%rbp),%rax	\ 405DB4 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 405DB8 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 405DBB 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 405DBE 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 405DC2 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405DC6 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR OR \ mov	-8(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405DCA 	*/.byte 0x48,0x8B,0x5,0xC9,0xC5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405DD1 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405DD3 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 405DD8 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405DDD 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 405DE1 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 405DE5 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405DE8 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405DEB 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 6E DTST
/*	jz	0x405E4E  { OPT-RULES+1F44  } 	\ 405DEF 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 405DF5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x6E,%eax	\ 405DF9 	*/.byte 0xB8,0x6E,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405DFE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405E02 E8 4A C7 FF FF 
;/	060001 OP1@ XOR!	\ mov	%rdx,(%r14)
/*	mov	%rax,-0x08(%rbp)	\ 405E07 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x60001,-0x10(%rbp)	\ 405E0B 	*/.byte 0x48,0xC7,0x45,0xF0,0x1,0x0,0x6,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405E13 	*/.byte 0x48,0x8B,0x5,0x8D,0xC5,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 405E1A 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 405E1E E8 3 A7 FF FF 
;/	OP2 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 405E23 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 405E27 	*/.byte 0x48,0x8D,0x5,0x32,0xC4,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 405E2E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 405E32 E8 68 CB FF FF 
;/	M\ 6F DTST
/*	mov	%rax,-0x08(%rbp)	\ 405E37 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x6F,%eax	\ 405E3B 	*/.byte 0xB8,0x6F,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405E40 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405E44 E8 8 C7 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405E49 	*/.byte 0xE9,0xD0,0xE0,0xFF,0xFF
;/
;/
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 405E4E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405E52 	*/.byte 0x48,0x8B,0x5,0x5B,0xC5,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 405E59 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 405E5D 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405E61 	*/.byte 0x48,0x8B,0x5,0x32,0xC5,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 405E68 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 405E6C 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405E70 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND 458948 XOR OR \ mov	%rax,-0x10(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405E74 	*/.byte 0x48,0x8B,0x5,0x39,0xC5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405E7B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405E7D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 405E82 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405E87 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405E8B 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 058b48 XOR OR \ mov	LASTsubHERE+0xd (%rip),%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405E8F 	*/.byte 0x48,0x8B,0x5,0x11,0xC5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405E96 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405E98 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58B48,%eax	\ 405E9D 	*/.byte 0x35,0x48,0x8B,0x5,0x0
/*	or	-0x10(%rbp),%rax	\ 405EA2 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405EA6 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405EAA 	*/.byte 0x48,0x8B,0x5,0xE9,0xC4,0xFF,0xFF
/*	mov	(%rax),%eax	\ 405EB1 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405EB3 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 405EB8 	*/.byte 0x48,0x89,0x45,0xE8
;/DUP 453348 XOR		\ xor	-0x10(%rbp),%rax
/*	xor	$fimg+0x53348,%rax	\ 405EBC 	*/.byte 0x48,0x35,0x48,0x33,0x45,0x0
/*	mov	-0x18(%rbp),%rdx	\ 405EC2 	*/.byte 0x48,0x8B,0x55,0xE8
;/SWAP 453948 <> AND OR	\ cmp	-0x10(%rbp),%rax \ !!
/*	mov	%rax,-0x18(%rbp)	\ 405EC6 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 405ECA 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$fimg+0x53948,%eax	\ 405ECE 	*/.byte 0xB8,0x48,0x39,0x45,0x0
/*	xor	-0x20(%rbp),%rax	\ 405ED3 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 405ED7 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 405EDA 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 405EDD 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 405EE1 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 405EE5 	*/.byte 0x48,0x83,0xE8,0x1
;/0= M_WL M\ 28 DTST
/*	sbb	%rax,%rax	\ 405EE9 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405EEC 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 405EEF 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x405F81  { OPT-RULES+2077  } 	\ 405EF3 	*/.byte 0xF,0x84,0x88,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 405EF9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x28,%eax	\ 405EFD 	*/.byte 0xB8,0x28,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405F02 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405F06 E8 46 C6 FF FF 
;/	OP0@ 1+ C@ DUP 39 = IF 2 XOR THEN
/*	mov	%rax,-0x08(%rbp)	\ 405F0B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405F0F 	*/.byte 0x48,0x8B,0x5,0x84,0xC4,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 405F16 	*/.byte 0xF,0xB6,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 405F1A 	*/.byte 0x48,0x89,0x45,0xF0
/*	xor	$0x39,%rax	\ 405F1E 	*/.byte 0x48,0x35,0x39,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 405F24 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 405F28 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405F2B 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 405F2E 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 405F32 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x405F42  { OPT-RULES+2038  } 	\ 405F36 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
/*	xor	$0x2,%rax	\ 405F3C 	*/.byte 0x48,0x35,0x2,0x0,0x0,0x0
;/	OP1@ 1+ C! \	xor    -0x1b8(%rip),%rax
/*	mov	%rax,-0x08(%rbp)	\ 405F42 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405F46 	*/.byte 0x48,0x8B,0x5,0x5A,0xC4,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 405F4D 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x08(%rbp),%dl	\ 405F51 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 405F54 	*/.byte 0x88,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 405F56 	*/.byte 0x48,0x8D,0x5,0xFB,0xC2,0xFF,0xFF
	call	0x402487  { ToOP0 } 	\ 405F5D E8 25 C5 FF FF 
;/	OP1 ToOP0
;/	-4 ALLOT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 405F62 	*/.byte 0x48,0x83,0x5,0xE6,0xB6,0xFF,0xFF,0xFC
;/	M\ 29 DTST
/*	mov	%rax,-0x08(%rbp)	\ 405F6A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x29,%eax	\ 405F6E 	*/.byte 0xB8,0x29,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 405F73 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 405F77 E8 D5 C5 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 405F7C 	*/.byte 0xE9,0x9D,0xDF,0xFF,0xFF
;/
;/OP2@ 3 + C@ OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 405F81 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405F85 	*/.byte 0x48,0x8B,0x5,0x28,0xC4,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 405F8C 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 405F90 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405F94 	*/.byte 0x48,0x8B,0x5,0xFF,0xC3,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 405F9B 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 405F9F 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405FA3 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND 458948 XOR OR	\ mov     %rax,-0x08(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 405FA7 	*/.byte 0x48,0x8B,0x5,0x6,0xC4,0xFF,0xFF
/*	mov	(%rax),%rax	\ 405FAE 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405FB1 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 405FB6 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405FBB 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405FBF 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND 58b48 XOR OR	\ mov     X(%rip),%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 405FC3 	*/.byte 0x48,0x8B,0x5,0xDD,0xC3,0xFF,0xFF
/*	mov	(%rax),%rax	\ 405FCA 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405FCD 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58B48,%eax	\ 405FD2 	*/.byte 0x35,0x48,0x8B,0x5,0x0
/*	or	-0x10(%rbp),%rax	\ 405FD7 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 405FDB 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 453b48 XOR OR	\ cmp     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 405FDF 	*/.byte 0x48,0x8B,0x5,0xB4,0xC3,0xFF,0xFF
/*	mov	(%rax),%rax	\ 405FE6 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 405FE9 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x53B48,%eax	\ 405FEE 	*/.byte 0x35,0x48,0x3B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 405FF3 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 405FF7 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL M\ 7E DTST
/*	sbb	%rax,%rax	\ 405FFB 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 405FFE 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 406001 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x406081  { OPT-RULES+2177  } 	\ 406005 	*/.byte 0xF,0x84,0x76,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40600B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x7E,%eax	\ 40600F 	*/.byte 0xB8,0x7E,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406014 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406018 E8 34 C5 FF FF 
;/	OP1@ @	OP0@ ! \ удалять некорректно	
/*	mov	%rax,-0x08(%rbp)	\ 40601D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406021 	*/.byte 0x48,0x8B,0x5,0x7F,0xC3,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406028 	*/.byte 0x48,0x8B,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rdx	\ 40602B 	*/.byte 0x48,0x8B,0x15,0x68,0xC3,0xFF,0xFF
/*	mov	%rax,(%rdx)	\ 406032 	*/.byte 0x48,0x89,0x2
/*	movq	$-0x7,-0x10(%rbp)	\ 406035 	*/.byte 0x48,0xC7,0x45,0xF0,0xF9,0xFF,0xFF,0xFF
;/	-7 OP0@ 3+ L+!
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40603D 	*/.byte 0x48,0x8B,0x5,0x56,0xC3,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 406044 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x10(%rbp),%rdx	\ 406048 	*/.byte 0x48,0x8B,0x55,0xF0
/*	add	%edx,(%rax)	\ 40604C 	*/.byte 0x1,0x10
/*	addq	$0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40604E 	*/.byte 0x48,0x83,0x5,0xFA,0xB5,0xFF,0xFF,0x3
;/	3 ALLOT
/*	movq	$0x39,-0x10(%rbp)	\ 406056 	*/.byte 0x48,0xC7,0x45,0xF0,0x39,0x0,0x0,0x0
;/	39 OP1@ 1+ C!  \ cmp    %rax,X(%rip)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40605E 	*/.byte 0x48,0x8B,0x5,0x42,0xC3,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406065 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 406069 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 40606C 	*/.byte 0x88,0x10
/*	mov	$0x7F,%eax	\ 40606E 	*/.byte 0xB8,0x7F,0x0,0x0,0x0
;/	M\ 7F DTST
/*	lea	-0x08(%rbp),%rbp	\ 406073 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406077 E8 D5 C4 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40607C 	*/.byte 0xE9,0x9D,0xDE,0xFF,0xFF
;/
;/OP2@ 3 + C@ OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 406081 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406085 	*/.byte 0x48,0x8B,0x5,0x28,0xC3,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40608C 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 406090 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406094 	*/.byte 0x48,0x8B,0x5,0xFF,0xC2,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40609B 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 40609F 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4060A3 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND 458948 XOR OR	\ mov     %rax,-0x08(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4060A7 	*/.byte 0x48,0x8B,0x5,0x6,0xC3,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4060AE 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4060B1 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 4060B6 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4060BB 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4060BF 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND F0894C XOR OR	\ mov     %r14,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4060C3 	*/.byte 0x48,0x8B,0x5,0xDD,0xC2,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4060CA 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4060CD 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0xB0894C,%eax	\ 4060D2 	*/.byte 0x35,0x4C,0x89,0xF0,0x0
/*	or	-0x10(%rbp),%rax	\ 4060D7 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4060DB 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 453b48 XOR OR	\ cmp     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4060DF 	*/.byte 0x48,0x8B,0x5,0xB4,0xC2,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4060E6 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4060E9 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x53B48,%eax	\ 4060EE 	*/.byte 0x35,0x48,0x3B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4060F3 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4060F7 	*/.byte 0x48,0x83,0xE8,0x1
;/0=  M_WL M\ 90 DTST
/*	sbb	%rax,%rax	\ 4060FB 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4060FE 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 406101 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x406164  { OPT-RULES+225A  } 	\ 406105 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40610B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x90,%eax	\ 40610F 	*/.byte 0xB8,0x90,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406114 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406118 E8 34 C4 FF FF 
;/	c63949 OP1@ L! \ cmp    %rax,%r14
/*	mov	%rax,-0x08(%rbp)	\ 40611D 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$fimg+0x863949,-0x10(%rbp)	\ 406121 	*/.byte 0x48,0xC7,0x45,0xF0,0x49,0x39,0xC6,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406129 	*/.byte 0x48,0x8B,0x5,0x77,0xC2,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 406130 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 406133 	*/.byte 0x89,0x10
/*	movq	$fimg+0xB0894C,-0x10(%rbp)	\ 406135 	*/.byte 0x48,0xC7,0x45,0xF0,0x4C,0x89,0xF0,0x0
;/	F0894C OP0@ L! \ mov    %r14,%rax удалять некорректно	
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40613D 	*/.byte 0x48,0x8B,0x5,0x56,0xC2,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 406144 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 406147 	*/.byte 0x89,0x10
/*	addq	$-0x01,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 406149 	*/.byte 0x48,0x83,0x5,0xFF,0xB4,0xFF,0xFF,0xFF
;/	-1 ALLOT
/*	mov	$0x91,%eax	\ 406151 	*/.byte 0xB8,0x91,0x0,0x0,0x0
;/	M\ 91 DTST
/*	lea	-0x08(%rbp),%rbp	\ 406156 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40615A E8 F2 C3 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40615F 	*/.byte 0xE9,0xBA,0xDD,0xFF,0xFF
;/
;/J_COD F0 AND 80 XOR
/*	mov	%rax,-0x08(%rbp)	\ 406164 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 406168 	*/.byte 0x48,0x8B,0x5,0x7E,0xC0,0xFF,0xFF
/*	and	$0xF0,%eax	\ 40616F 	*/.byte 0x25,0xF0,0x0,0x0,0x0
/*	xor	$-0x80,%al	\ 406174 	*/.byte 0x34,0x80
/*	mov	%rax,-0x10(%rbp)	\ 406176 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40617A 	*/.byte 0x48,0x8B,0x5,0x33,0xC2,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406181 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406183 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 406188 	*/.byte 0x48,0x89,0x45,0xE8
;/DUP	453948 XOR \ cmp     %rax,-0x10(%rbp)
/*	xor	$fimg+0x53948,%rax	\ 40618C 	*/.byte 0x48,0x35,0x48,0x39,0x45,0x0
/*	mov	-0x18(%rbp),%rdx	\ 406192 	*/.byte 0x48,0x8B,0x55,0xE8
;/SWAP	053B48 XOR AND OR \ cmp     LASTsubHERE+0xd (%rip),%rax
/*	mov	%rax,-0x18(%rbp)	\ 406196 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 40619A 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$0x53B48,%eax	\ 40619E 	*/.byte 0xB8,0x48,0x3B,0x5,0x0
/*	xor	-0x20(%rbp),%rax	\ 4061A3 	*/.byte 0x48,0x33,0x45,0xE0
/*	and	-0x18(%rbp),%rax	\ 4061A7 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 4061AB 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4061AF 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND c01948 XOR OR \ sbb	%rax,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4061B3 	*/.byte 0x48,0x8B,0x5,0xED,0xC1,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4061BA 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4061BC 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x801948,%eax	\ 4061C1 	*/.byte 0x35,0x48,0x19,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 4061C6 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4061CA 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR OR \ mov	-0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4061CE 	*/.byte 0x48,0x8B,0x5,0xC5,0xC1,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4061D5 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4061D7 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 4061DC 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4061E1 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4061E5 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 4061E9 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4061EC 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4061EF 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 2A DTST
/*	jz	0x40624A  { OPT-RULES+2340  } 	\ 4061F3 	*/.byte 0xF,0x84,0x51,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4061F9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x2A,%eax	\ 4061FD 	*/.byte 0xB8,0x2A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406202 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406206 E8 46 C3 FF FF 
;/	OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 40620B 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40620F 	*/.byte 0x48,0x8D,0x5,0x42,0xC0,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 406216 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40621A E8 80 C7 FF FF 
;/	J_COD 7 XOR TO J_COD
/*	mov	%rax,-0x08(%rbp)	\ 40621F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 406223 	*/.byte 0x48,0x8B,0x5,0xC3,0xBF,0xFF,0xFF
/*	xor	$0x7,%rax	\ 40622A 	*/.byte 0x48,0x35,0x7,0x0,0x0,0x0
/*	mov	%rax,0x4021ED  { J_COD+5  } (%rip)	\ 406230 	*/.byte 0x48,0x89,0x5,0xB6,0xBF,0xFF,0xFF
/*	mov	$0x2B,%eax	\ 406237 	*/.byte 0xB8,0x2B,0x0,0x0,0x0
;/	M\ 2B DTST
/*	lea	-0x08(%rbp),%rbp	\ 40623C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406240 E8 C C3 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406245 	*/.byte 0xE9,0xD4,0xDC,0xFF,0xFF
;/
;/OP2@ 3 + C@ OP1@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 40624A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40624E 	*/.byte 0x48,0x8B,0x5,0x5F,0xC1,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 406255 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 406259 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40625D 	*/.byte 0x48,0x8B,0x5,0x43,0xC1,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 406264 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 406268 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40626C 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND 458948 XOR OR \ /*    mov     %rax,-0x08(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406270 	*/.byte 0x48,0x8B,0x5,0x3D,0xC1,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406277 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40627A 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 40627F 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406284 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406288 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND 7d8148 XOR OR \ /*    cmp     $X,-0x08(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40628C 	*/.byte 0x48,0x8B,0x5,0x14,0xC1,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406293 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406296 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x3D8148,%eax	\ 40629B 	*/.byte 0x35,0x48,0x81,0x7D,0x0
/*	or	-0x10(%rbp),%rax	\ 4062A0 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4062A4 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 458b48 XOR OR \ /*    mov     0x00(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4062A8 	*/.byte 0x48,0x8B,0x5,0xEB,0xC0,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4062AF 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4062B2 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 4062B7 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4062BC 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4062C0 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 4062C4 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4062C7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4062CA 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 7A DTST
/*	jz	0x406350  { OPT-RULES+2446  } 	\ 4062CE 	*/.byte 0xF,0x84,0x7C,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4062D4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x7A,%eax	\ 4062D8 	*/.byte 0xB8,0x7A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4062DD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4062E1 E8 6B C2 FF FF 
;/	OP1@ 4 + L@ OP1@ 2+ L!
/*	mov	%rax,-0x08(%rbp)	\ 4062E6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4062EA 	*/.byte 0x48,0x8B,0x5,0xB6,0xC0,0xFF,0xFF
/*	mov	0x04(%rax),%eax	\ 4062F1 	*/.byte 0x8B,0x40,0x4
/*	mov	%rax,-0x10(%rbp)	\ 4062F4 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4062F8 	*/.byte 0x48,0x8B,0x5,0xA8,0xC0,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 4062FF 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%edx	\ 406303 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 406306 	*/.byte 0x89,0x10
/*	movq	$0x3D,-0x10(%rbp)	\ 406308 	*/.byte 0x48,0xC7,0x45,0xF0,0x3D,0x0,0x0,0x0
;/	3D OP1@ 1+ C! \ cmp    $X,%rax 
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406310 	*/.byte 0x48,0x8B,0x5,0x90,0xC0,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406317 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 40631B 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 40631E 	*/.byte 0x88,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406320 	*/.byte 0x48,0x8D,0x5,0x31,0xBF,0xFF,0xFF
;/	OP1 6 OPsize!
/*	mov	%rax,-0x10(%rbp)	\ 406327 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x6,%eax	\ 40632B 	*/.byte 0xB8,0x6,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 406330 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402928  { OPsize! } 	\ 406334 E8 EF C5 FF FF 
;/	M\ 7B DTST
/*	mov	%rax,-0x08(%rbp)	\ 406339 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x7B,%eax	\ 40633D 	*/.byte 0xB8,0x7B,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406342 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406346 E8 6 C2 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40634B 	*/.byte 0xE9,0xCE,0xDB,0xFF,0xFF
;/
;/J_COD 0x84 XOR
/*	mov	%rax,-0x08(%rbp)	\ 406350 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 406354 	*/.byte 0x48,0x8B,0x5,0x92,0xBE,0xFF,0xFF
/*	xor	$0x84,%rax	\ 40635B 	*/.byte 0x48,0x35,0x84,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406361 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ W@ 3d48 XOR OR		\ cmp     $0x4,%rax
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406365 	*/.byte 0x48,0x8B,0x5,0x48,0xC0,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 40636C 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x3D48,%rax	\ 40636F 	*/.byte 0x48,0x35,0x48,0x3D,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 406375 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406379 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND c01948 XOR OR \ sbb     %rax,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40637D 	*/.byte 0x48,0x8B,0x5,0x23,0xC0,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406384 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406387 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x801948,%eax	\ 40638C 	*/.byte 0x35,0x48,0x19,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 406391 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406395 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 458b48 XOR OR \ mov     0x00(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406399 	*/.byte 0x48,0x8B,0x5,0xFA,0xBF,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4063A0 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4063A3 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 4063A8 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4063AD 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4063B1 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 4063B5 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4063B8 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4063BB 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 7A DTST
/*	jz	0x40640D  { OPT-RULES+2503  } 	\ 4063BF 	*/.byte 0xF,0x84,0x48,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4063C5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x7A,%eax	\ 4063C9 	*/.byte 0xB8,0x7A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4063CE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4063D2 E8 7A C1 FF FF 
;/	83 TO J_COD
/*	movq	$0x83,0x4021ED  { J_COD+5  } (%rip)	\ 4063D7 	*/.byte 0x48,0xC7,0x5,0xB,0xBE,0xFF,0xFF,0x83,0x0,0x0,0x0
;/	OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 4063E2 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4063E6 	*/.byte 0x48,0x8D,0x5,0x6B,0xBE,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4063ED 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 4063F1 E8 A9 C5 FF FF 
;/	M\ 7B DTST
/*	mov	%rax,-0x08(%rbp)	\ 4063F6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x7B,%eax	\ 4063FA 	*/.byte 0xB8,0x7B,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4063FF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406403 E8 49 C1 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406408 	*/.byte 0xE9,0x11,0xDB,0xFF,0xFF
;/J_COD 0x84 XOR
/*	mov	%rax,-0x08(%rbp)	\ 40640D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 406411 	*/.byte 0x48,0x8B,0x5,0xD5,0xBD,0xFF,0xFF
/*	xor	$0x84,%rax	\ 406418 	*/.byte 0x48,0x35,0x84,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40641E 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND d8f748 XOR OR \            negq    %rax
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406422 	*/.byte 0x48,0x8B,0x5,0x8B,0xBF,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406429 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40642C 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x98F748,%eax	\ 406431 	*/.byte 0x35,0x48,0xF7,0xD8,0x0
/*	or	-0x10(%rbp),%rax	\ 406436 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40643A 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND c01948 XOR OR \    sbb     %rax,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40643E 	*/.byte 0x48,0x8B,0x5,0x62,0xBF,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406445 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406448 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x801948,%eax	\ 40644D 	*/.byte 0x35,0x48,0x19,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 406452 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406456 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 458b48 XOR OR \    mov     0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40645A 	*/.byte 0x48,0x8B,0x5,0x39,0xBF,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406461 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406464 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 406469 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 40646E 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 406472 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 406476 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406479 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40647C 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 7C DTST
/*	jz	0x4064D7  { OPT-RULES+25CD  } 	\ 406480 	*/.byte 0xF,0x84,0x51,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 406486 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x7C,%eax	\ 40648A 	*/.byte 0xB8,0x7C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40648F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406493 E8 B9 C0 FF FF 
;/	OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 406498 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40649C 	*/.byte 0x48,0x8D,0x5,0xB5,0xBD,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4064A3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 4064A7 E8 F3 C4 FF FF 
;/	OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 4064AC 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4064B0 	*/.byte 0x48,0x8D,0x5,0xA1,0xBD,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4064B7 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 4064BB E8 DF C4 FF FF 
;/	M\ 7D DTST
/*	mov	%rax,-0x08(%rbp)	\ 4064C0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x7D,%eax	\ 4064C4 	*/.byte 0xB8,0x7D,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4064C9 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4064CD E8 7F C0 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4064D2 	*/.byte 0xE9,0x47,0xDA,0xFF,0xFF
;/
;/J_COD 0x84 XOR
/*	mov	%rax,-0x08(%rbp)	\ 4064D7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 4064DB 	*/.byte 0x48,0x8B,0x5,0xB,0xBD,0xFF,0xFF
/*	xor	$0x84,%rax	\ 4064E2 	*/.byte 0x48,0x35,0x84,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4064E8 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ 3 + C@ OP0@ 3 + C@ XOR OR
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4064EC 	*/.byte 0x48,0x8B,0x5,0xC1,0xBE,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 4064F3 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x18(%rbp)	\ 4064F7 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4064FB 	*/.byte 0x48,0x8B,0x5,0x98,0xBE,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 406502 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x18(%rbp),%rax	\ 406506 	*/.byte 0x48,0x33,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 40650A 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40650E 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND 458948 XOR OR \ /*    mov     %rax,-0x08(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406512 	*/.byte 0x48,0x8B,0x5,0x9B,0xBE,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406519 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40651C 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 406521 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406526 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40652A 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@		3FF8C148 XOR OR	\ /*    sar     $0x3F,%rax 
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40652E 	*/.byte 0x48,0x8B,0x5,0x72,0xBE,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406535 	*/.byte 0x8B,0x0
/*	xor	$0x3FF8C148,%rax	\ 406537 	*/.byte 0x48,0x35,0x48,0xC1,0xF8,0x3F
/*	or	-0x10(%rbp),%rax	\ 40653D 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406541 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 458b48 XOR OR \ /*    mov     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406545 	*/.byte 0x48,0x8B,0x5,0x4E,0xBE,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40654C 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40654F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 406554 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406559 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 40655D 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL  M\ 88 DTST
/*	sbb	%rax,%rax	\ 406561 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406564 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 406567 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4065DA  { OPT-RULES+26D0  } 	\ 40656B 	*/.byte 0xF,0x84,0x69,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 406571 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x88,%eax	\ 406575 	*/.byte 0xB8,0x88,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40657A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40657E E8 CE BF FF FF 
;/	C085 OP1@ 1+ W! \ test    %rax,%rax
/*	mov	%rax,-0x08(%rbp)	\ 406583 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xC085,-0x10(%rbp)	\ 406587 	*/.byte 0x48,0xC7,0x45,0xF0,0x85,0xC0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40658F 	*/.byte 0x48,0x8B,0x5,0x11,0xBE,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406596 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 40659A 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 40659D 	*/.byte 0x66,0x89,0x10
/*	movq	$0x8D,0x4021ED  { J_COD+5  } (%rip)	\ 4065A0 	*/.byte 0x48,0xC7,0x5,0x42,0xBC,0xFF,0xFF,0x8D,0x0,0x0,0x0
;/	8D TO J_COD \  jge
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4065AB 	*/.byte 0x48,0x8D,0x5,0xA6,0xBC,0xFF,0xFF
;/	OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 4065B2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 4065B6 E8 CC BE FF FF 
;/	-5 ALLOT
/*	addq	$-0x05,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4065BB 	*/.byte 0x48,0x83,0x5,0x8D,0xB0,0xFF,0xFF,0xFB
;/	M\ 89 DTST
/*	mov	%rax,-0x08(%rbp)	\ 4065C3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x89,%eax	\ 4065C7 	*/.byte 0xB8,0x89,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4065CC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4065D0 E8 7C BF FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4065D5 	*/.byte 0xE9,0x44,0xD9,0xFF,0xFF
;/
;/
;/J_COD F0 AND 80 XOR
/*	mov	%rax,-0x08(%rbp)	\ 4065DA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 4065DE 	*/.byte 0x48,0x8B,0x5,0x8,0xBC,0xFF,0xFF
/*	and	$0xF0,%eax	\ 4065E5 	*/.byte 0x25,0xF0,0x0,0x0,0x0
/*	xor	$-0x80,%al	\ 4065EA 	*/.byte 0x34,0x80
/*	mov	%rax,-0x10(%rbp)	\ 4065EC 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFCFF AND C09C0F XOR OR \ set<gl>   %al
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4065F0 	*/.byte 0x48,0x8B,0x5,0xBD,0xBD,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4065F7 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFCFF,%eax	\ 4065F9 	*/.byte 0x25,0xFF,0xFC,0xFF,0x0
/*	xor	$fimg+0x809C0F,%eax	\ 4065FE 	*/.byte 0x35,0xF,0x9C,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 406603 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406607 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ W@ D8F6 XOR OR	\ neg	%al
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40660B 	*/.byte 0x48,0x8B,0x5,0x95,0xBD,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 406612 	*/.byte 0xF,0xB7,0x0
/*	xor	$0xD8F6,%rax	\ 406615 	*/.byte 0x48,0x35,0xF6,0xD8,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 40661B 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40661F 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406623 	*/.byte 0x48,0x8B,0x5,0x70,0xBD,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 40662A 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 40662E E8 F2 CD FF FF 
/*	or	0x00(%rbp),%rax	\ 406633 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 406637 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL M\ 76 DTST
/*	sbb	%rax,%rax	\ 40663B 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40663E 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 406641 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 406645 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x4066BF  { OPT-RULES+27B5  } 	\ 406649 	*/.byte 0xF,0x84,0x70,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40664F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x76,%eax	\ 406653 	*/.byte 0xB8,0x76,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406658 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40665C E8 F0 BE FF FF 
;/	OP2@ 1+ C@ 95 XOR
/*	mov	%rax,-0x08(%rbp)	\ 406661 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406665 	*/.byte 0x48,0x8B,0x5,0x48,0xBD,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 40666C 	*/.byte 0xF,0xB6,0x40,0x1
/*	xor	$0x95,%rax	\ 406670 	*/.byte 0x48,0x35,0x95,0x0,0x0,0x0
/*	xor	0x4021ED  { J_COD+5  } (%rip),%rax	\ 406676 	*/.byte 0x48,0x33,0x5,0x70,0xBB,0xFF,0xFF
;/	J_COD XOR TO J_COD
/*	mov	%rax,0x4021ED  { J_COD+5  } (%rip)	\ 40667D 	*/.byte 0x48,0x89,0x5,0x69,0xBB,0xFF,0xFF
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406684 	*/.byte 0x48,0x8D,0x5,0xCD,0xBB,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 40668B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40668F E8 B C3 FF FF 
;/	OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 406694 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406698 	*/.byte 0x48,0x8D,0x5,0xB9,0xBB,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40669F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 4066A3 E8 F7 C2 FF FF 
;/	M\ 74 DTST
/*	mov	%rax,-0x08(%rbp)	\ 4066A8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x74,%eax	\ 4066AC 	*/.byte 0xB8,0x74,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4066B1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4066B5 E8 97 BE FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4066BA 	*/.byte 0xE9,0x5F,0xD8,0xFF,0xFF
;/
;/J_COD F0 AND 80 XOR
/*	mov	%rax,-0x08(%rbp)	\ 4066BF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 4066C3 	*/.byte 0x48,0x8B,0x5,0x23,0xBB,0xFF,0xFF
/*	and	$0xF0,%eax	\ 4066CA 	*/.byte 0x25,0xF0,0x0,0x0,0x0
/*	xor	$-0x80,%al	\ 4066CF 	*/.byte 0x34,0x80
/*	mov	%rax,-0x10(%rbp)	\ 4066D1 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ 80000000FF AND B8 XOR OR \ movq	$0x30,%rax
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4066D5 	*/.byte 0x48,0x8B,0x5,0xD8,0xBC,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4066DC 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x18(%rbp)	\ 4066DF 	*/.byte 0x48,0x89,0x45,0xE8
/*	movabs	$0x80000000FF,%rax	\ 4066E3 	*/.byte 0x48,0xB8,0xFF,0x0,0x0,0x0,0x80,0x0,0x0,0x0
/*	and	-0x18(%rbp),%rax	\ 4066ED 	*/.byte 0x48,0x23,0x45,0xE8
/*	xor	$0xB8,%rax	\ 4066F1 	*/.byte 0x48,0x35,0xB8,0x0,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 4066F7 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4066FB 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 453B48 XOR OR \ cmp	-0x08(%rbp),%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4066FF 	*/.byte 0x48,0x8B,0x5,0xA1,0xBC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406706 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406708 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x53B48,%eax	\ 40670D 	*/.byte 0x35,0x48,0x3B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406712 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406716 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40671A 	*/.byte 0x48,0x8B,0x5,0x79,0xBC,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 406721 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 406725 E8 FB CC FF FF 
/*	or	0x00(%rbp),%rax	\ 40672A 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 40672E 	*/.byte 0x48,0x83,0xE8,0x1
;/0= \  MO_TST_VAL and
/*	sbb	%rax,%rax	\ 406732 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406735 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 406738 	*/.byte 0x48,0x8B,0x45,0x8
;/	M_WL M\ 78 DTST
/*	lea	0x10(%rbp),%rbp	\ 40673C 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x40681E  { OPT-RULES+2914  } 	\ 406740 	*/.byte 0xF,0x84,0xD8,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 406746 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x78,%eax	\ 40674A 	*/.byte 0xB8,0x78,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40674F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406753 E8 F9 BD FF FF 
;/\	jae<>jbe jle<>jge
;/	J_COD DUP 8 AND IF 3 ELSE 5 THEN XOR TO J_COD
/*	mov	%rax,-0x08(%rbp)	\ 406758 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 40675C 	*/.byte 0x48,0x8B,0x5,0x8A,0xBA,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 406763 	*/.byte 0x48,0x89,0x45,0xF0
/*	and	$0x8,%eax	\ 406767 	*/.byte 0x25,0x8,0x0,0x0,0x0
	test	%rax,%rax	\ 40676C 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40676F 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 406773 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x40678F  { OPT-RULES+2885  } 	\ 406777 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40677D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x3,%eax	\ 406781 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406786 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jmp	0x40679C  { OPT-RULES+2892  } 	\ 40678A 	*/.byte 0xE9,0xD,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40678F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5,%eax	\ 406793 	*/.byte 0xB8,0x5,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406798 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	xor	0x00(%rbp),%rax	\ 40679C 	*/.byte 0x48,0x33,0x45,0x0
/*	mov	%rax,0x4021ED  { J_COD+5  } (%rip)	\ 4067A0 	*/.byte 0x48,0x89,0x5,0x46,0xBA,0xFF,0xFF
/*	movq	$0x7D81,0x00(%rbp)	\ 4067A7 	*/.byte 0x48,0xC7,0x45,0x0,0x81,0x7D,0x0,0x0
;/
;/	7d81 OP1@ 1+ W! 
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4067AF 	*/.byte 0x48,0x8B,0x5,0xF1,0xBB,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 4067B6 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	0x00(%rbp),%edx	\ 4067BA 	*/.byte 0x8B,0x55,0x0
/*	mov	%dx,(%rax)	\ 4067BD 	*/.byte 0x66,0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4067C0 	*/.byte 0x48,0x8D,0x5,0x91,0xBA,0xFF,0xFF
/*	mov	%rax,0x00(%rbp)	\ 4067C7 	*/.byte 0x48,0x89,0x45,0x0
;/	OP1 8 OPsize!
/*	mov	$0x8,%eax	\ 4067CB 	*/.byte 0xB8,0x8,0x0,0x0,0x0
	call	0x402928  { OPsize! } 	\ 4067D0 E8 53 C1 FF FF 
;/	OP2@ 1+ L@ OP1@ 4 + L!
/*	mov	%rax,-0x08(%rbp)	\ 4067D5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4067D9 	*/.byte 0x48,0x8B,0x5,0xD4,0xBB,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 4067E0 	*/.byte 0x8B,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 4067E3 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4067E7 	*/.byte 0x48,0x8B,0x5,0xB9,0xBB,0xFF,0xFF
/*	lea	0x04(%rax),%rax	\ 4067EE 	*/.byte 0x48,0x8D,0x40,0x4
/*	mov	-0x10(%rbp),%edx	\ 4067F2 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 4067F5 	*/.byte 0x89,0x10
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 4067F7 	*/.byte 0x48,0x8D,0x5,0x62,0xBA,0xFF,0xFF
;/	OP2 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 4067FE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 406802 E8 98 C1 FF FF 
;/	M\ 74 DTST
/*	mov	%rax,-0x08(%rbp)	\ 406807 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x74,%eax	\ 40680B 	*/.byte 0xB8,0x74,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406810 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406814 E8 38 BD FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406819 	*/.byte 0xE9,0x0,0xD7,0xFF,0xFF
;/
;/OP2@ L@ FFFFFF AND c0c748 XOR		\ movq	$0x8,%rax
/*	mov	%rax,-0x08(%rbp)	\ 40681E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406822 	*/.byte 0x48,0x8B,0x5,0x8B,0xBB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406829 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40682B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x80C748,%eax	\ 406830 	*/.byte 0x35,0x48,0xC7,0xC0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406835 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ 	80000000FF AND B8 <> AND	\ movq	$0x8,%rax
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406839 	*/.byte 0x48,0x8B,0x5,0x74,0xBB,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406840 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x18(%rbp)	\ 406843 	*/.byte 0x48,0x89,0x45,0xE8
/*	movabs	$0x80000000FF,%rax	\ 406847 	*/.byte 0x48,0xB8,0xFF,0x0,0x0,0x0,0x80,0x0,0x0,0x0
/*	and	-0x18(%rbp),%rax	\ 406851 	*/.byte 0x48,0x23,0x45,0xE8
/*	xor	$0xB8,%rax	\ 406855 	*/.byte 0x48,0x35,0xB8,0x0,0x0,0x0
/*		negq	%rax	\ 40685B 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 40685E 	*/.byte 0x48,0x19,0xC0
/*	and	-0x10(%rbp),%rax	\ 406861 	*/.byte 0x48,0x23,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406865 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 50148 XOR OR		\ add	%rax,X (%rip)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406869 	*/.byte 0x48,0x8B,0x5,0x37,0xBB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406870 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406872 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x50148,%eax	\ 406877 	*/.byte 0x35,0x48,0x1,0x5,0x0
/*	or	-0x10(%rbp),%rax	\ 40687C 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406880 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR OR	\ mov	Y(%rbp),%rax # 80404edf
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406884 	*/.byte 0x48,0x8B,0x5,0xF,0xBB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40688B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40688D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 406892 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406897 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 40689B 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL  M\ 42 DTST
/*	sbb	%rax,%rax	\ 40689F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4068A2 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4068A5 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x406A3F  { OPT-RULES+2B35  } 	\ 4068A9 	*/.byte 0xF,0x84,0x90,0x1,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4068AF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x42,%eax	\ 4068B3 	*/.byte 0xB8,0x42,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4068B8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4068BC E8 90 BC FF FF 
;/	OP2@ C@ B8 XOR
/*	mov	%rax,-0x08(%rbp)	\ 4068C1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4068C5 	*/.byte 0x48,0x8B,0x5,0xE8,0xBA,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 4068CC 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x48,%al	\ 4068CF 	*/.byte 0x34,0xB8
	test	%rax,%rax	\ 4068D1 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4068D4 	*/.byte 0x48,0x8B,0x45,0xF8
;/	IF	OP2@ 3+ SL@
/*	jz	0x4068FB  { OPT-RULES+29F1  } 	\ 4068D8 	*/.byte 0xF,0x84,0x1D,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4068DE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4068E2 	*/.byte 0x48,0x8B,0x5,0xCB,0xBA,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 4068E9 	*/.byte 0x48,0x8D,0x40,0x3
/*	lea	-0x08(%rbp),%rbp	\ 4068ED 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40048A  { SL@ } 	\ 4068F1 E8 94 9B FF FF 
;/	ELSE	OP2@ 1+ L@
/*	jmp	0x40690D  { OPT-RULES+2A03  } 	\ 4068F6 	*/.byte 0xE9,0x12,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4068FB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4068FF 	*/.byte 0x48,0x8B,0x5,0xAE,0xBA,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 406906 	*/.byte 0x8B,0x40,0x1
/*	lea	-0x08(%rbp),%rbp	\ 406909 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	THEN
;/	DUP SHORT? \ 0 AND
/*	mov	%rax,-0x08(%rbp)	\ 40690D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 406911 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401FD6  { SHORT? } 	\ 406915 E8 BC B6 FF FF 
;/	IF	OP1 8 OPsize!
	test	%rax,%rax	\ 40691A 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40691D 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 406921 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x4069A2  { OPT-RULES+2A98  } 	\ 406925 	*/.byte 0xF,0x84,0x77,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40692B 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40692F 	*/.byte 0x48,0x8D,0x5,0x22,0xB9,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 406936 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x8,%eax	\ 40693A 	*/.byte 0xB8,0x8,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40693F 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402928  { OPsize! } 	\ 406943 E8 E0 BF FF FF 
;/		-1  OP1@ 3+ L+!
/*	mov	%rax,-0x08(%rbp)	\ 406948 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1,-0x10(%rbp)	\ 40694C 	*/.byte 0x48,0xC7,0x45,0xF0,0xFF,0xFF,0xFF,0xFF
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406954 	*/.byte 0x48,0x8B,0x5,0x4C,0xBA,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 40695B 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x10(%rbp),%rdx	\ 40695F 	*/.byte 0x48,0x8B,0x55,0xF0
/*	add	%edx,(%rax)	\ 406963 	*/.byte 0x1,0x10
/*	movq	$0x82,-0x10(%rbp)	\ 406965 	*/.byte 0x48,0xC7,0x45,0xF0,0x82,0x0,0x0,0x0
;/		82 OP1@ 1+ XOR!	\ addq   $X,Y(%rip)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40696D 	*/.byte 0x48,0x8B,0x5,0x33,0xBA,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406974 	*/.byte 0x48,0x8D,0x40,0x1
/*	lea	-0x10(%rbp),%rbp	\ 406978 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 40697C E8 A5 9B FF FF 
;/		OP1@ 7 + C!
/*	mov	%rax,-0x08(%rbp)	\ 406981 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406985 	*/.byte 0x48,0x8B,0x5,0x1B,0xBA,0xFF,0xFF
/*	lea	0x07(%rax),%rax	\ 40698C 	*/.byte 0x48,0x8D,0x40,0x7
/*	mov	-0x08(%rbp),%dl	\ 406990 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 406993 	*/.byte 0x88,0x10
/*	mov	0x00(%rbp),%rax	\ 406995 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 406999 	*/.byte 0x48,0x8D,0x6D,0x8
;/	ELSE	OP1 B OPsize!
/*	jmp	0x406A14  { OPT-RULES+2B0A  } 	\ 40699D 	*/.byte 0xE9,0x72,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4069A2 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4069A6 	*/.byte 0x48,0x8D,0x5,0xAB,0xB8,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 4069AD 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0xB,%eax	\ 4069B1 	*/.byte 0xB8,0xB,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 4069B6 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402928  { OPsize! } 	\ 4069BA E8 69 BF FF FF 
;/		-4  OP1@ 3+ L+!
/*	mov	%rax,-0x08(%rbp)	\ 4069BF 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x4,-0x10(%rbp)	\ 4069C3 	*/.byte 0x48,0xC7,0x45,0xF0,0xFC,0xFF,0xFF,0xFF
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4069CB 	*/.byte 0x48,0x8B,0x5,0xD5,0xB9,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 4069D2 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x10(%rbp),%rdx	\ 4069D6 	*/.byte 0x48,0x8B,0x55,0xF0
/*	add	%edx,(%rax)	\ 4069DA 	*/.byte 0x1,0x10
/*	movq	$0x80,-0x10(%rbp)	\ 4069DC 	*/.byte 0x48,0xC7,0x45,0xF0,0x80,0x0,0x0,0x0
;/		80 OP1@ 1+ XOR!	\ addq   $X,Y(%rip)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4069E4 	*/.byte 0x48,0x8B,0x5,0xBC,0xB9,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 4069EB 	*/.byte 0x48,0x8D,0x40,0x1
/*	lea	-0x10(%rbp),%rbp	\ 4069EF 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 4069F3 E8 2E 9B FF FF 
;/		OP1@ 7 + L!
/*	mov	%rax,-0x08(%rbp)	\ 4069F8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4069FC 	*/.byte 0x48,0x8B,0x5,0xA4,0xB9,0xFF,0xFF
/*	lea	0x07(%rax),%rax	\ 406A03 	*/.byte 0x48,0x8D,0x40,0x7
/*	mov	-0x08(%rbp),%edx	\ 406A07 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 406A0A 	*/.byte 0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 406A0C 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 406A10 	*/.byte 0x48,0x8D,0x6D,0x8
;/	THEN
;/	OP2 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 406A14 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 406A18 	*/.byte 0x48,0x8D,0x5,0x41,0xB8,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 406A1F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 406A23 E8 77 BF FF FF 
;/	M\ 43 DTST
/*	mov	%rax,-0x08(%rbp)	\ 406A28 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x43,%eax	\ 406A2C 	*/.byte 0xB8,0x43,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406A31 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406A35 E8 17 BB FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406A3A 	*/.byte 0xE9,0xDF,0xD4,0xFF,0xFF
;/
;/OP2@  @ FFFFFFFFFF AND FF25 XOR \ and	$0xFF,%eax
/*	mov	%rax,-0x08(%rbp)	\ 406A3F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406A43 	*/.byte 0x48,0x8B,0x5,0x6A,0xB9,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406A4A 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406A4D 	*/.byte 0x48,0x89,0x45,0xF0
/*	movabs	$0xFFFFFFFFFF,%rax	\ 406A51 	*/.byte 0x48,0xB8,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x0
/*	and	-0x10(%rbp),%rax	\ 406A5B 	*/.byte 0x48,0x23,0x45,0xF0
/*	xor	$0xFF25,%rax	\ 406A5F 	*/.byte 0x48,0x35,0x25,0xFF,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406A65 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ C@ 3C XOR OR   \ cmp $0x48,%al|eax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406A69 	*/.byte 0x48,0x8B,0x5,0x37,0xB9,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 406A70 	*/.byte 0xF,0xB6,0x0
/*	xor	$0x3C,%al	\ 406A73 	*/.byte 0x34,0x3C
/*	or	-0x10(%rbp),%rax	\ 406A75 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406A79 	*/.byte 0x48,0x89,0x45,0xF0
;/
;/OP2@ C@ B8 XOR \ mov     $0x3,%eax
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406A7D 	*/.byte 0x48,0x8B,0x5,0x30,0xB9,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 406A84 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x48,%al	\ 406A87 	*/.byte 0x34,0xB8
/*	mov	%rax,-0x18(%rbp)	\ 406A89 	*/.byte 0x48,0x89,0x45,0xE8
;/OP1@ C@ B1 XOR OR   \ mov     $0x03,%cl
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406A8D 	*/.byte 0x48,0x8B,0x5,0x13,0xB9,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 406A94 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x4F,%al	\ 406A97 	*/.byte 0x34,0xB1
/*	or	-0x18(%rbp),%rax	\ 406A99 	*/.byte 0x48,0xB,0x45,0xE8
/*		negq	%rax	\ 406A9D 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 406AA0 	*/.byte 0x48,0x19,0xC0
;/0<> AND
/*	and	-0x10(%rbp),%rax	\ 406AA3 	*/.byte 0x48,0x23,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406AA7 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR OR \ mov     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406AAB 	*/.byte 0x48,0x8B,0x5,0xE8,0xB8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406AB2 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406AB4 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 406AB9 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406ABE 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 406AC2 	*/.byte 0x48,0x83,0xE8,0x1
;/0= M_WL	M\ 56 DTST
/*	sbb	%rax,%rax	\ 406AC6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406AC9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 406ACC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x406B13  { OPT-RULES+2C09  } 	\ 406AD0 	*/.byte 0xF,0x84,0x3D,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 406AD6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x56,%eax	\ 406ADA 	*/.byte 0xB8,0x56,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406ADF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406AE3 E8 69 BA FF FF 
;/ OP2 OPexcise	
/*	mov	%rax,-0x08(%rbp)	\ 406AE8 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 406AEC 	*/.byte 0x48,0x8D,0x5,0x6D,0xB7,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 406AF3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 406AF7 E8 A3 BE FF FF 
;/	M\ 57 DTST
/*	mov	%rax,-0x08(%rbp)	\ 406AFC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x57,%eax	\ 406B00 	*/.byte 0xB8,0x57,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406B05 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406B09 E8 43 BA FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406B0E 	*/.byte 0xE9,0xB,0xD4,0xFF,0xFF
;/
;/\ START BLOCK
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 406B13 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406B17 	*/.byte 0x48,0x8B,0x5,0x96,0xB8,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 406B1E 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 406B22 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406B26 	*/.byte 0x48,0x8B,0x5,0x6D,0xB8,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 406B2D 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 406B31 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406B35 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND 458948 XOR OR	\ mov	%rax,-0x10(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406B39 	*/.byte 0x48,0x8B,0x5,0x74,0xB8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406B40 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406B42 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 406B47 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406B4C 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406B50 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 558b48 XOR OR \ mov   -0x10(%rbp),%rdx
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406B54 	*/.byte 0x48,0x8B,0x5,0x3F,0xB8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406B5B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406B5D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x158B48,%eax	\ 406B62 	*/.byte 0x35,0x48,0x8B,0x55,0x0
/*	or	-0x10(%rbp),%rax	\ 406B67 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406B6B 	*/.byte 0x48,0x89,0x45,0xF0
;/
;/
;/DUP   \  BLOCK			\ mov	%rax,-0x10(%rbp)
/*	mov	%rax,-0x18(%rbp)	\ 406B6F 	*/.byte 0x48,0x89,0x45,0xE8
;/OP1@ L@	FFFFFF AND 058b48 XOR OR	\ mov     X(%rip),%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406B73 	*/.byte 0x48,0x8B,0x5,0x2D,0xB8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406B7A 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406B7C 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58B48,%eax	\ 406B81 	*/.byte 0x35,0x48,0x8B,0x5,0x0
/*	or	-0x18(%rbp),%rax	\ 406B86 	*/.byte 0x48,0xB,0x45,0xE8
/*	subq	$0x01,%rax	\ 406B8A 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	DROP		\ mov   -0x10(%rbp),%rdx
/*	sbb	%rax,%rax	\ 406B8E 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406B91 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 406B94 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 406B98 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x406BFB  { OPT-RULES+2CF1  } 	\ 406B9C 	*/.byte 0xF,0x84,0x59,0x0,0x0,0x0
/*	mov	$0x40,%eax	\ 406BA2 	*/.byte 0xB8,0x40,0x0,0x0,0x0
	call	0x402551  { DTST } 	\ 406BA7 E8 A5 B9 FF FF 
;/	M\ 40 DTST
;/	15 OP1@ 2+ C!   \ mov     X(%rip),%rdx
/*	mov	%rax,-0x08(%rbp)	\ 406BAC 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x15,-0x10(%rbp)	\ 406BB0 	*/.byte 0x48,0xC7,0x45,0xF0,0x15,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406BB8 	*/.byte 0x48,0x8B,0x5,0xE8,0xB7,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 406BBF 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%dl	\ 406BC3 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 406BC6 	*/.byte 0x88,0x10
/*	movq	$0x92,-0x10(%rbp)	\ 406BC8 	*/.byte 0x48,0xC7,0x45,0xF0,0x92,0x0,0x0,0x0
;/	92  OP0@ 1+ C!	\ xchg   %rax,%rdx
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406BD0 	*/.byte 0x48,0x8B,0x5,0xC3,0xB7,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406BD7 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 406BDB 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 406BDE 	*/.byte 0x88,0x10
/*	addq	$-0x02,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 406BE0 	*/.byte 0x48,0x83,0x5,0x68,0xAA,0xFF,0xFF,0xFE
;/	-2 ALLOT
/*	mov	$0x41,%eax	\ 406BE8 	*/.byte 0xB8,0x41,0x0,0x0,0x0
;/	M\ 41 DTST
/*	lea	-0x08(%rbp),%rbp	\ 406BED 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406BF1 E8 5B B9 FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406BF6 	*/.byte 0xE9,0x23,0xD3,0xFF,0xFF
;/
;/DUP   \  BLOCK		\ mov	%rax,-0x10(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 406BFB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 406BFF 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ DX_apply<> OR
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406C03 	*/.byte 0x48,0x8B,0x5,0x9D,0xB7,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 406C0A 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4036BF  { DX_apply<> } 	\ 406C0E E8 AC CA FF FF 
/*	or	0x00(%rbp),%rax	\ 406C13 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 406C17 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	DROP	\ mov   -0x10(%rbp),%rdx
/*	sbb	%rax,%rax	\ 406C1B 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406C1E 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 406C21 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 406C25 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x406CAE  { OPT-RULES+2DA4  } 	\ 406C29 	*/.byte 0xF,0x84,0x7F,0x0,0x0,0x0
/*	mov	$0x2C,%eax	\ 406C2F 	*/.byte 0xB8,0x2C,0x0,0x0,0x0
	call	0x402551  { DTST } 	\ 406C34 E8 18 B9 FF FF 
;/	M\ 2C DTST
;/	OP0 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 406C39 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 406C3D 	*/.byte 0x48,0x8D,0x5,0xC,0xB6,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 406C44 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 406C48 E8 52 BD FF FF 
;/	OP0 3 OPinsert
/*	mov	%rax,-0x08(%rbp)	\ 406C4D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 406C51 	*/.byte 0x48,0x8D,0x5,0xF8,0xB5,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 406C58 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x3,%eax	\ 406C5C 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 406C61 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4028C0  { OPinsert } 	\ 406C65 E8 56 BC FF FF 
;/	48 OP1 @ C!   \ mov    %rax,%rdx
/*	mov	%rax,-0x08(%rbp)	\ 406C6A 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x48,-0x10(%rbp)	\ 406C6E 	*/.byte 0x48,0xC7,0x45,0xF0,0x48,0x0,0x0,0x0
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406C76 	*/.byte 0x48,0x8B,0x5,0xDB,0xB5,0xFF,0xFF
/*	mov	-0x10(%rbp),%dl	\ 406C7D 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 406C80 	*/.byte 0x88,0x10
/*	movq	$0xC289,-0x10(%rbp)	\ 406C82 	*/.byte 0x48,0xC7,0x45,0xF0,0x89,0xC2,0x0,0x0
;/	c289 OP1 @ 1+ W!   \ mov    %rax,%rdx
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406C8A 	*/.byte 0x48,0x8B,0x5,0xC7,0xB5,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406C91 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 406C95 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 406C98 	*/.byte 0x66,0x89,0x10
/*	mov	$0x2D,%eax	\ 406C9B 	*/.byte 0xB8,0x2D,0x0,0x0,0x0
;/	M\ 2D DTST
/*	lea	-0x08(%rbp),%rbp	\ 406CA0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406CA4 E8 A8 B8 FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406CA9 	*/.byte 0xE9,0x70,0xD2,0xFF,0xFF
;/
;/\ END  BLOCK			\ mov	%rax,-0x10(%rbp)
;/OP1@ L@ FFFFFF AND d08948 XOR OR	\ mov	%rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 406CAE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406CB2 	*/.byte 0x48,0x8B,0x5,0xEE,0xB6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406CB9 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406CBB 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 406CC0 	*/.byte 0x35,0x48,0x89,0xD0,0x0
/*	or	-0x08(%rbp),%rax	\ 406CC5 	*/.byte 0x48,0xB,0x45,0xF8
;/0=	M_WL			\ mov   -0x10(%rbp),%rdx
/*	subq	$0x01,%rax	\ 406CC9 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 406CCD 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406CD0 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 406CD3 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 406CD7 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x406D3E  { OPT-RULES+2E34  } 	\ 406CDB 	*/.byte 0xF,0x84,0x5D,0x0,0x0,0x0
;/	M\ 38 DTST
/*	mov	%rax,-0x08(%rbp)	\ 406CE1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x38,%eax	\ 406CE5 	*/.byte 0xB8,0x38,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406CEA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406CEE E8 5E B8 FF FF 
;/	92  OP1@ 1+ C!	\ xchg   %rax,%rdx
/*	mov	%rax,-0x08(%rbp)	\ 406CF3 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x92,-0x10(%rbp)	\ 406CF7 	*/.byte 0x48,0xC7,0x45,0xF0,0x92,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406CFF 	*/.byte 0x48,0x8B,0x5,0xA1,0xB6,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406D06 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 406D0A 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 406D0D 	*/.byte 0x88,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406D0F 	*/.byte 0x48,0x8D,0x5,0x42,0xB5,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 406D16 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 406D1A E8 68 B7 FF FF 
;/	-5 ALLOT
/*	addq	$-0x05,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 406D1F 	*/.byte 0x48,0x83,0x5,0x29,0xA9,0xFF,0xFF,0xFB
;/	M\ 39 DTST
/*	mov	%rax,-0x08(%rbp)	\ 406D27 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x39,%eax	\ 406D2B 	*/.byte 0xB8,0x39,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406D30 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406D34 E8 18 B8 FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406D39 	*/.byte 0xE9,0xE0,0xD1,0xFF,0xFF
;/
;/OP2@ L@ FFFFFF AND 158d48 XOR \       lea     X(%rip),%rdx
/*	mov	%rax,-0x08(%rbp)	\ 406D3E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406D42 	*/.byte 0x48,0x8B,0x5,0x6B,0xB6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406D49 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406D4B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x158D48,%eax	\ 406D50 	*/.byte 0x35,0x48,0x8D,0x15,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406D55 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406D59 	*/.byte 0x48,0x8B,0x5,0x47,0xB6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406D60 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406D62 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 406D67 	*/.byte 0x48,0x89,0x45,0xE8
;/DUP	28948 XOR	\ mov     %rax,(%rdx)
/*	xor	$0x28948,%rax	\ 406D6B 	*/.byte 0x48,0x35,0x48,0x89,0x2,0x0
/*	mov	-0x18(%rbp),%rdx	\ 406D71 	*/.byte 0x48,0x8B,0x55,0xE8
;/SWAP	20148 <> AND	\ add     %rax,(%rdx)
/*	mov	%rax,-0x18(%rbp)	\ 406D75 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 406D79 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$0x20148,%eax	\ 406D7D 	*/.byte 0xB8,0x48,0x1,0x2,0x0
/*	xor	-0x20(%rbp),%rax	\ 406D82 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 406D86 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 406D89 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 406D8C 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 406D90 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR  0=
/*	subq	$0x01,%rax	\ 406D94 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 406D98 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406D9B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 406D9E 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 30 DTST
/*	jz	0x406E0B  { OPT-RULES+2F01  } 	\ 406DA2 	*/.byte 0xF,0x84,0x63,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 406DA8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x30,%eax	\ 406DAC 	*/.byte 0xB8,0x30,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406DB1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406DB5 E8 97 B7 FF FF 
;/	OP1@ 1+ C@ 0500 OR
/*	mov	%rax,-0x08(%rbp)	\ 406DBA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406DBE 	*/.byte 0x48,0x8B,0x5,0xE2,0xB5,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 406DC5 	*/.byte 0xF,0xB6,0x40,0x1
/*	or	$0x500,%rax	\ 406DC9 	*/.byte 0x48,0xD,0x0,0x5,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406DCF 	*/.byte 0x48,0x89,0x45,0xF0
;/	OP2@ 1+ W! \	mov    %rax,X(%rip)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406DD3 	*/.byte 0x48,0x8B,0x5,0xDA,0xB5,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406DDA 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 406DDE 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 406DE1 	*/.byte 0x66,0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406DE4 	*/.byte 0x48,0x8D,0x5,0x6D,0xB4,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 406DEB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 406DEF E8 AB BB FF FF 
;/	M\ 31 DTST
/*	mov	%rax,-0x08(%rbp)	\ 406DF4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x31,%eax	\ 406DF8 	*/.byte 0xB8,0x31,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406DFD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406E01 E8 4B B7 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406E06 	*/.byte 0xE9,0x13,0xD1,0xFF,0xFF
;/
;/OP2@ L@ FFFFFF AND c0c748 XOR	\ movq	$X,%rax
/*	mov	%rax,-0x08(%rbp)	\ 406E0B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406E0F 	*/.byte 0x48,0x8B,0x5,0x9E,0xB5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406E16 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406E18 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x80C748,%eax	\ 406E1D 	*/.byte 0x35,0x48,0xC7,0xC0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406E22 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 458948 XOR OR	\ mov	%rax,-0x10(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406E26 	*/.byte 0x48,0x8B,0x5,0x7A,0xB5,0xFF,0xFF
/*	mov	(%rax),%eax	\ 406E2D 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406E2F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 406E34 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406E39 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406E3D 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406E41 	*/.byte 0x48,0x8B,0x5,0x52,0xB5,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 406E48 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 406E4C E8 D4 C5 FF FF 
/*	or	0x00(%rbp),%rax	\ 406E51 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 406E55 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 406E59 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406E5C 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 406E5F 	*/.byte 0x48,0x8B,0x45,0x8
;/ M_WL  M\ 32 DTST
/*	lea	0x10(%rbp),%rbp	\ 406E63 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x406EFE  { OPT-RULES+2FF4  } 	\ 406E67 	*/.byte 0xF,0x84,0x91,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 406E6D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x32,%eax	\ 406E71 	*/.byte 0xB8,0x32,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406E76 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406E7A E8 D2 B6 FF FF 
;/	OP1 8 OPsize!
/*	mov	%rax,-0x08(%rbp)	\ 406E7F 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406E83 	*/.byte 0x48,0x8D,0x5,0xCE,0xB3,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 406E8A 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x8,%eax	\ 406E8E 	*/.byte 0xB8,0x8,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 406E93 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402928  { OPsize! } 	\ 406E97 E8 8C BA FF FF 
;/	45c7  OP1@ 1+ W!
/*	mov	%rax,-0x08(%rbp)	\ 406E9C 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x45C7,-0x10(%rbp)	\ 406EA0 	*/.byte 0x48,0xC7,0x45,0xF0,0xC7,0x45,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406EA8 	*/.byte 0x48,0x8B,0x5,0xF8,0xB4,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 406EAF 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 406EB3 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 406EB6 	*/.byte 0x66,0x89,0x10
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406EB9 	*/.byte 0x48,0x8B,0x5,0xF4,0xB4,0xFF,0xFF
;/	OP2@ 3 + L@ OP1@ 4 + L! \  movq   $X,0x8(%rbp)
/*	mov	0x03(%rax),%eax	\ 406EC0 	*/.byte 0x8B,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 406EC3 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406EC7 	*/.byte 0x48,0x8B,0x5,0xD9,0xB4,0xFF,0xFF
/*	lea	0x04(%rax),%rax	\ 406ECE 	*/.byte 0x48,0x8D,0x40,0x4
/*	mov	-0x10(%rbp),%edx	\ 406ED2 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 406ED5 	*/.byte 0x89,0x10
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 406ED7 	*/.byte 0x48,0x8D,0x5,0x82,0xB3,0xFF,0xFF
;/	OP2 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 406EDE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 406EE2 E8 B8 BA FF FF 
;/	M\ 33 DTST
/*	mov	%rax,-0x08(%rbp)	\ 406EE7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x33,%eax	\ 406EEB 	*/.byte 0xB8,0x33,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406EF0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406EF4 E8 58 B6 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406EF9 	*/.byte 0xE9,0x20,0xD0,0xFF,0xFF
;/
;/OP2@ @ 80000000FF AND B8 XOR \      movq    $0x30,%rax
/*	mov	%rax,-0x08(%rbp)	\ 406EFE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406F02 	*/.byte 0x48,0x8B,0x5,0xAB,0xB4,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406F09 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406F0C 	*/.byte 0x48,0x89,0x45,0xF0
/*	movabs	$0x80000000FF,%rax	\ 406F10 	*/.byte 0x48,0xB8,0xFF,0x0,0x0,0x0,0x80,0x0,0x0,0x0
/*	and	-0x10(%rbp),%rax	\ 406F1A 	*/.byte 0x48,0x23,0x45,0xF0
/*	xor	$0xB8,%rax	\ 406F1E 	*/.byte 0x48,0x35,0xB8,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 406F24 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND 458948 XOR OR	\	mov     %rax,-0x08(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406F28 	*/.byte 0x48,0x8B,0x5,0x78,0xB4,0xFF,0xFF
/*	mov	(%rax),%rax	\ 406F2F 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 406F32 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 406F37 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 406F3C 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 406F40 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 406F44 	*/.byte 0x48,0x8B,0x5,0x4F,0xB4,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 406F4B 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 406F4F E8 D1 C4 FF FF 
/*	or	0x00(%rbp),%rax	\ 406F54 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 406F58 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 70 DTST
/*	sbb	%rax,%rax	\ 406F5C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 406F5F 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 406F62 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 406F66 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x406FF9  { OPT-RULES+30EF  } 	\ 406F6A 	*/.byte 0xF,0x84,0x89,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 406F70 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x70,%eax	\ 406F74 	*/.byte 0xB8,0x70,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 406F79 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 406F7D E8 CF B5 FF FF 
;/	OP1@ 3+ C@
/*	mov	%rax,-0x08(%rbp)	\ 406F82 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 406F86 	*/.byte 0x48,0x8B,0x5,0x1A,0xB4,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 406F8D 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 406F91 	*/.byte 0x48,0x89,0x45,0xF0
;/	OP1 OPexcise
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406F95 	*/.byte 0x48,0x8D,0x5,0xBC,0xB2,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 406F9C 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x40299F  { OPexcise } 	\ 406FA0 E8 FA B9 FF FF 
;/	OP1 3 OPresize
/*	mov	%rax,-0x08(%rbp)	\ 406FA5 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406FA9 	*/.byte 0x48,0x8D,0x5,0xA8,0xB2,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 406FB0 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x3,%eax	\ 406FB4 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 406FB9 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 406FBD E8 13 B8 FF FF 
;/	45c748  OP1 @ L! 
/*	mov	%rax,-0x08(%rbp)	\ 406FC2 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$fimg+0x5C748,-0x10(%rbp)	\ 406FC6 	*/.byte 0x48,0xC7,0x45,0xF0,0x48,0xC7,0x45,0x0
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406FCE 	*/.byte 0x48,0x8B,0x5,0x83,0xB2,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 406FD5 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 406FD8 	*/.byte 0x89,0x10
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 406FDA 	*/.byte 0x48,0x8B,0x5,0x77,0xB2,0xFF,0xFF
;/	OP1 @ 3+ C!     \ mov     $0x30,-0x08(%rbp)
/*	lea	0x03(%rax),%rax	\ 406FE1 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x08(%rbp),%dl	\ 406FE5 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 406FE8 	*/.byte 0x88,0x10
/*	mov	$0x71,%eax	\ 406FEA 	*/.byte 0xB8,0x71,0x0,0x0,0x0
	call	0x402551  { DTST } 	\ 406FEF E8 5D B5 FF FF 
;/	M\ 71 DTST
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 406FF4 	*/.byte 0xE9,0x25,0xCF,0xFF,0xFF
;/
;/OP2@ @ FFFFFF AND 058D48 XOR	\	lea     X (%rip),%rax
/*	mov	%rax,-0x08(%rbp)	\ 406FF9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 406FFD 	*/.byte 0x48,0x8B,0x5,0xB0,0xB3,0xFF,0xFF
/*	mov	(%rax),%rax	\ 407004 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407007 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58D48,%eax	\ 40700C 	*/.byte 0x35,0x48,0x8D,0x5,0x0
/*	mov	%rax,-0x10(%rbp)	\ 407011 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ W@ 	00C6 XOR OR	\	movb    $Y,(%rax)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407015 	*/.byte 0x48,0x8B,0x5,0x8B,0xB3,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 40701C 	*/.byte 0xF,0xB7,0x0
/*	xor	$0xC6,%rax	\ 40701F 	*/.byte 0x48,0x35,0xC6,0x0,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 407025 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407029 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40702D 	*/.byte 0x48,0x8B,0x5,0x66,0xB3,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407034 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 407038 E8 E8 C3 FF FF 
/*	or	0x00(%rbp),%rax	\ 40703D 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407041 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 8C DTST
/*	sbb	%rax,%rax	\ 407045 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407048 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 40704B 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40704F 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x4070E8  { OPT-RULES+31DE  } 	\ 407053 	*/.byte 0xF,0x84,0x8F,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407059 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x8C,%eax	\ 40705D 	*/.byte 0xB8,0x8C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407062 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407066 E8 E6 B4 FF FF 
;/	OP2@ 3+ L@ OP2@ 2+ L!
/*	mov	%rax,-0x08(%rbp)	\ 40706B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40706F 	*/.byte 0x48,0x8B,0x5,0x3E,0xB3,0xFF,0xFF
/*	mov	0x03(%rax),%eax	\ 407076 	*/.byte 0x8B,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 407079 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40707D 	*/.byte 0x48,0x8B,0x5,0x30,0xB3,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 407084 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%edx	\ 407088 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 40708B 	*/.byte 0x89,0x10
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40708D 	*/.byte 0x48,0x8B,0x5,0x13,0xB3,0xFF,0xFF
;/	OP1@ 2+ C@ OP2@  6 + C!	
/*	movzb	0x02(%rax),%eax	\ 407094 	*/.byte 0xF,0xB6,0x40,0x2
/*	mov	%rax,-0x10(%rbp)	\ 407098 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40709C 	*/.byte 0x48,0x8B,0x5,0x11,0xB3,0xFF,0xFF
/*	lea	0x06(%rax),%rax	\ 4070A3 	*/.byte 0x48,0x8D,0x40,0x6
/*	mov	-0x10(%rbp),%dl	\ 4070A7 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 4070AA 	*/.byte 0x88,0x10
/*	movq	$0x5C6,-0x10(%rbp)	\ 4070AC 	*/.byte 0x48,0xC7,0x45,0xF0,0xC6,0x5,0x0,0x0
;/	05C6 OP2@ W! \ movb   $0x77,0x9(%rip)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4070B4 	*/.byte 0x48,0x8B,0x5,0xF9,0xB2,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 4070BB 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 4070BE 	*/.byte 0x66,0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4070C1 	*/.byte 0x48,0x8D,0x5,0x90,0xB1,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 4070C8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 4070CC E8 CE B8 FF FF 
;/	M\ 8D DTST
/*	mov	%rax,-0x08(%rbp)	\ 4070D1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x8D,%eax	\ 4070D5 	*/.byte 0xB8,0x8D,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4070DA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4070DE E8 6E B4 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4070E3 	*/.byte 0xE9,0x36,0xCE,0xFF,0xFF
;/
;/OP2@ @ FFFFFF AND 058D48 XOR	\	lea     X (%rip),%rax
/*	mov	%rax,-0x08(%rbp)	\ 4070E8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4070EC 	*/.byte 0x48,0x8B,0x5,0xC1,0xB2,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4070F3 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4070F6 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58D48,%eax	\ 4070FB 	*/.byte 0x35,0x48,0x8D,0x5,0x0
/*	mov	%rax,-0x10(%rbp)	\ 407100 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND 00C748 XOR OR	\	movq    $Y,(%rax)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407104 	*/.byte 0x48,0x8B,0x5,0x9C,0xB2,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40710B 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40710E 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0xC748,%eax	\ 407113 	*/.byte 0x35,0x48,0xC7,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 407118 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40711C 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407120 	*/.byte 0x48,0x8B,0x5,0x73,0xB2,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407127 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 40712B E8 F5 C2 FF FF 
/*	or	0x00(%rbp),%rax	\ 407130 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407134 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 82 DTST
/*	sbb	%rax,%rax	\ 407138 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40713B 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 40713E 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 407142 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x4071F1  { OPT-RULES+32E7  } 	\ 407146 	*/.byte 0xF,0x84,0xA5,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40714C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x82,%eax	\ 407150 	*/.byte 0xB8,0x82,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407155 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407159 E8 F3 B3 FF FF 
;/	OP1@ 3+ L@
/*	mov	%rax,-0x08(%rbp)	\ 40715E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407162 	*/.byte 0x48,0x8B,0x5,0x3E,0xB2,0xFF,0xFF
/*	mov	0x03(%rax),%eax	\ 407169 	*/.byte 0x8B,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 40716C 	*/.byte 0x48,0x89,0x45,0xF0
;/	OP1 OPexcise
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407170 	*/.byte 0x48,0x8D,0x5,0xE1,0xB0,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407177 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x40299F  { OPexcise } 	\ 40717B E8 1F B8 FF FF 
;/	OP1 B OPsize!
/*	mov	%rax,-0x08(%rbp)	\ 407180 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407184 	*/.byte 0x48,0x8D,0x5,0xCD,0xB0,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40718B 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0xB,%eax	\ 40718F 	*/.byte 0xB8,0xB,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 407194 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402928  { OPsize! } 	\ 407198 E8 8B B7 FF FF 
;/	-4 OP1 @ 3+ L+! 
/*	mov	%rax,-0x08(%rbp)	\ 40719D 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x4,-0x10(%rbp)	\ 4071A1 	*/.byte 0x48,0xC7,0x45,0xF0,0xFC,0xFF,0xFF,0xFF
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4071A9 	*/.byte 0x48,0x8B,0x5,0xA8,0xB0,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 4071B0 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x10(%rbp),%rdx	\ 4071B4 	*/.byte 0x48,0x8B,0x55,0xF0
/*	add	%edx,(%rax)	\ 4071B8 	*/.byte 0x1,0x10
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4071BA 	*/.byte 0x48,0x8B,0x5,0x97,0xB0,0xFF,0xFF
;/	OP1 @ 7 + L! 
/*	lea	0x07(%rax),%rax	\ 4071C1 	*/.byte 0x48,0x8D,0x40,0x7
/*	mov	-0x08(%rbp),%edx	\ 4071C5 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 4071C8 	*/.byte 0x89,0x10
/*	movq	$0xC7,-0x08(%rbp)	\ 4071CA 	*/.byte 0x48,0xC7,0x45,0xF8,0xC7,0x0,0x0,0x0
;/	C7 OP1 @ 1+ C!  \    movq   $Y,X(%rip)
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4071D2 	*/.byte 0x48,0x8B,0x5,0x7F,0xB0,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 4071D9 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x08(%rbp),%dl	\ 4071DD 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 4071E0 	*/.byte 0x88,0x10
/*	mov	$0x83,%eax	\ 4071E2 	*/.byte 0xB8,0x83,0x0,0x0,0x0
	call	0x402551  { DTST } 	\ 4071E7 E8 65 B3 FF FF 
;/	M\ 83 DTST
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4071EC 	*/.byte 0xE9,0x2D,0xCD,0xFF,0xFF
;/
;/J_COD FE AND 0x84 XOR
/*	mov	%rax,-0x08(%rbp)	\ 4071F1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4021ED  { J_COD+5  } (%rip),%rax	\ 4071F5 	*/.byte 0x48,0x8B,0x5,0xF1,0xAF,0xFF,0xFF
/*	and	$0xFE,%eax	\ 4071FC 	*/.byte 0x25,0xFE,0x0,0x0,0x0
/*	xor	$-0x7C,%al	\ 407201 	*/.byte 0x34,0x84
/*	mov	%rax,-0x10(%rbp)	\ 407203 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND 00B60F XOR OR	\	movzb	(%rax),%eax
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407207 	*/.byte 0x48,0x8B,0x5,0xA6,0xB1,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40720E 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407211 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0xB60F,%eax	\ 407216 	*/.byte 0x35,0xF,0xB6,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 40721B 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40721F 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ W@		583C XOR OR	\	cmp	$0x58,%al
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407223 	*/.byte 0x48,0x8B,0x5,0x7D,0xB1,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 40722A 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x583C,%rax	\ 40722D 	*/.byte 0x48,0x35,0x3C,0x58,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 407233 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407237 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40723B 	*/.byte 0x48,0x8B,0x5,0x58,0xB1,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407242 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 407246 E8 DA C1 FF FF 
/*	or	0x00(%rbp),%rax	\ 40724B 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 40724F 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 84 DTST
/*	sbb	%rax,%rax	\ 407253 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407256 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407259 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40725D 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x4072B8  { OPT-RULES+33AE  } 	\ 407261 	*/.byte 0xF,0x84,0x51,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407267 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x84,%eax	\ 40726B 	*/.byte 0xB8,0x84,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407270 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407274 E8 D8 B2 FF FF 
;/	583880 	OP2@ L! \ cmpb   $0x58,(%rax)
/*	mov	%rax,-0x08(%rbp)	\ 407279 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$fimg+0x183880,-0x10(%rbp)	\ 40727D 	*/.byte 0x48,0xC7,0x45,0xF0,0x80,0x38,0x58,0x0
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407285 	*/.byte 0x48,0x8B,0x5,0x28,0xB1,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 40728C 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 40728F 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407291 	*/.byte 0x48,0x8D,0x5,0xC0,0xAF,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 407298 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40729C E8 FE B6 FF FF 
;/	M\ 85 DTST              
/*	mov	%rax,-0x08(%rbp)	\ 4072A1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x85,%eax	\ 4072A5 	*/.byte 0xB8,0x85,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4072AA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4072AE E8 9E B2 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4072B3 	*/.byte 0xE9,0x66,0xCC,0xFF,0xFF
;/
;/
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 4072B8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4072BC 	*/.byte 0x48,0x8B,0x5,0xF1,0xB0,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 4072C3 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 4072C7 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4072CB 	*/.byte 0x48,0x8B,0x5,0xC8,0xB0,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 4072D2 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 4072D6 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4072DA 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND 45c748 XOR OR	\ movq    $-0x1,-0x10(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4072DE 	*/.byte 0x48,0x8B,0x5,0xCF,0xB0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4072E5 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4072E7 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x5C748,%eax	\ 4072EC 	*/.byte 0x35,0x48,0xC7,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4072F1 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4072F5 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 058d48 XOR OR	\ lea     OPTque+0x5 (%rip),%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4072F9 	*/.byte 0x48,0x8B,0x5,0xA7,0xB0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407300 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407302 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58D48,%eax	\ 407307 	*/.byte 0x35,0x48,0x8D,0x5,0x0
/*	or	-0x10(%rbp),%rax	\ 40730C 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407310 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 558b48 XOR OR	\ mov     -0x10(%rbp),%rdx
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407314 	*/.byte 0x48,0x8B,0x5,0x7F,0xB0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40731B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40731D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x158B48,%eax	\ 407322 	*/.byte 0x35,0x48,0x8B,0x55,0x0
/*	or	-0x10(%rbp),%rax	\ 407327 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 40732B 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 40732F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407332 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 407335 	*/.byte 0x48,0x8B,0x45,0xF8
;/ M_WL  M\ 34 DTST
/*	jz	0x4073DF  { OPT-RULES+34D5  } 	\ 407339 	*/.byte 0xF,0x84,0xA0,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40733F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x34,%eax	\ 407343 	*/.byte 0xB8,0x34,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407348 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40734C E8 0 B2 FF FF 
;/	89 OP0@ 1+ C!	\ mov    %rdx,-0x10(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 407351 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x89,-0x10(%rbp)	\ 407355 	*/.byte 0x48,0xC7,0x45,0xF0,0x89,0x0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40735D 	*/.byte 0x48,0x8B,0x5,0x36,0xB0,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 407364 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 407368 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 40736B 	*/.byte 0x88,0x10
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40736D 	*/.byte 0x48,0x8B,0x5,0x40,0xB0,0xFF,0xFF
;/	OP2@ 4+ L@
/*	mov	0x04(%rax),%eax	\ 407374 	*/.byte 0x8B,0x40,0x4
/*	mov	%rax,-0x10(%rbp)	\ 407377 	*/.byte 0x48,0x89,0x45,0xF0
;/	OP2 OPexcise
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 40737B 	*/.byte 0x48,0x8D,0x5,0xDE,0xAE,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407382 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x40299F  { OPexcise } 	\ 407386 E8 14 B6 FF FF 
;/	OP0 7 OPinsert
/*	mov	%rax,-0x08(%rbp)	\ 40738B 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 40738F 	*/.byte 0x48,0x8D,0x5,0xBA,0xAE,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 407396 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x7,%eax	\ 40739A 	*/.byte 0xB8,0x7,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 40739F 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4028C0  { OPinsert } 	\ 4073A3 E8 18 B5 FF FF 
;/	c2c748 OP1 @ L!	\ movq	$-0x1,%rdx
/*	mov	%rax,-0x08(%rbp)	\ 4073A8 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$fimg+0x82C748,-0x10(%rbp)	\ 4073AC 	*/.byte 0x48,0xC7,0x45,0xF0,0x48,0xC7,0xC2,0x0
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4073B4 	*/.byte 0x48,0x8B,0x5,0x9D,0xAE,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 4073BB 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 4073BE 	*/.byte 0x89,0x10
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4073C0 	*/.byte 0x48,0x8B,0x5,0x91,0xAE,0xFF,0xFF
;/	OP1 @ 3 + L!	 
/*	lea	0x03(%rax),%rax	\ 4073C7 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x08(%rbp),%edx	\ 4073CB 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 4073CE 	*/.byte 0x89,0x10
/*	mov	$0x35,%eax	\ 4073D0 	*/.byte 0xB8,0x35,0x0,0x0,0x0
	call	0x402551  { DTST } 	\ 4073D5 E8 77 B1 FF FF 
;/	M\ 35 DTST
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4073DA 	*/.byte 0xE9,0x3F,0xCB,0xFF,0xFF
;/
;/OP2@ 2+ W@  OP0@ 2+ W@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 4073DF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4073E3 	*/.byte 0x48,0x8B,0x5,0xCA,0xAF,0xFF,0xFF
/*	movzw	0x02(%rax),%eax	\ 4073EA 	*/.byte 0xF,0xB7,0x40,0x2
/*	mov	%rax,-0x10(%rbp)	\ 4073EE 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4073F2 	*/.byte 0x48,0x8B,0x5,0xA1,0xAF,0xFF,0xFF
/*	movzw	0x02(%rax),%eax	\ 4073F9 	*/.byte 0xF,0xB7,0x40,0x2
/*	xor	-0x10(%rbp),%rax	\ 4073FD 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407401 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ EFFDFF AND 458948 XOR OR \	mov 0x00(%rbp),%rax | %rax,0x00(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407405 	*/.byte 0x48,0x8B,0x5,0xA8,0xAF,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40740C 	*/.byte 0x8B,0x0
/*	and	$fimg+0xAFFDFF,%eax	\ 40740E 	*/.byte 0x25,0xFF,0xFD,0xEF,0x0
/*	xor	$fimg+0x58948,%eax	\ 407413 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 407418 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40741C 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ ?ChRAX<>     OR \ 0 not chench rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407420 	*/.byte 0x48,0x8B,0x5,0x80,0xAF,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407427 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403500  { ?ChRAX<> } 	\ 40742B E8 D0 C0 FF FF 
/*	or	0x00(%rbp),%rax	\ 407430 	*/.byte 0x48,0xB,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 407434 	*/.byte 0x48,0x89,0x45,0x0
;/OP2@ 3 + C@ OP1@ 3 + C@ = OR
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407438 	*/.byte 0x48,0x8B,0x5,0x75,0xAF,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40743F 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x08(%rbp)	\ 407443 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407447 	*/.byte 0x48,0x8B,0x5,0x59,0xAF,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40744E 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x08(%rbp),%rax	\ 407452 	*/.byte 0x48,0x33,0x45,0xF8
/*	subq	$0x01,%rax	\ 407456 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40745A 	*/.byte 0x48,0x19,0xC0
/*	or	0x00(%rbp),%rax	\ 40745D 	*/.byte 0x48,0xB,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 407461 	*/.byte 0x48,0x89,0x45,0x0
;/OP0@ L@ EFFDFF AND 458948 XOR OR \	mov 0x00(%rbp),%rax | %rax,0x00(%rbp)
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407465 	*/.byte 0x48,0x8B,0x5,0x2E,0xAF,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40746C 	*/.byte 0x8B,0x0
/*	and	$fimg+0xAFFDFF,%eax	\ 40746E 	*/.byte 0x25,0xFF,0xFD,0xEF,0x0
/*	xor	$fimg+0x58948,%eax	\ 407473 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	0x00(%rbp),%rax	\ 407478 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 40747C 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 407480 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407483 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407486 	*/.byte 0x48,0x8B,0x45,0x8
;/ M_WL  M\ 9C DTST
/*	lea	0x10(%rbp),%rbp	\ 40748A 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x4074D9  { OPT-RULES+35CF  } 	\ 40748E 	*/.byte 0xF,0x84,0x45,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407494 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x9C,%eax	\ 407498 	*/.byte 0xB8,0x9C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40749D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4074A1 E8 AB B0 FF FF 
;/	OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 4074A6 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4074AA 	*/.byte 0x48,0x8D,0x5,0xA7,0xAD,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4074B1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 4074B5 E8 CD AF FF FF 
;/	-4 ALLOT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4074BA 	*/.byte 0x48,0x83,0x5,0x8E,0xA1,0xFF,0xFF,0xFC
;/	M\ 9D DTST
/*	mov	%rax,-0x08(%rbp)	\ 4074C2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x9D,%eax	\ 4074C6 	*/.byte 0xB8,0x9D,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4074CB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4074CF E8 7D B0 FF FF 
;/ REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4074D4 	*/.byte 0xE9,0x45,0xCA,0xFF,0xFF
;/
;/OP2@ L@ FFFFFF AND 058b48 XOR \ mov X(%rip),%rax
/*	mov	%rax,-0x08(%rbp)	\ 4074D9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4074DD 	*/.byte 0x48,0x8B,0x5,0xD0,0xAE,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4074E4 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4074E6 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58B48,%eax	\ 4074EB 	*/.byte 0x35,0x48,0x8B,0x5,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4074F0 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ C@ 50 XOR OR \ Push    %rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4074F4 	*/.byte 0x48,0x8B,0x5,0xAC,0xAE,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 4074FB 	*/.byte 0xF,0xB6,0x0
/*	xor	$0x50,%al	\ 4074FE 	*/.byte 0x34,0x50
/*	or	-0x10(%rbp),%rax	\ 407500 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407504 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR \ mov 0x00(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407508 	*/.byte 0x48,0x8B,0x5,0x8B,0xAE,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 40750F 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 407513 E8 D BF FF FF 
/*	or	0x00(%rbp),%rax	\ 407518 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 40751C 	*/.byte 0x48,0x83,0xE8,0x1
;/0= 	M_WL	M\ 44 DTST
/*	sbb	%rax,%rax	\ 407520 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407523 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407526 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40752A 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x4075A9  { OPT-RULES+369F  } 	\ 40752E 	*/.byte 0xF,0x84,0x75,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407534 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x44,%eax	\ 407538 	*/.byte 0xB8,0x44,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40753D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407541 E8 B B0 FF FF 
;/	35FF OP2@ 1+ W! \ push   X(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 407546 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x35FF,-0x10(%rbp)	\ 40754A 	*/.byte 0x48,0xC7,0x45,0xF0,0xFF,0x35,0x0,0x0
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407552 	*/.byte 0x48,0x8B,0x5,0x5B,0xAE,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 407559 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 40755D 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 407560 	*/.byte 0x66,0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407563 	*/.byte 0x48,0x8D,0x5,0xEE,0xAC,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 40756A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40756E E8 2C B4 FF FF 
;/	OP1 -1 OPresize
/*	mov	%rax,-0x08(%rbp)	\ 407573 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407577 	*/.byte 0x48,0x8D,0x5,0xDA,0xAC,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40757E 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$-0x1,%rax	\ 407582 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407589 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 40758D E8 43 B2 FF FF 
;/	M\ 45 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407592 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x45,%eax	\ 407596 	*/.byte 0xB8,0x45,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40759B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40759F E8 AD AF FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4075A4 	*/.byte 0xE9,0x75,0xC9,0xFF,0xFF
;/
;/OP2@ C@ 58 XOR	\ pop    %rax
/*	mov	%rax,-0x08(%rbp)	\ 4075A9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4075AD 	*/.byte 0x48,0x8B,0x5,0x0,0xAE,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 4075B4 	*/.byte 0xF,0xB6,0x0
/*	xor	$0x58,%al	\ 4075B7 	*/.byte 0x34,0x58
/*	mov	%rax,-0x10(%rbp)	\ 4075B9 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4075BD 	*/.byte 0x48,0x8B,0x5,0xE3,0xAD,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4075C4 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4075C6 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 4075CB 	*/.byte 0x48,0x89,0x45,0xE8
;/ DUP	058948 XOR \ mov %rax,X(%rip)
/*	xor	$0x58948,%rax	\ 4075CF 	*/.byte 0x48,0x35,0x48,0x89,0x5,0x0
/*	mov	-0x18(%rbp),%rdx	\ 4075D5 	*/.byte 0x48,0x8B,0x55,0xE8
;/ SWAP	458948 <>  AND OR \ mov %rax,X(%rbp)
/*	mov	%rax,-0x18(%rbp)	\ 4075D9 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 4075DD 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$fimg+0x58948,%eax	\ 4075E1 	*/.byte 0xB8,0x48,0x89,0x45,0x0
/*	xor	-0x20(%rbp),%rax	\ 4075E6 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 4075EA 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 4075ED 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 4075F0 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 4075F4 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4075F8 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR	\ mov 0x00(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4075FC 	*/.byte 0x48,0x8B,0x5,0x97,0xAD,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407603 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 407607 E8 19 BE FF FF 
/*	or	0x00(%rbp),%rax	\ 40760C 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407610 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 64 DTST
/*	sbb	%rax,%rax	\ 407614 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407617 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 40761A 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 40761E 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x4076B0  { OPT-RULES+37A6  } 	\ 407622 	*/.byte 0xF,0x84,0x88,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407628 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x64,%eax	\ 40762C 	*/.byte 0xB8,0x64,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407631 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407635 E8 17 AF FF FF 
;/	8F OP1@ 1+ C! \ pop   X(%rip)
/*	mov	%rax,-0x08(%rbp)	\ 40763A 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x8F,-0x10(%rbp)	\ 40763E 	*/.byte 0x48,0xC7,0x45,0xF0,0x8F,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407646 	*/.byte 0x48,0x8B,0x5,0x5A,0xAD,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 40764D 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 407651 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 407654 	*/.byte 0x88,0x10
/*	movq	$-0x64,%rax	\ 407656 	*/.byte 0x48,0xC7,0xC0,0x9C,0xFF,0xFF,0xFF
;/	-64 DTST
/*	lea	-0x08(%rbp),%rbp	\ 40765D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407661 E8 EB AE FF FF 
;/	OP1 -1 OPresize
/*	mov	%rax,-0x08(%rbp)	\ 407666 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40766A 	*/.byte 0x48,0x8D,0x5,0xE7,0xAB,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 407671 	*/.byte 0x48,0x89,0x45,0xF0
/*	movq	$-0x1,%rax	\ 407675 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 40767C 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 407680 E8 50 B1 FF FF 
;/	OP2 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 407685 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 407689 	*/.byte 0x48,0x8D,0x5,0xD0,0xAB,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 407690 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 407694 E8 6 B3 FF FF 
;/	M\ 63 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407699 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x63,%eax	\ 40769D 	*/.byte 0xB8,0x63,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4076A2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4076A6 E8 A6 AE FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 4076AB 	*/.byte 0xE9,0x6E,0xC8,0xFF,0xFF
;/
;/OP2@ L@ FFFFFF AND d08948 XOR	\  mov    %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4076B0 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4076B4 	*/.byte 0x48,0x8B,0x5,0xF9,0xAC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4076BB 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4076BD 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 4076C2 	*/.byte 0x35,0x48,0x89,0xD0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4076C7 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND c08548 XOR OR \  test    %rax,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4076CB 	*/.byte 0x48,0x8B,0x5,0xD5,0xAC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4076D2 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4076D4 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x808548,%eax	\ 4076D9 	*/.byte 0x35,0x48,0x85,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 4076DE 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4076E2 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0 OR	\ mov 0x00(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4076E6 	*/.byte 0x48,0x8B,0x5,0xAD,0xAC,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 4076ED 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403327  { NEWRAX0 } 	\ 4076F1 E8 31 BC FF FF 
/*	or	0x00(%rbp),%rax	\ 4076F6 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 4076FA 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 66 DTST
/*	sbb	%rax,%rax	\ 4076FE 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407701 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407704 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 407708 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x407768  { OPT-RULES+385E  } 	\ 40770C 	*/.byte 0xF,0x84,0x56,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407712 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x66,%eax	\ 407716 	*/.byte 0xB8,0x66,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40771B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40771F E8 2D AE FF FF 
;/	d285 OP2@ 1+ W! \ test   %rdx,%rdx
/*	mov	%rax,-0x08(%rbp)	\ 407724 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xD285,-0x10(%rbp)	\ 407728 	*/.byte 0x48,0xC7,0x45,0xF0,0x85,0xD2,0x0,0x0
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407730 	*/.byte 0x48,0x8B,0x5,0x7D,0xAC,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 407737 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 40773B 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 40773E 	*/.byte 0x66,0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407741 	*/.byte 0x48,0x8D,0x5,0x10,0xAB,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 407748 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40774C E8 4E B2 FF FF 
;/	M\ 67 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407751 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x67,%eax	\ 407755 	*/.byte 0xB8,0x67,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40775A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40775E E8 EE AD FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 407763 	*/.byte 0xE9,0xB6,0xC7,0xFF,0xFF
;/
;/OP2@ L@ FFFFFF AND d08948 XOR	\  mov    %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 407768 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40776C 	*/.byte 0x48,0x8B,0x5,0x41,0xAC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407773 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407775 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 40777A 	*/.byte 0x35,0x48,0x89,0xD0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 40777F 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 458948 XOR OR \  mov     %rax,-0x08(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407783 	*/.byte 0x48,0x8B,0x5,0x1D,0xAC,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40778A 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40778C 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 407791 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 407796 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40779A 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0 OR	\ mov 0x00(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40779E 	*/.byte 0x48,0x8B,0x5,0xF5,0xAB,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 4077A5 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403327  { NEWRAX0 } 	\ 4077A9 E8 79 BB FF FF 
/*	or	0x00(%rbp),%rax	\ 4077AE 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 4077B2 	*/.byte 0x48,0x83,0xE8,0x1
;/0= \ 0 and
/*	sbb	%rax,%rax	\ 4077B6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4077B9 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 4077BC 	*/.byte 0x48,0x8B,0x45,0x8
;/ M_WL	M\ 98 DTST
/*	lea	0x10(%rbp),%rbp	\ 4077C0 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x40781F  { OPT-RULES+3915  } 	\ 4077C4 	*/.byte 0xF,0x84,0x55,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4077CA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x98,%eax	\ 4077CE 	*/.byte 0xB8,0x98,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4077D3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4077D7 E8 75 AD FF FF 
;/	55 OP1@ 2+ C! \ mov    %rdx,-0x8(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 4077DC 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x55,-0x10(%rbp)	\ 4077E0 	*/.byte 0x48,0xC7,0x45,0xF0,0x55,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4077E8 	*/.byte 0x48,0x8B,0x5,0xB8,0xAB,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 4077EF 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%dl	\ 4077F3 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 4077F6 	*/.byte 0x88,0x10
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 4077F8 	*/.byte 0x48,0x8D,0x5,0x61,0xAA,0xFF,0xFF
;/	OP2 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 4077FF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 407803 E8 97 B1 FF FF 
;/	M\ 99 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407808 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x99,%eax	\ 40780C 	*/.byte 0xB8,0x99,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407811 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407815 E8 37 AD FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 40781A 	*/.byte 0xE9,0xFF,0xC6,0xFF,0xFF
;/
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 40781F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407823 	*/.byte 0x48,0x8B,0x5,0x8A,0xAB,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40782A 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 40782E 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407832 	*/.byte 0x48,0x8B,0x5,0x61,0xAB,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407839 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 40783D 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407841 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ 3 + C@  OP1@ 3 + C@ = OR
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407845 	*/.byte 0x48,0x8B,0x5,0x68,0xAB,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40784C 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x18(%rbp)	\ 407850 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407854 	*/.byte 0x48,0x8B,0x5,0x4C,0xAB,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 40785B 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x18(%rbp),%rax	\ 40785F 	*/.byte 0x48,0x33,0x45,0xE8
/*	subq	$0x01,%rax	\ 407863 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 407867 	*/.byte 0x48,0x19,0xC0
/*	or	-0x10(%rbp),%rax	\ 40786A 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40786E 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND 558948 XOR OR \ mov     %rdx,-0x10(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407872 	*/.byte 0x48,0x8B,0x5,0x3B,0xAB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407879 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40787B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x158948,%eax	\ 407880 	*/.byte 0x35,0x48,0x89,0x55,0x0
/*	or	-0x10(%rbp),%rax	\ 407885 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407889 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 458948 XOR OR \ mov     %rax,-0x18(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40788D 	*/.byte 0x48,0x8B,0x5,0x13,0xAB,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407894 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407896 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 40789B 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4078A0 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4078A4 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR OR \ mov     -0x10(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4078A8 	*/.byte 0x48,0x8B,0x5,0xEB,0xAA,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4078AF 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4078B1 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 4078B6 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4078BB 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 4078BF 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 5C DTST
/*	sbb	%rax,%rax	\ 4078C3 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4078C6 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4078C9 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40791D  { OPT-RULES+3A13  } 	\ 4078CD 	*/.byte 0xF,0x84,0x4A,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4078D3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x5C,%eax	\ 4078D7 	*/.byte 0xB8,0x5C,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4078DC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4078E0 E8 6C AC FF FF 
;/   d089 OP0@ 1+ W! -1 ALLOT \ 	mov    %rdx,%rax
/*	mov	%rax,-0x08(%rbp)	\ 4078E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xD089,-0x10(%rbp)	\ 4078E9 	*/.byte 0x48,0xC7,0x45,0xF0,0x89,0xD0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4078F1 	*/.byte 0x48,0x8B,0x5,0xA2,0xAA,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 4078F8 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%edx	\ 4078FC 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 4078FF 	*/.byte 0x66,0x89,0x10
/*	addq	$-0x01,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 407902 	*/.byte 0x48,0x83,0x5,0x46,0x9D,0xFF,0xFF,0xFF
/*	mov	$0x5B,%eax	\ 40790A 	*/.byte 0xB8,0x5B,0x0,0x0,0x0
;/		M\ 5B DTST
/*	lea	-0x08(%rbp),%rbp	\ 40790F 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407913 E8 39 AC FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 407918 	*/.byte 0xE9,0x1,0xC6,0xFF,0xFF
;/
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 40791D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407921 	*/.byte 0x48,0x8B,0x5,0x8C,0xAA,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407928 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 40792C 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407930 	*/.byte 0x48,0x8B,0x5,0x63,0xAA,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407937 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 40793B 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40793F 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND 458948 XOR OR \      mov     %rax,X(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407943 	*/.byte 0x48,0x8B,0x5,0x6A,0xAA,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40794A 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40794C 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 407951 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 407956 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40795A 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @  80000000FF AND B8 XOR OR \      movq    $0x30,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40795E 	*/.byte 0x48,0x8B,0x5,0x42,0xAA,0xFF,0xFF
/*	mov	(%rax),%rax	\ 407965 	*/.byte 0x48,0x8B,0x0
/*	mov	%rax,-0x18(%rbp)	\ 407968 	*/.byte 0x48,0x89,0x45,0xE8
/*	movabs	$0x80000000FF,%rax	\ 40796C 	*/.byte 0x48,0xB8,0xFF,0x0,0x0,0x0,0x80,0x0,0x0,0x0
/*	and	-0x18(%rbp),%rax	\ 407976 	*/.byte 0x48,0x23,0x45,0xE8
/*	xor	$0xB8,%rax	\ 40797A 	*/.byte 0x48,0x35,0xB8,0x0,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 407980 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407984 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 453948 XOR	\	cmp     %rax,-0x08(%rbp)
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407988 	*/.byte 0x48,0x8B,0x5,0xB,0xAA,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40798F 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407992 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x53948,%eax	\ 407997 	*/.byte 0x35,0x48,0x39,0x45,0x0
/*	mov	%rax,-0x18(%rbp)	\ 40799C 	*/.byte 0x48,0x89,0x45,0xE8
;/OP0@ L@ ADD|OR|AND|XOR<> AND OR \	__  X(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4079A0 	*/.byte 0x48,0x8B,0x5,0xF3,0xA9,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4079A7 	*/.byte 0x8B,0x0
/*	lea	-0x18(%rbp),%rbp	\ 4079A9 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x402BBD  { ADD|OR|AND|XOR<> } 	\ 4079AD E8 B B2 FF FF 
/*	and	0x00(%rbp),%rax	\ 4079B2 	*/.byte 0x48,0x23,0x45,0x0
/*	or	0x08(%rbp),%rax	\ 4079B6 	*/.byte 0x48,0xB,0x45,0x8
/*	subq	$0x01,%rax	\ 4079BA 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 4A DTST
/*	sbb	%rax,%rax	\ 4079BE 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4079C1 48 85 C0 
/*	mov	0x10(%rbp),%rax	\ 4079C4 	*/.byte 0x48,0x8B,0x45,0x10
/*	lea	0x18(%rbp),%rbp	\ 4079C8 	*/.byte 0x48,0x8D,0x6D,0x18
/*	jz	0x407ACC  { OPT-RULES+3BC2  } 	\ 4079CC 	*/.byte 0xF,0x84,0xFA,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4079D2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x4A,%eax	\ 4079D6 	*/.byte 0xB8,0x4A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4079DB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4079DF E8 6D AB FF FF 
;/	OP1@ 1+ L@ 
/*	mov	%rax,-0x08(%rbp)	\ 4079E4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4079E8 	*/.byte 0x48,0x8B,0x5,0xB8,0xA9,0xFF,0xFF
/*	mov	0x01(%rax),%eax	\ 4079EF 	*/.byte 0x8B,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 4079F2 	*/.byte 0x48,0x89,0x45,0xF0
;/	6 OP0@ 1+ XOR! 
/*	movq	$0x6,-0x18(%rbp)	\ 4079F6 	*/.byte 0x48,0xC7,0x45,0xE8,0x6,0x0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4079FE 	*/.byte 0x48,0x8B,0x5,0x95,0xA9,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 407A05 	*/.byte 0x48,0x8D,0x40,0x1
/*	lea	-0x18(%rbp),%rbp	\ 407A09 	*/.byte 0x48,0x8D,0x6D,0xE8
	call	0x400526  { XOR! } 	\ 407A0D E8 14 8B FF FF 
;/	OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 407A12 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407A16 	*/.byte 0x48,0x8D,0x5,0x3B,0xA8,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 407A1D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 407A21 E8 79 AF FF FF 
;/        2 ALLOT
/*	addq	$0x02,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 407A26 	*/.byte 0x48,0x83,0x5,0x22,0x9C,0xFF,0xFF,0x2
;/        OP0 @ 2+ L!
/*	mov	%rax,-0x08(%rbp)	\ 407A2E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 407A32 	*/.byte 0x48,0x8B,0x5,0x17,0xA8,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 407A39 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x08(%rbp),%edx	\ 407A3D 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 407A40 	*/.byte 0x89,0x10
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 407A42 	*/.byte 0x48,0x8B,0x5,0x7,0xA8,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 407A49 	*/.byte 0xF,0xB7,0x0
;/	OP0 @ W@ 3F48 =
/*	xor	$0x3F48,%rax	\ 407A4C 	*/.byte 0x48,0x35,0x48,0x3F,0x0,0x0
/*	subq	$0x01,%rax	\ 407A52 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 407A56 	*/.byte 0x48,0x19,0xC0
;/	IF	3D48 OP0 @ W!	\ cmp    $0x30,%rax
	test	%rax,%rax	\ 407A59 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 407A5C 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 407A60 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x407AB5  { OPT-RULES+3BAB  } 	\ 407A64 	*/.byte 0xF,0x84,0x4B,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407A6A 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x3D48,-0x10(%rbp)	\ 407A6E 	*/.byte 0x48,0xC7,0x45,0xF0,0x48,0x3D,0x0,0x0
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 407A76 	*/.byte 0x48,0x8B,0x5,0xD3,0xA7,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 407A7D 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 407A80 	*/.byte 0x66,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 407A83 	*/.byte 0x48,0x8B,0x45,0xF8
;/		SetOP B8 C, OP1 @ 2+ L@ L, \ movq    $0x30,%rax
	call	0x40240E  { SetOP } 	\ 407A87 E8 82 A9 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 407A8C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xB8,%eax	\ 407A90 	*/.byte 0xB8,0xB8,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407A95 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 407A99 E8 50 9C FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 407A9E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407AA2 	*/.byte 0x48,0x8B,0x5,0xAF,0xA7,0xFF,0xFF
/*	mov	0x02(%rax),%eax	\ 407AA9 	*/.byte 0x8B,0x40,0x2
/*	lea	-0x08(%rbp),%rbp	\ 407AAC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016AB  { L, } 	\ 407AB0 E8 F6 9B FF FF 
;/	THEN
;/	M\ 4B DTST
/*	mov	%rax,-0x08(%rbp)	\ 407AB5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x4B,%eax	\ 407AB9 	*/.byte 0xB8,0x4B,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407ABE 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407AC2 E8 8A AA FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 407AC7 	*/.byte 0xE9,0x52,0xC4,0xFF,0xFF
;/
;/OP2@ L@  24048B48  XOR		\ movq    (%rsp),%rax
/*	mov	%rax,-0x08(%rbp)	\ 407ACC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407AD0 	*/.byte 0x48,0x8B,0x5,0xDD,0xA8,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407AD7 	*/.byte 0x8B,0x0
/*	xor	$0x24048B48,%rax	\ 407AD9 	*/.byte 0x48,0x35,0x48,0x8B,0x4,0x24
/*	mov	%rax,-0x10(%rbp)	\ 407ADF 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND F88348 XOR OR	\ cmp     $-2,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407AE3 	*/.byte 0x48,0x8B,0x5,0xBD,0xA8,0xFF,0xFF
/*	mov	(%rax),%rax	\ 407AEA 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407AED 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0xB88348,%eax	\ 407AF2 	*/.byte 0x35,0x48,0x83,0xF8,0x0
/*	or	-0x10(%rbp),%rax	\ 407AF7 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407AFB 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407AFF 	*/.byte 0x48,0x8B,0x5,0x94,0xA8,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407B06 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403425  { NEWRAX0+ } 	\ 407B0A E8 16 B9 FF FF 
/*	or	0x00(%rbp),%rax	\ 407B0F 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407B13 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 72 DTST
/*	sbb	%rax,%rax	\ 407B17 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407B1A 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407B1D 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 407B21 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x407B99  { OPT-RULES+3C8F  } 	\ 407B25 	*/.byte 0xF,0x84,0x6E,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407B2B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x72,%eax	\ 407B2F 	*/.byte 0xB8,0x72,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407B34 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407B38 E8 14 AA FF FF 
;/	OP1 1 OPresize
/*	mov	%rax,-0x08(%rbp)	\ 407B3D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407B41 	*/.byte 0x48,0x8D,0x5,0x10,0xA7,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 407B48 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x1,%eax	\ 407B4C 	*/.byte 0xB8,0x1,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 407B51 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 407B55 E8 7B AC FF FF 
;/	243c8348  OP1@ L!  \ cmpq   $-2,(%rsp)
/*	mov	%rax,-0x08(%rbp)	\ 407B5A 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x243C8348,-0x10(%rbp)	\ 407B5E 	*/.byte 0x48,0xC7,0x45,0xF0,0x48,0x83,0x3C,0x24
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407B66 	*/.byte 0x48,0x8B,0x5,0x3A,0xA8,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 407B6D 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 407B70 	*/.byte 0x89,0x10
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 407B72 	*/.byte 0x48,0x8D,0x5,0xE7,0xA6,0xFF,0xFF
;/	OP2 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 407B79 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 407B7D E8 1D AE FF FF 
;/	M\ 71 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407B82 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x71,%eax	\ 407B86 	*/.byte 0xB8,0x71,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407B8B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407B8F E8 BD A9 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 407B94 	*/.byte 0xE9,0x85,0xC3,0xFF,0xFF
;/
;/OP2@ NEWRAX0
/*	mov	%rax,-0x08(%rbp)	\ 407B99 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407B9D 	*/.byte 0x48,0x8B,0x5,0x10,0xA8,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 407BA4 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x403327  { NEWRAX0 } 	\ 407BA8 E8 7A B7 FF FF 
;/OP1@ AX_apply<> OR
/*	mov	%rax,-0x08(%rbp)	\ 407BAD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407BB1 	*/.byte 0x48,0x8B,0x5,0xEF,0xA7,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 407BB8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x403447  { AX_apply<> } 	\ 407BBC E8 86 B8 FF FF 
/*	or	0x00(%rbp),%rax	\ 407BC1 	*/.byte 0x48,0xB,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 407BC5 	*/.byte 0x48,0x89,0x45,0x0
;/OP0@ NEWRAX0+ OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407BC9 	*/.byte 0x48,0x8B,0x5,0xCA,0xA7,0xFF,0xFF
	call	0x403425  { NEWRAX0+ } 	\ 407BD0 E8 50 B8 FF FF 
/*	or	0x00(%rbp),%rax	\ 407BD5 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407BD9 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 72 DTST
/*	sbb	%rax,%rax	\ 407BDD 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407BE0 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407BE3 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 407BE7 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x407C2E  { OPT-RULES+3D24  } 	\ 407BEB 	*/.byte 0xF,0x84,0x3D,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407BF1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x72,%eax	\ 407BF5 	*/.byte 0xB8,0x72,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407BFA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407BFE E8 4E A9 FF FF 
;/	OP2 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 407C03 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 407C07 	*/.byte 0x48,0x8D,0x5,0x52,0xA6,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 407C0E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 407C12 E8 88 AD FF FF 
;/	M\ 71 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407C17 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x71,%eax	\ 407C1B 	*/.byte 0xB8,0x71,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407C20 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407C24 E8 28 A9 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 407C29 	*/.byte 0xE9,0xF0,0xC2,0xFF,0xFF
;/
;/
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 407C2E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407C32 	*/.byte 0x48,0x8B,0x5,0x7B,0xA7,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407C39 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 407C3D 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407C41 	*/.byte 0x48,0x8B,0x5,0x52,0xA7,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407C48 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 407C4C 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407C50 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND 458948 XOR OR \ mov     %rax,X(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407C54 	*/.byte 0x48,0x8B,0x5,0x59,0xA7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407C5B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407C5D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 407C62 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 407C67 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407C6B 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ 24048B48 XOR		\ movq    (%rsp),%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407C6F 	*/.byte 0x48,0x8B,0x5,0x31,0xA7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407C76 	*/.byte 0x8B,0x0
/*	xor	$0x24048B48,%rax	\ 407C78 	*/.byte 0x48,0x35,0x48,0x8B,0x4,0x24
/*	mov	%rax,-0x18(%rbp)	\ 407C7E 	*/.byte 0x48,0x89,0x45,0xE8
;/OP1@ L@ FFFFFF AND 058B48 <> AND OR \       mov X(%rip),%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407C82 	*/.byte 0x48,0x8B,0x5,0x1E,0xA7,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407C89 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407C8B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x58B48,%rax	\ 407C90 	*/.byte 0x48,0x35,0x48,0x8B,0x5,0x0
/*		negq	%rax	\ 407C96 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 407C99 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 407C9C 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 407CA0 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407CA4 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ ADD|OR|AND|XOR<> OR	\ __  X(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407CA8 	*/.byte 0x48,0x8B,0x5,0xEB,0xA6,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407CAF 	*/.byte 0x8B,0x0
/*	lea	-0x10(%rbp),%rbp	\ 407CB1 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402BBD  { ADD|OR|AND|XOR<> } 	\ 407CB5 E8 3 AF FF FF 
/*	or	0x00(%rbp),%rax	\ 407CBA 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407CBE 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 62 DTST
/*	sbb	%rax,%rax	\ 407CC2 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407CC5 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407CC8 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 407CCC 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x407D3A  { OPT-RULES+3E30  } 	\ 407CD0 	*/.byte 0xF,0x84,0x64,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407CD6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x62,%eax	\ 407CDA 	*/.byte 0xB8,0x62,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407CDF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407CE3 E8 69 A8 FF FF 
;/	OP0@ 1+ C@  OP1@ 1+ C!	\  add    (%rsp),%rax
/*	mov	%rax,-0x08(%rbp)	\ 407CE8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407CEC 	*/.byte 0x48,0x8B,0x5,0xA7,0xA6,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 407CF3 	*/.byte 0xF,0xB6,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 407CF7 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407CFB 	*/.byte 0x48,0x8B,0x5,0xA5,0xA6,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 407D02 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 407D06 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 407D09 	*/.byte 0x88,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407D0B 	*/.byte 0x48,0x8D,0x5,0x46,0xA5,0xFF,0xFF
;/	OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 407D12 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 407D16 E8 6C A7 FF FF 
;/	-4 ALLOT	
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 407D1B 	*/.byte 0x48,0x83,0x5,0x2D,0x99,0xFF,0xFF,0xFC
;/	M\ 63 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407D23 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x63,%eax	\ 407D27 	*/.byte 0xB8,0x63,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407D2C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407D30 E8 1C A8 FF FF 
;/	REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 407D35 	*/.byte 0xE9,0xE4,0xC1,0xFF,0xFF
;/
;/
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 407D3A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407D3E 	*/.byte 0x48,0x8B,0x5,0x6F,0xA6,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407D45 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 407D49 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407D4D 	*/.byte 0x48,0x8B,0x5,0x46,0xA6,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407D54 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 407D58 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407D5C 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND 558948 XOR OR \ mov     %rdx,-0x18(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407D60 	*/.byte 0x48,0x8B,0x5,0x4D,0xA6,0xFF,0xFF
/*	mov	(%rax),%rax	\ 407D67 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407D6A 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x158948,%eax	\ 407D6F 	*/.byte 0x35,0x48,0x89,0x55,0x0
/*	or	-0x10(%rbp),%rax	\ 407D74 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407D78 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ DX_apply<> OR
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407D7C 	*/.byte 0x48,0x8B,0x5,0x24,0xA6,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407D83 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4036BF  { DX_apply<> } 	\ 407D87 E8 33 B9 FF FF 
/*	or	0x00(%rbp),%rax	\ 407D8C 	*/.byte 0x48,0xB,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 407D90 	*/.byte 0x48,0x89,0x45,0x0
;/OP0@ @ FFFFFF AND 558b48 XOR OR \ mov     -0x18(%rbp),%rdx
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407D94 	*/.byte 0x48,0x8B,0x5,0xFF,0xA5,0xFF,0xFF
/*	mov	(%rax),%rax	\ 407D9B 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407D9E 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x158B48,%eax	\ 407DA3 	*/.byte 0x35,0x48,0x8B,0x55,0x0
/*	or	0x00(%rbp),%rax	\ 407DA8 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407DAC 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 60 DTST
/*	sbb	%rax,%rax	\ 407DB0 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407DB3 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407DB6 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 407DBA 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x407E09  { OPT-RULES+3EFF  } 	\ 407DBE 	*/.byte 0xF,0x84,0x45,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407DC4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x60,%eax	\ 407DC8 	*/.byte 0xB8,0x60,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407DCD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407DD1 E8 7B A7 FF FF 
;/         OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 407DD6 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407DDA 	*/.byte 0x48,0x8D,0x5,0x77,0xA4,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 407DE1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 407DE5 E8 9D A6 FF FF 
;/        -4 ALLOT	
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 407DEA 	*/.byte 0x48,0x83,0x5,0x5E,0x98,0xFF,0xFF,0xFC
;/	M\ 61 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407DF2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x61,%eax	\ 407DF6 	*/.byte 0xB8,0x61,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407DFB 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407DFF E8 4D A7 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 407E04 	*/.byte 0xE9,0x15,0xC1,0xFF,0xFF
;/
;/OP2@ 3 + C@  OP0@ 2+ C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 407E09 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407E0D 	*/.byte 0x48,0x8B,0x5,0xA0,0xA5,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407E14 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 407E18 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407E1C 	*/.byte 0x48,0x8B,0x5,0x77,0xA5,0xFF,0xFF
/*	movzb	0x02(%rax),%eax	\ 407E23 	*/.byte 0xF,0xB6,0x40,0x2
/*	xor	-0x10(%rbp),%rax	\ 407E27 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407E2B 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND 45C748 XOR OR \ movq    $0x0,-0x10(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407E2F 	*/.byte 0x48,0x8B,0x5,0x7E,0xA5,0xFF,0xFF
/*	mov	(%rax),%rax	\ 407E36 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407E39 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x5C748,%eax	\ 407E3E 	*/.byte 0x35,0x48,0xC7,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 407E43 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407E47 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ DX_apply<> OR
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407E4B 	*/.byte 0x48,0x8B,0x5,0x55,0xA5,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 407E52 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4036BF  { DX_apply<> } 	\ 407E56 E8 64 B8 FF FF 
/*	or	0x00(%rbp),%rax	\ 407E5B 	*/.byte 0x48,0xB,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 407E5F 	*/.byte 0x48,0x89,0x45,0x0
;/OP0@ W@ 558A XOR OR \ mov     -0x10(%rbp),%dl
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407E63 	*/.byte 0x48,0x8B,0x5,0x30,0xA5,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 407E6A 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x558A,%rax	\ 407E6D 	*/.byte 0x48,0x35,0x8A,0x55,0x0,0x0
/*	or	0x00(%rbp),%rax	\ 407E73 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407E77 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 8A DTST
/*	sbb	%rax,%rax	\ 407E7B 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407E7E 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407E81 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 407E85 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x407EF3  { OPT-RULES+3FE9  } 	\ 407E89 	*/.byte 0xF,0x84,0x64,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407E8F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x8A,%eax	\ 407E93 	*/.byte 0xB8,0x8A,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407E98 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407E9C E8 B0 A6 FF FF 
;/	OP2@ 4 + C@ OP0@ 1+ C!
/*	mov	%rax,-0x08(%rbp)	\ 407EA1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407EA5 	*/.byte 0x48,0x8B,0x5,0x8,0xA5,0xFF,0xFF
/*	movzb	0x04(%rax),%eax	\ 407EAC 	*/.byte 0xF,0xB6,0x40,0x4
/*	mov	%rax,-0x10(%rbp)	\ 407EB0 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407EB4 	*/.byte 0x48,0x8B,0x5,0xDF,0xA4,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 407EBB 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 407EBF 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 407EC2 	*/.byte 0x88,0x10
/*	movq	$0xB2,-0x10(%rbp)	\ 407EC4 	*/.byte 0x48,0xC7,0x45,0xF0,0xB2,0x0,0x0,0x0
;/	B2 OP0@ C! \ mov    $0x0,%dl
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407ECC 	*/.byte 0x48,0x8B,0x5,0xC7,0xA4,0xFF,0xFF
/*	mov	-0x10(%rbp),%dl	\ 407ED3 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 407ED6 	*/.byte 0x88,0x10
/*	addq	$-0x01,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 407ED8 	*/.byte 0x48,0x83,0x5,0x70,0x97,0xFF,0xFF,0xFF
;/	-1 ALLOT
/*	mov	$0x8B,%eax	\ 407EE0 	*/.byte 0xB8,0x8B,0x0,0x0,0x0
;/	M\ 8B DTST
/*	lea	-0x08(%rbp),%rbp	\ 407EE5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407EE9 E8 63 A6 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 407EEE 	*/.byte 0xE9,0x2B,0xC0,0xFF,0xFF
;/
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 407EF3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407EF7 	*/.byte 0x48,0x8B,0x5,0xB6,0xA4,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407EFE 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 407F02 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407F06 	*/.byte 0x48,0x8B,0x5,0x8D,0xA4,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407F0D 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 407F11 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407F15 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ 3 + C@  OP1@ 3 + C@ = OR
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407F19 	*/.byte 0x48,0x8B,0x5,0x94,0xA4,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407F20 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x18(%rbp)	\ 407F24 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407F28 	*/.byte 0x48,0x8B,0x5,0x78,0xA4,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 407F2F 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x18(%rbp),%rax	\ 407F33 	*/.byte 0x48,0x33,0x45,0xE8
/*	subq	$0x01,%rax	\ 407F37 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 407F3B 	*/.byte 0x48,0x19,0xC0
/*	or	-0x10(%rbp),%rax	\ 407F3E 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407F42 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND 458948 XOR OR \ mov     %rax,X(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 407F46 	*/.byte 0x48,0x8B,0x5,0x67,0xA4,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407F4D 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407F4F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 407F54 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 407F59 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407F5D 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND 458B48 XOR OR \ movq    0x00(%rbp),%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407F61 	*/.byte 0x48,0x8B,0x5,0x3F,0xA4,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407F68 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 407F6A 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 407F6F 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 407F74 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 407F78 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ ADD|OR|AND|XOR<> OR	\ __  X(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407F7C 	*/.byte 0x48,0x8B,0x5,0x17,0xA4,0xFF,0xFF
/*	mov	(%rax),%eax	\ 407F83 	*/.byte 0x8B,0x0
/*	lea	-0x10(%rbp),%rbp	\ 407F85 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402BBD  { ADD|OR|AND|XOR<> } 	\ 407F89 E8 2F AC FF FF 
/*	or	0x00(%rbp),%rax	\ 407F8E 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 407F92 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL	M\ 86 DTST
/*	sbb	%rax,%rax	\ 407F96 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 407F99 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 407F9C 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 407FA0 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x40800E  { OPT-RULES+4104  } 	\ 407FA4 	*/.byte 0xF,0x84,0x64,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 407FAA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x86,%eax	\ 407FAE 	*/.byte 0xB8,0x86,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 407FB3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 407FB7 E8 95 A5 FF FF 
;/	OP0@ 1+ C@ OP1@ 1+ C!
/*	mov	%rax,-0x08(%rbp)	\ 407FBC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 407FC0 	*/.byte 0x48,0x8B,0x5,0xD3,0xA3,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 407FC7 	*/.byte 0xF,0xB6,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 407FCB 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 407FCF 	*/.byte 0x48,0x8B,0x5,0xD1,0xA3,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 407FD6 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 407FDA 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 407FDD 	*/.byte 0x88,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 407FDF 	*/.byte 0x48,0x8D,0x5,0x72,0xA2,0xFF,0xFF
;/       OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 407FE6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 407FEA E8 98 A4 FF FF 
;/       -4 ALLOT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 407FEF 	*/.byte 0x48,0x83,0x5,0x59,0x96,0xFF,0xFF,0xFC
;/ M\ 87 DTST
/*	mov	%rax,-0x08(%rbp)	\ 407FF7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x87,%eax	\ 407FFB 	*/.byte 0xB8,0x87,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408000 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 408004 E8 48 A5 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 408009 	*/.byte 0xE9,0x10,0xBF,0xFF,0xFF
;/
;/OP2@ 3 + C@  OP0@ 3 + C@ XOR
/*	mov	%rax,-0x08(%rbp)	\ 40800E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 408012 	*/.byte 0x48,0x8B,0x5,0x9B,0xA3,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 408019 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 40801D 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 408021 	*/.byte 0x48,0x8B,0x5,0x72,0xA3,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 408028 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 40802C 	*/.byte 0x48,0x33,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 408030 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ L@ FFFFFF AND 458948 XOR OR \ mov     %rax,X(%rbp)
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 408034 	*/.byte 0x48,0x8B,0x5,0x79,0xA3,0xFF,0xFF
/*	mov	(%rax),%eax	\ 40803B 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40803D 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 408042 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 408047 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40804B 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ FFFFFF AND C0C748 XOR OR \ movq    $0x30,%rax
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40804F 	*/.byte 0x48,0x8B,0x5,0x51,0xA3,0xFF,0xFF
/*	mov	(%rax),%eax	\ 408056 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 408058 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x80C748,%eax	\ 40805D 	*/.byte 0x35,0x48,0xC7,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 408062 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 408066 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ ADD|OR|AND|XOR<> OR	\ __  X(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40806A 	*/.byte 0x48,0x8B,0x5,0x29,0xA3,0xFF,0xFF
/*	mov	(%rax),%eax	\ 408071 	*/.byte 0x8B,0x0
/*	lea	-0x10(%rbp),%rbp	\ 408073 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x402BBD  { ADD|OR|AND|XOR<> } 	\ 408077 E8 41 AB FF FF 
/*	or	0x00(%rbp),%rax	\ 40807C 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 408080 	*/.byte 0x48,0x83,0xE8,0x1
;/  0=
/*	sbb	%rax,%rax	\ 408084 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408087 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 40808A 	*/.byte 0x48,0x8B,0x45,0x8
;/  WHILE  M\ C DTST
/*	lea	0x10(%rbp),%rbp	\ 40808E 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x408177  { OPT-RULES+426D  } 	\ 408092 	*/.byte 0xF,0x84,0xDF,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408098 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xC,%eax	\ 40809C 	*/.byte 0xB8,0xC,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4080A1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4080A5 E8 A7 A4 FF FF 
;/\	C081  OP1@ 1+ W! \  add	$0x30,%rax
;/	81 OP1@ 1+ C!
/*	mov	%rax,-0x08(%rbp)	\ 4080AA 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x81,-0x10(%rbp)	\ 4080AE 	*/.byte 0x48,0xC7,0x45,0xF0,0x81,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4080B6 	*/.byte 0x48,0x8B,0x5,0xEA,0xA2,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 4080BD 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 4080C1 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 4080C4 	*/.byte 0x88,0x10
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4080C6 	*/.byte 0x48,0x8B,0x5,0xCD,0xA2,0xFF,0xFF
;/	OP0@ 1+ C@ 38 AND OP1@ 2+ XOR!
/*	movzb	0x01(%rax),%eax	\ 4080CD 	*/.byte 0xF,0xB6,0x40,0x1
/*	and	$0x38,%eax	\ 4080D1 	*/.byte 0x25,0x38,0x0,0x0,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4080D6 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4080DA 	*/.byte 0x48,0x8B,0x5,0xC6,0xA2,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 4080E1 	*/.byte 0x48,0x8D,0x40,0x2
/*	lea	-0x10(%rbp),%rbp	\ 4080E5 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 4080E9 E8 38 84 FF FF 
;/       OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 4080EE 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4080F2 	*/.byte 0x48,0x8D,0x5,0x5F,0xA1,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4080F9 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 4080FD E8 85 A3 FF FF 
;/       -4 ALLOT
/*	addq	$-0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 408102 	*/.byte 0x48,0x83,0x5,0x46,0x95,0xFF,0xFF,0xFC
;/	OP0 @ 3+ SL@ SHORT?
/*	mov	%rax,-0x08(%rbp)	\ 40810A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 40810E 	*/.byte 0x48,0x8B,0x5,0x3B,0xA1,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 408115 	*/.byte 0x48,0x8D,0x40,0x3
/*	lea	-0x08(%rbp),%rbp	\ 408119 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40048A  { SL@ } 	\ 40811D E8 68 83 FF FF 
	call	0x401FD6  { SHORT? } 	\ 408122 E8 AF 9E FF FF 
;/	IF 83 OP0 @ 1+ C! -3 ALLOT
	test	%rax,%rax	\ 408127 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40812A 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40812E 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408160  { OPT-RULES+4256  } 	\ 408132 	*/.byte 0xF,0x84,0x28,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408138 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x83,-0x10(%rbp)	\ 40813C 	*/.byte 0x48,0xC7,0x45,0xF0,0x83,0x0,0x0,0x0
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 408144 	*/.byte 0x48,0x8B,0x5,0x5,0xA1,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 40814B 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 40814F 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 408152 	*/.byte 0x88,0x10
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 408154 	*/.byte 0x48,0x83,0x5,0xF4,0x94,0xFF,0xFF,0xFD
/*	mov	-0x08(%rbp),%rax	\ 40815C 	*/.byte 0x48,0x8B,0x45,0xF8
;/	THEN
;/ M\ D DTST
/*	mov	%rax,-0x08(%rbp)	\ 408160 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xD,%eax	\ 408164 	*/.byte 0xB8,0xD,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408169 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40816D E8 DF A3 FF FF 
;/   REPEAT
/*	jmp	0x403F1E  { OPT-RULES+14  } 	\ 408172 	*/.byte 0xE9,0xA7,0xBD,0xFF,0xFF
;/
;/;
	ret		\ 408177 C3 
;/
;/:  MOPT-RULES
;/ BEGIN  -EVEN-EAX  OPT-RULES


MOPTsubRULES:
	call	0x403C00  { -EVEN-EAX } 	\ 408178 E8 83 BA FF FF 
	call	0x403F0A  { OPT-RULES } 	\ 40817D E8 88 BD FF FF 
;/ OP0 @ DUP :-SET U< IF DROP BREAK TO OP0@ 
/*	mov	%rax,-0x08(%rbp)	\ 408182 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 408186 	*/.byte 0x48,0x8B,0x5,0xC3,0xA0,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40818D 	*/.byte 0x48,0x89,0x45,0xF0
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 408191 	*/.byte 0x48,0x3B,0x5,0xDD,0xA1,0xFF,0xFF
/*	sbb	%rax,%rax	\ 408198 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40819B 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40819E 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 4081A2 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x4081B5  { MOPT-RULES+3D  } 	\ 4081A6 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 4081AC 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4081B0 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4081B4 C3 
/*	mov	%rax,0x40239A  { OP0@+5  } (%rip)	\ 4081B5 	*/.byte 0x48,0x89,0x5,0xDE,0xA1,0xFF,0xFF
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4081BC 	*/.byte 0x48,0x8B,0x5,0xD7,0xA1,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4081C3 	*/.byte 0x8B,0x0
;/   OP0@ L@  E7FFFF AND 458948 =  \ mov     %RAX|RDX|RBX|RCX,X(%rbp)
/*	and	$fimg+0xA7FFFF,%eax	\ 4081C5 	*/.byte 0x25,0xFF,0xFF,0xE7,0x0
/*	xor	$fimg+0x58948,%rax	\ 4081CA 	*/.byte 0x48,0x35,0x48,0x89,0x45,0x0
/*	subq	$0x01,%rax	\ 4081D0 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4081D4 	*/.byte 0x48,0x19,0xC0
;/   DUP
/*	mov	%rax,-0x08(%rbp)	\ 4081D7 	*/.byte 0x48,0x89,0x45,0xF8
	test	%rax,%rax	\ 4081DB 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4081DE 	*/.byte 0x48,0x8B,0x45,0xF8
;/   IF DROP OFF-EBP >R   OP0@ 3+ C@ C>S CELL+ TO OFF-EBP   FALSE   OP1 -EBPCLR
/*	jz	0x408239  { MOPT-RULES+C1  } 	\ 4081E2 	*/.byte 0xF,0x84,0x51,0x0,0x0,0x0
/*	push	0x402221  { OFF-EBP+5  } (%rip)	\ 4081E8 	*/.byte 0xFF,0x35,0x33,0xA0,0xFF,0xFF
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4081EE 	*/.byte 0x48,0x8B,0x5,0xA5,0xA1,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 4081F5 	*/.byte 0xF,0xB6,0x40,0x3
/*	movsbq	%al,%rax	\ 4081F9 	*/.byte 0x48,0xF,0xBE,0xC0
/*	lea	0x08(%rax),%rax	\ 4081FD 	*/.byte 0x48,0x8D,0x40,0x8
/*	mov	%rax,0x402221  { OFF-EBP+5  } (%rip)	\ 408201 	*/.byte 0x48,0x89,0x5,0x19,0xA0,0xFF,0xFF
/*	movq	$0x0,-0x08(%rbp)	\ 408208 	*/.byte 0x48,0xC7,0x45,0xF8,0x0,0x0,0x0,0x0
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 408210 	*/.byte 0x48,0x8D,0x5,0x41,0xA0,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 408217 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4037C0  { -EBPCLR } 	\ 40821B E8 A0 B5 FF FF 
;/              R> TO OFF-EBP 
/*	mov	%rax,-0x08(%rbp)	\ 408220 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 408224 8F 45 F0 
/*	lea	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 408227 	*/.byte 0x48,0x8D,0x5,0xF3,0x9F,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 40822E 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 408232 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 408235 	*/.byte 0x48,0x8B,0x45,0xF8
;/   THEN
;/	WHILE   M\ 207 DTST
	test	%rax,%rax	\ 408239 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40823C 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408240 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408261  { MOPT-RULES+E9  } 	\ 408244 	*/.byte 0xF,0x84,0x17,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40824A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x207,%eax	\ 40824E 	*/.byte 0xB8,0x7,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408253 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 408257 E8 F5 A2 FF FF 
;/	REPEAT 
/*	jmp	0x408178  { MOPT-RULES } 	\ 40825C 	*/.byte 0xE9,0x17,0xFF,0xFF,0xFF
;/;
	ret		\ 408261 C3 
;/
;/: EXIT-RULES  ( ADDR  -- ADDR'  )
;/\  можно удалять записи во временные ячейки
;/        -2 DTST


EXITsubRULES:
/*	mov	%rax,-0x08(%rbp)	\ 408262 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x2,%rax	\ 408266 	*/.byte 0x48,0xC7,0xC0,0xFE,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40826D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 408271 E8 DB A2 FF FF 
;/	BEGIN
;/	OP0 @ :-SET U< IF  BREAK
/*	mov	%rax,-0x08(%rbp)	\ 408276 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 40827A 	*/.byte 0x48,0x8B,0x5,0xCF,0x9F,0xFF,0xFF
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 408281 	*/.byte 0x48,0x3B,0x5,0xED,0xA0,0xFF,0xFF
/*	sbb	%rax,%rax	\ 408288 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40828B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40828E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x408299  { EXIT-RULES+37  } 	\ 408292 	*/.byte 0xF,0x84,0x1,0x0,0x0,0x0
	ret		\ 408298 C3 
;/
;/OP0@ L@ 2448d48 XOR	\	lea     1(%rdx,%rax),%rax
/*	mov	%rax,-0x08(%rbp)	\ 408299 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40829D 	*/.byte 0x48,0x8B,0x5,0xF6,0xA0,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4082A4 	*/.byte 0x8B,0x0
/*	xor	$0x2448D48,%rax	\ 4082A6 	*/.byte 0x48,0x35,0x48,0x8D,0x44,0x2
/*	mov	%rax,-0x10(%rbp)	\ 4082AC 	*/.byte 0x48,0x89,0x45,0xF0
;/OFF-EAX 0=
/*	mov	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 4082B0 	*/.byte 0x48,0x8B,0x5,0x77,0x9F,0xFF,0xFF
/*	subq	$0x01,%rax	\ 4082B7 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4082BB 	*/.byte 0x48,0x19,0xC0
/*	or	-0x10(%rbp),%rax	\ 4082BE 	*/.byte 0x48,0xB,0x45,0xF0
;/OR 0=	M_WL  M\ 20C DTST
/*	subq	$0x01,%rax	\ 4082C2 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4082C6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4082C9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4082CC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4083CA  { EXIT-RULES+168  } 	\ 4082D0 	*/.byte 0xF,0x84,0xF4,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4082D6 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20C,%eax	\ 4082DA 	*/.byte 0xB8,0xC,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4082DF 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4082E3 E8 69 A2 FF FF 
;/	OP0@ 4 + C@ C>S OFF-EAX +
/*	mov	%rax,-0x08(%rbp)	\ 4082E8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4082EC 	*/.byte 0x48,0x8B,0x5,0xA7,0xA0,0xFF,0xFF
/*	movzb	0x04(%rax),%eax	\ 4082F3 	*/.byte 0xF,0xB6,0x40,0x4
/*	movsbq	%al,%rax	\ 4082F7 	*/.byte 0x48,0xF,0xBE,0xC0
/*	add	0x40222E  { OFF-EAX+5  } (%rip),%rax	\ 4082FB 	*/.byte 0x48,0x3,0x5,0x2C,0x9F,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 408302 	*/.byte 0x48,0x89,0x45,0xF0
;/	DUP SHORT?
/*	lea	-0x10(%rbp),%rbp	\ 408306 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x401FD6  { SHORT? } 	\ 40830A E8 C7 9C FF FF 
;/	IF	OP0@ 4 + C!
	test	%rax,%rax	\ 40830F 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408312 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408316 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408341  { EXIT-RULES+DF  } 	\ 40831A 	*/.byte 0xF,0x84,0x21,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408320 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 408324 	*/.byte 0x48,0x8B,0x5,0x6F,0xA0,0xFF,0xFF
/*	lea	0x04(%rax),%rax	\ 40832B 	*/.byte 0x48,0x8D,0x40,0x4
/*	mov	-0x08(%rbp),%dl	\ 40832F 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 408332 	*/.byte 0x88,0x10
/*	mov	0x00(%rbp),%rax	\ 408334 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408338 	*/.byte 0x48,0x8D,0x6D,0x8
;/	ELSE DUP LONG? 0= IF DROP BREAK
/*	jmp	0x4083A3  { EXIT-RULES+141  } 	\ 40833C 	*/.byte 0xE9,0x62,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408341 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 408345 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401FE7  { LONG? } 	\ 408349 E8 99 9C FF FF 
/*	subq	$0x01,%rax	\ 40834E 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 408352 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408355 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408358 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40835C 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40836F  { EXIT-RULES+10D  } 	\ 408360 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 408366 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40836A 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40836E C3 
;/	  84 OP0@ 2+ C! OP0@ 4 + L!
/*	mov	%rax,-0x08(%rbp)	\ 40836F 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x84,-0x10(%rbp)	\ 408373 	*/.byte 0x48,0xC7,0x45,0xF0,0x84,0x0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40837B 	*/.byte 0x48,0x8B,0x5,0x18,0xA0,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 408382 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%dl	\ 408386 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 408389 	*/.byte 0x88,0x10
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40838B 	*/.byte 0x48,0x8B,0x5,0x8,0xA0,0xFF,0xFF
/*	lea	0x04(%rax),%rax	\ 408392 	*/.byte 0x48,0x8D,0x40,0x4
/*	mov	-0x08(%rbp),%edx	\ 408396 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 408399 	*/.byte 0x89,0x10
/*	mov	0x00(%rbp),%rax	\ 40839B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40839F 	*/.byte 0x48,0x8D,0x6D,0x8
;/	THEN  0 TO OFF-EAX 
/*	movq	$0x0,0x40222E  { OFF-EAX+5  } (%rip)	\ 4083A3 	*/.byte 0x48,0xC7,0x5,0x80,0x9E,0xFF,0xFF,0x0,0x0,0x0,0x0
;/        M\ 20D DTST
/*	mov	%rax,-0x08(%rbp)	\ 4083AE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20D,%eax	\ 4083B2 	*/.byte 0xB8,0xD,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4083B7 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4083BB E8 91 A1 FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 4083C0 E8 B3 FD FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 4083C5 	*/.byte 0xE9,0xAC,0xFE,0xFF,0xFF
;/
;/	OP1 @ :-SET U< IF  BREAK
/*	mov	%rax,-0x08(%rbp)	\ 4083CA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4083CE 	*/.byte 0x48,0x8B,0x5,0x83,0x9E,0xFF,0xFF
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 4083D5 	*/.byte 0x48,0x3B,0x5,0x99,0x9F,0xFF,0xFF
/*	sbb	%rax,%rax	\ 4083DC 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4083DF 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4083E2 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4083ED  { EXIT-RULES+18B  } 	\ 4083E6 	*/.byte 0xF,0x84,0x1,0x0,0x0,0x0
	ret		\ 4083EC C3 
;/
;/OP1@ C@	B1 XOR		\ mov     $0x03,%cl
/*	mov	%rax,-0x08(%rbp)	\ 4083ED 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4083F1 	*/.byte 0x48,0x8B,0x5,0xAF,0x9F,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 4083F8 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x4F,%al	\ 4083FB 	*/.byte 0x34,0xB1
/*	mov	%rax,-0x10(%rbp)	\ 4083FD 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ C0FFFF AND C0D348 XOR OR \ rol..sar     %cl,%r_x
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 408401 	*/.byte 0x48,0x8B,0x5,0x92,0x9F,0xFF,0xFF
/*	mov	(%rax),%eax	\ 408408 	*/.byte 0x8B,0x0
/*	and	$fimg+0x80FFFF,%eax	\ 40840A 	*/.byte 0x25,0xFF,0xFF,0xC0,0x0
/*	xor	$fimg+0x80D348,%eax	\ 40840F 	*/.byte 0x35,0x48,0xD3,0xC0,0x0
/*	or	-0x10(%rbp),%rax	\ 408414 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 408418 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL  M\ 204 DTST
/*	sbb	%rax,%rax	\ 40841C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40841F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 408422 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x40849E  { EXIT-RULES+23C  } 	\ 408426 	*/.byte 0xF,0x84,0x72,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40842C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x204,%eax	\ 408430 	*/.byte 0xB8,0x4,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408435 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 408439 E8 13 A1 FF FF 
;/	  C1 OP0@ 1+ C! OP1@ 1+ C@ C, \ rol..sar    $0x3,%rax
/*	mov	%rax,-0x08(%rbp)	\ 40843E 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xC1,-0x10(%rbp)	\ 408442 	*/.byte 0x48,0xC7,0x45,0xF0,0xC1,0x0,0x0,0x0
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 40844A 	*/.byte 0x48,0x8B,0x5,0x49,0x9F,0xFF,0xFF
/*	lea	0x01(%rax),%rax	\ 408451 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x10(%rbp),%dl	\ 408455 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 408458 	*/.byte 0x88,0x10
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40845A 	*/.byte 0x48,0x8B,0x5,0x46,0x9F,0xFF,0xFF
/*	movzb	0x01(%rax),%eax	\ 408461 	*/.byte 0xF,0xB6,0x40,0x1
/*	lea	-0x08(%rbp),%rbp	\ 408465 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 408469 E8 80 92 FF FF 
;/	  OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 40846E 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 408472 	*/.byte 0x48,0x8D,0x5,0xDF,0x9D,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 408479 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40847D E8 1D A5 FF FF 
;/	  M\ 205 DTST
/*	mov	%rax,-0x08(%rbp)	\ 408482 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x205,%eax	\ 408486 	*/.byte 0xB8,0x5,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40848B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40848F E8 BD A0 FF FF 
;/	  MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 408494 E8 DF FC FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 408499 	*/.byte 0xE9,0xD8,0xFD,0xFF,0xFF
;/
;/
;/OP1@ L@ FFFFFF AND
/*	mov	%rax,-0x08(%rbp)	\ 40849E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4084A2 	*/.byte 0x48,0x8B,0x5,0xFE,0x9E,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4084A9 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4084AB 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4084B0 	*/.byte 0x48,0x89,0x45,0xF0
;/DUP c28948 XOR			\ mov     %rax,%rdx
/*	xor	$fimg+0x828948,%rax	\ 4084B4 	*/.byte 0x48,0x35,0x48,0x89,0xC2,0x0
/*	mov	-0x10(%rbp),%rdx	\ 4084BA 	*/.byte 0x48,0x8B,0x55,0xF0
;/SWAP FFFF AND 9248 <> AND	\ xchg    %rdx,%rax       # 80404e
/*	mov	%rax,-0x10(%rbp)	\ 4084BE 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	%rdx,-0x18(%rbp)	\ 4084C2 	*/.byte 0x48,0x89,0x55,0xE8
/*	mov	$0xFFFF,%eax	\ 4084C6 	*/.byte 0xB8,0xFF,0xFF,0x0,0x0
/*	and	-0x18(%rbp),%rax	\ 4084CB 	*/.byte 0x48,0x23,0x45,0xE8
/*	xor	$0x9248,%rax	\ 4084CF 	*/.byte 0x48,0x35,0x48,0x92,0x0,0x0
/*		negq	%rax	\ 4084D5 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 4084D8 	*/.byte 0x48,0x19,0xC0
/*	and	-0x10(%rbp),%rax	\ 4084DB 	*/.byte 0x48,0x23,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4084DF 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ L@ FFFFFF AND 458b48 XOR	\ mov     -0x10(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4084E3 	*/.byte 0x48,0x8B,0x5,0xB0,0x9E,0xFF,0xFF
/*	mov	(%rax),%eax	\ 4084EA 	*/.byte 0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4084EC 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 4084F1 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 4084F6 	*/.byte 0x48,0xB,0x45,0xF0
;/ OR 0=	M_WL  M\ 202 DTST
/*	subq	$0x01,%rax	\ 4084FA 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4084FE 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408501 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 408504 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x408550  { EXIT-RULES+2EE  } 	\ 408508 	*/.byte 0xF,0x84,0x42,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40850E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x202,%eax	\ 408512 	*/.byte 0xB8,0x2,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408517 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40851B E8 31 A0 FF FF 
;/           OP1 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 408520 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 408524 	*/.byte 0x48,0x8D,0x5,0x2D,0x9D,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40852B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40852F E8 6B A4 FF FF 
;/        M\ 203 DTST
/*	mov	%rax,-0x08(%rbp)	\ 408534 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x203,%eax	\ 408538 	*/.byte 0xB8,0x3,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40853D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 408541 E8 B A0 FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 408546 E8 2D FC FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 40854B 	*/.byte 0xE9,0x26,0xFD,0xFF,0xFF
;/	
;/OFF-EBP >R
/*	mov	%rax,-0x08(%rbp)	\ 408550 	*/.byte 0x48,0x89,0x45,0xF8
/*	push	0x402221  { OFF-EBP+5  } (%rip)	\ 408554 	*/.byte 0xFF,0x35,0xC7,0x9C,0xFF,0xFF
;/FALSE   OP0 -EBPCLR  OP0 -EBPCLR  OP0 -EBPCLR  OP0 -EBPCLR
/*	movq	$0x0,-0x10(%rbp)	\ 40855A 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x0,0x0,0x0
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 408562 	*/.byte 0x48,0x8D,0x5,0xE7,0x9C,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 408569 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4037C0  { -EBPCLR } 	\ 40856D E8 4E B2 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 408572 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 408576 	*/.byte 0x48,0x8D,0x5,0xD3,0x9C,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40857D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4037C0  { -EBPCLR } 	\ 408581 E8 3A B2 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 408586 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 40858A 	*/.byte 0x48,0x8D,0x5,0xBF,0x9C,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 408591 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4037C0  { -EBPCLR } 	\ 408595 E8 26 B2 FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40859A 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402250  { LAST-HERE+D  } (%rip),%rax	\ 40859E 	*/.byte 0x48,0x8D,0x5,0xAB,0x9C,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4085A5 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4037C0  { -EBPCLR } 	\ 4085A9 E8 12 B2 FF FF 
;/R> TO OFF-EBP
/*	mov	%rax,-0x08(%rbp)	\ 4085AE 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 4085B2 8F 45 F0 
/*	lea	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 4085B5 	*/.byte 0x48,0x8D,0x5,0x65,0x9C,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 4085BC 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 4085C0 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 4085C3 	*/.byte 0x48,0x8B,0x45,0xF8
;/	M_WL   M\ 201 DTST
	test	%rax,%rax	\ 4085C7 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 4085CA 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4085CE 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x4085F4  { EXIT-RULES+392  } 	\ 4085D2 	*/.byte 0xF,0x84,0x1C,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4085D8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x201,%eax	\ 4085DC 	*/.byte 0xB8,0x1,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4085E1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4085E5 E8 67 9F FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 4085EA E8 89 FB FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 4085EF 	*/.byte 0xE9,0x82,0xFC,0xFF,0xFF
;/
;/ OP2 @ :-SET U< IF  BREAK
/*	mov	%rax,-0x08(%rbp)	\ 4085F4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 4085F8 	*/.byte 0x48,0x8B,0x5,0x61,0x9C,0xFF,0xFF
/*	cmp	0x402375  { :-SET+5  } (%rip),%rax	\ 4085FF 	*/.byte 0x48,0x3B,0x5,0x6F,0x9D,0xFF,0xFF
/*	sbb	%rax,%rax	\ 408606 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408609 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 40860C 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x408617  { EXIT-RULES+3B5  } 	\ 408610 	*/.byte 0xF,0x84,0x1,0x0,0x0,0x0
	ret		\ 408616 C3 
;/
;/OP2@ L@ 1508d48 XOR \        lea     0x01(%rax),%rdx #
/*	mov	%rax,-0x08(%rbp)	\ 408617 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40861B 	*/.byte 0x48,0x8B,0x5,0x92,0x9D,0xFF,0xFF
/*	mov	(%rax),%eax	\ 408622 	*/.byte 0x8B,0x0
/*	xor	$0x1508D48,%rax	\ 408624 	*/.byte 0x48,0x35,0x48,0x8D,0x50,0x1
/*	mov	%rax,-0x10(%rbp)	\ 40862A 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ L@ b60f48 XOR OR \ /*      movzbq  (%rax),%rax     #
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40862E 	*/.byte 0x48,0x8B,0x5,0x72,0x9D,0xFF,0xFF
/*	mov	(%rax),%eax	\ 408635 	*/.byte 0x8B,0x0
/*	xor	$fimg+0x760F48,%rax	\ 408637 	*/.byte 0x48,0x35,0x48,0xF,0xB6,0x0
/*	or	-0x10(%rbp),%rax	\ 40863D 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 408641 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND d00148 XOR OR \ /*    add     %rdx,%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 408645 	*/.byte 0x48,0x8B,0x5,0x4E,0x9D,0xFF,0xFF
/*	mov	(%rax),%rax	\ 40864C 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40864F 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x900148,%eax	\ 408654 	*/.byte 0x35,0x48,0x1,0xD0,0x0
/*	or	-0x10(%rbp),%rax	\ 408659 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 40865D 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL  M\ 20A DTST
/*	sbb	%rax,%rax	\ 408661 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408664 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 408667 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4086E5  { EXIT-RULES+483  } 	\ 40866B 	*/.byte 0xF,0x84,0x74,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408671 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20A,%eax	\ 408675 	*/.byte 0xB8,0xA,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40867A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40867E E8 CE 9E FF FF 
;/	10 OP1@ 3+ C!	\ movzbq (%rax),%rdx
/*	mov	%rax,-0x08(%rbp)	\ 408683 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x10,-0x10(%rbp)	\ 408687 	*/.byte 0x48,0xC7,0x45,0xF0,0x10,0x0,0x0,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40868F 	*/.byte 0x48,0x8B,0x5,0x11,0x9D,0xFF,0xFF
/*	lea	0x03(%rax),%rax	\ 408696 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x10(%rbp),%dl	\ 40869A 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 40869D 	*/.byte 0x88,0x10
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 40869F 	*/.byte 0x48,0x8D,0x5,0xBA,0x9B,0xFF,0xFF
;/           OP2 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 4086A6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 4086AA E8 F0 A2 FF FF 
;/	-2 ALLOT
/*	addq	$-0x02,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4086AF 	*/.byte 0x48,0x83,0x5,0x99,0x8F,0xFF,0xFF,0xFE
;/	0102448d L,	\ lea    0x1(%rdx,%rax),%rax
/*	mov	%rax,-0x08(%rbp)	\ 4086B7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$fimg+0xC2448D,%eax	\ 4086BB 	*/.byte 0xB8,0x8D,0x44,0x2,0x1
/*	lea	-0x08(%rbp),%rbp	\ 4086C0 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016AB  { L, } 	\ 4086C4 E8 E2 8F FF FF 
;/        M\ 20B DTST
/*	mov	%rax,-0x08(%rbp)	\ 4086C9 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20B,%eax	\ 4086CD 	*/.byte 0xB8,0xB,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4086D2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4086D6 E8 76 9E FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 4086DB E8 98 FA FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 4086E0 	*/.byte 0xE9,0x91,0xFB,0xFF,0xFF
;/
;/OP2@ @ FFFFFF AND c28948 XOR    \ /*    mov     %rax,%rdx
/*	mov	%rax,-0x08(%rbp)	\ 4086E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4086E9 	*/.byte 0x48,0x8B,0x5,0xC4,0x9C,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4086F0 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4086F3 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x828948,%eax	\ 4086F8 	*/.byte 0x35,0x48,0x89,0xC2,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4086FD 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 408701 	*/.byte 0x48,0x8B,0x5,0x9F,0x9C,0xFF,0xFF
/*	mov	(%rax),%rax	\ 408708 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40870B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	mov	%rax,-0x18(%rbp)	\ 408710 	*/.byte 0x48,0x89,0x45,0xE8
;/DUP  168949 XOR  \ /*    mov     %rdx,(%r14)
/*	xor	$0x168949,%rax	\ 408714 	*/.byte 0x48,0x35,0x49,0x89,0x16,0x0
/*	mov	-0x18(%rbp),%rdx	\ 40871A 	*/.byte 0x48,0x8B,0x55,0xE8
;/SWAP 160149 <> AND OR \ /*    add     %rdx,(%r14)
/*	mov	%rax,-0x18(%rbp)	\ 40871E 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,-0x20(%rbp)	\ 408722 	*/.byte 0x48,0x89,0x55,0xE0
/*	mov	$0x160149,%eax	\ 408726 	*/.byte 0xB8,0x49,0x1,0x16,0x0
/*	xor	-0x20(%rbp),%rax	\ 40872B 	*/.byte 0x48,0x33,0x45,0xE0
/*		negq	%rax	\ 40872F 	*/.byte 0x48,0xF7,0xD8
/*	sbb	%rax,%rax	\ 408732 	*/.byte 0x48,0x19,0xC0
/*	and	-0x18(%rbp),%rax	\ 408735 	*/.byte 0x48,0x23,0x45,0xE8
/*	or	-0x10(%rbp),%rax	\ 408739 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 40873D 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND 458b48 XOR OR \ /*    mov     -0x08(%rbp),%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 408741 	*/.byte 0x48,0x8B,0x5,0x52,0x9C,0xFF,0xFF
/*	mov	(%rax),%rax	\ 408748 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40874B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58B48,%eax	\ 408750 	*/.byte 0x35,0x48,0x8B,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 408755 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 408759 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL  M\ 20E DTST
/*	sbb	%rax,%rax	\ 40875D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408760 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 408763 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4087CB  { EXIT-RULES+569  } 	\ 408767 	*/.byte 0xF,0x84,0x5E,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40876D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20E,%eax	\ 408771 	*/.byte 0xB8,0xE,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408776 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40877A E8 D2 9D FF FF 
;/        100000 OP1@ XOR!
/*	mov	%rax,-0x08(%rbp)	\ 40877F 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x100000,-0x10(%rbp)	\ 408783 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x0,0x10,0x0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40878B 	*/.byte 0x48,0x8B,0x5,0x15,0x9C,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 408792 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400526  { XOR! } 	\ 408796 E8 8B 7D FF FF 
;/	OP2 OPexcise
/*	mov	%rax,-0x08(%rbp)	\ 40879B 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 40879F 	*/.byte 0x48,0x8D,0x5,0xBA,0x9A,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 4087A6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 4087AA E8 F0 A1 FF FF 
;/        M\ 20F DTST
/*	mov	%rax,-0x08(%rbp)	\ 4087AF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20F,%eax	\ 4087B3 	*/.byte 0xB8,0xF,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4087B8 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4087BC E8 90 9D FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 4087C1 E8 B2 F9 FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 4087C6 	*/.byte 0xE9,0xAB,0xFA,0xFF,0xFF
;/
;/OP2@ @ FFFFFF AND C28948 XOR \ mov     %rax,%rdx
/*	mov	%rax,-0x08(%rbp)	\ 4087CB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 4087CF 	*/.byte 0x48,0x8B,0x5,0xDE,0x9B,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4087D6 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4087D9 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x828948,%eax	\ 4087DE 	*/.byte 0x35,0x48,0x89,0xC2,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4087E3 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ ?ChRAX<> OR
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4087E7 	*/.byte 0x48,0x8B,0x5,0xB9,0x9B,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 4087EE 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x403500  { ?ChRAX<> } 	\ 4087F2 E8 9 AD FF FF 
/*	or	0x00(%rbp),%rax	\ 4087F7 	*/.byte 0x48,0xB,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 4087FB 	*/.byte 0x48,0x89,0x45,0x0
;/OP0@ @ FFFFFF AND d08948 XOR OR \ mov     %rdx,%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4087FF 	*/.byte 0x48,0x8B,0x5,0x94,0x9B,0xFF,0xFF
/*	mov	(%rax),%rax	\ 408806 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 408809 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 40880E 	*/.byte 0x35,0x48,0x89,0xD0,0x0
/*	or	0x00(%rbp),%rax	\ 408813 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 408817 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL  M\ 210 DTST
/*	sbb	%rax,%rax	\ 40881B 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 40881E 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 408821 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 408825 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x40888D  { EXIT-RULES+62B  } 	\ 408829 	*/.byte 0xF,0x84,0x5E,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40882F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x210,%eax	\ 408833 	*/.byte 0xB8,0x10,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408838 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40883C E8 10 9D FF FF 
;/	OP1 ToOP0
/*	mov	%rax,-0x08(%rbp)	\ 408841 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 408845 	*/.byte 0x48,0x8D,0x5,0xC,0x9A,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40884C 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 408850 E8 32 9C FF FF 
;/	-3 ALLOT	
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 408855 	*/.byte 0x48,0x83,0x5,0xF3,0x8D,0xFF,0xFF,0xFD
;/	OP1 OPexcise	
/*	mov	%rax,-0x08(%rbp)	\ 40885D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 408861 	*/.byte 0x48,0x8D,0x5,0xF0,0x99,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 408868 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40886C E8 2E A1 FF FF 
;/        M\ 211 DTST
/*	mov	%rax,-0x08(%rbp)	\ 408871 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x211,%eax	\ 408875 	*/.byte 0xB8,0x11,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40887A 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40887E E8 CE 9C FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 408883 E8 F0 F8 FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 408888 	*/.byte 0xE9,0xE9,0xF9,0xFF,0xFF
;/
;/OP2@ @ FFFFFF AND C2C748 XOR \ movq    $X,%rdx
/*	mov	%rax,-0x08(%rbp)	\ 40888D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 408891 	*/.byte 0x48,0x8B,0x5,0x1C,0x9B,0xFF,0xFF
/*	mov	(%rax),%rax	\ 408898 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 40889B 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x82C748,%eax	\ 4088A0 	*/.byte 0x35,0x48,0xC7,0xC2,0x0
/*	mov	%rax,-0x10(%rbp)	\ 4088A5 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND 108948 XOR OR \ mov     %rdx,(%rax)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 4088A9 	*/.byte 0x48,0x8B,0x5,0xF7,0x9A,0xFF,0xFF
/*	mov	(%rax),%rax	\ 4088B0 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 4088B3 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$0x108948,%eax	\ 4088B8 	*/.byte 0x35,0x48,0x89,0x10,0x0
/*	or	-0x10(%rbp),%rax	\ 4088BD 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4088C1 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ DX_apply<> OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 4088C5 	*/.byte 0x48,0x8B,0x5,0xCE,0x9A,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 4088CC 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4036BF  { DX_apply<> } 	\ 4088D0 E8 EA AD FF FF 
/*	or	0x00(%rbp),%rax	\ 4088D5 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 4088D9 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL  M\ 212 DTST
/*	sbb	%rax,%rax	\ 4088DD 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4088E0 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 4088E3 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 4088E7 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x40894B  { EXIT-RULES+6E9  } 	\ 4088EB 	*/.byte 0xF,0x84,0x5A,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4088F1 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x212,%eax	\ 4088F5 	*/.byte 0xB8,0x12,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4088FA 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4088FE E8 4E 9C FF FF 
;/	0 OP2@ 2+ C! \ movq   $X,(%rax)
/*	mov	%rax,-0x08(%rbp)	\ 408903 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0x0,-0x10(%rbp)	\ 408907 	*/.byte 0x48,0xC7,0x45,0xF0,0x0,0x0,0x0,0x0
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40890F 	*/.byte 0x48,0x8B,0x5,0x9E,0x9A,0xFF,0xFF
/*	lea	0x02(%rax),%rax	\ 408916 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x10(%rbp),%dl	\ 40891A 	*/.byte 0x8A,0x55,0xF0
/*	mov	%dl,(%rax)	\ 40891D 	*/.byte 0x88,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 40891F 	*/.byte 0x48,0x8D,0x5,0x32,0x99,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 408926 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 40892A E8 70 A0 FF FF 
;/        M\ 213 DTST
/*	mov	%rax,-0x08(%rbp)	\ 40892F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x213,%eax	\ 408933 	*/.byte 0xB8,0x13,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408938 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 40893C E8 10 9C FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 408941 E8 32 F8 FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 408946 	*/.byte 0xE9,0x2B,0xF9,0xFF,0xFF
;/
;/OP2@ C@ B2 XOR \ mov     $X,%dl
/*	mov	%rax,-0x08(%rbp)	\ 40894B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 40894F 	*/.byte 0x48,0x8B,0x5,0x5E,0x9A,0xFF,0xFF
/*	movzb	(%rax),%eax	\ 408956 	*/.byte 0xF,0xB6,0x0
/*	xor	$-0x4E,%al	\ 408959 	*/.byte 0x34,0xB2
/*	mov	%rax,-0x10(%rbp)	\ 40895B 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ W@ 1088 XOR OR \ mov     %dl,(%rax)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 40895F 	*/.byte 0x48,0x8B,0x5,0x41,0x9A,0xFF,0xFF
/*	movzw	(%rax),%eax	\ 408966 	*/.byte 0xF,0xB7,0x0
/*	xor	$0x1088,%rax	\ 408969 	*/.byte 0x48,0x35,0x88,0x10,0x0,0x0
/*	or	-0x10(%rbp),%rax	\ 40896F 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 408973 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ DX_apply<> OR
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 408977 	*/.byte 0x48,0x8B,0x5,0x1C,0x9A,0xFF,0xFF
/*	lea	-0x10(%rbp),%rbp	\ 40897E 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4036BF  { DX_apply<> } 	\ 408982 E8 38 AD FF FF 
/*	or	0x00(%rbp),%rax	\ 408987 	*/.byte 0x48,0xB,0x45,0x0
/*	subq	$0x01,%rax	\ 40898B 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	M_WL  M\ 214 DTST
/*	sbb	%rax,%rax	\ 40898F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408992 48 85 C0 
/*	mov	0x08(%rbp),%rax	\ 408995 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 408999 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jz	0x408A17  { EXIT-RULES+7B5  } 	\ 40899D 	*/.byte 0xF,0x84,0x74,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4089A3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x214,%eax	\ 4089A7 	*/.byte 0xB8,0x14,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4089AC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 4089B0 E8 9C 9B FF FF 
;/	OP2 1 OPresize
/*	mov	%rax,-0x08(%rbp)	\ 4089B5 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 4089B9 	*/.byte 0x48,0x8D,0x5,0xA0,0x98,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 4089C0 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0x1,%eax	\ 4089C4 	*/.byte 0xB8,0x1,0x0,0x0,0x0
/*	lea	-0x10(%rbp),%rbp	\ 4089C9 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4027D5  { OPresize } 	\ 4089CD E8 3 9E FF FF 
;/	00C6 OP2 @ W! \ movb   $X,(%rax)
/*	mov	%rax,-0x08(%rbp)	\ 4089D2 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$0xC6,-0x10(%rbp)	\ 4089D6 	*/.byte 0x48,0xC7,0x45,0xF0,0xC6,0x0,0x0,0x0
/*	mov	0x402260  { LAST-HERE+1D  } (%rip),%rax	\ 4089DE 	*/.byte 0x48,0x8B,0x5,0x7B,0x98,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 4089E5 	*/.byte 0x8B,0x55,0xF0
/*	mov	%dx,(%rax)	\ 4089E8 	*/.byte 0x66,0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 4089EB 	*/.byte 0x48,0x8D,0x5,0x66,0x98,0xFF,0xFF
;/	OP1 OPexcise
/*	lea	-0x08(%rbp),%rbp	\ 4089F2 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40299F  { OPexcise } 	\ 4089F6 E8 A4 9F FF FF 
;/        M\ 215 DTST
/*	mov	%rax,-0x08(%rbp)	\ 4089FB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x215,%eax	\ 4089FF 	*/.byte 0xB8,0x15,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408A04 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 408A08 E8 44 9B FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 408A0D E8 66 F7 FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 408A12 	*/.byte 0xE9,0x5F,0xF8,0xFF,0xFF
;/
;/OP2@ 3 + C@ OP1@ 3 + C@ =
/*	mov	%rax,-0x08(%rbp)	\ 408A17 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 408A1B 	*/.byte 0x48,0x8B,0x5,0x92,0x99,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 408A22 	*/.byte 0xF,0xB6,0x40,0x3
/*	mov	%rax,-0x10(%rbp)	\ 408A26 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 408A2A 	*/.byte 0x48,0x8B,0x5,0x76,0x99,0xFF,0xFF
/*	movzb	0x03(%rax),%eax	\ 408A31 	*/.byte 0xF,0xB6,0x40,0x3
/*	xor	-0x10(%rbp),%rax	\ 408A35 	*/.byte 0x48,0x33,0x45,0xF0
/*	subq	$0x01,%rax	\ 408A39 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 408A3D 	*/.byte 0x48,0x19,0xC0
/*	mov	%rax,-0x10(%rbp)	\ 408A40 	*/.byte 0x48,0x89,0x45,0xF0
;/OP2@ @ FFFFFF AND 558b48 XOR OR \ mov     0x08(%rbp),%rdx
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 408A44 	*/.byte 0x48,0x8B,0x5,0x69,0x99,0xFF,0xFF
/*	mov	(%rax),%rax	\ 408A4B 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 408A4E 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x158B48,%eax	\ 408A53 	*/.byte 0x35,0x48,0x8B,0x55,0x0
/*	or	-0x10(%rbp),%rax	\ 408A58 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 408A5C 	*/.byte 0x48,0x89,0x45,0xF0
;/OP1@ @ FFFFFF AND 458948 XOR OR \ mov     %rax,-0x08(%rbp)
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 408A60 	*/.byte 0x48,0x8B,0x5,0x40,0x99,0xFF,0xFF
/*	mov	(%rax),%rax	\ 408A67 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 408A6A 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x58948,%eax	\ 408A6F 	*/.byte 0x35,0x48,0x89,0x45,0x0
/*	or	-0x10(%rbp),%rax	\ 408A74 	*/.byte 0x48,0xB,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 408A78 	*/.byte 0x48,0x89,0x45,0xF0
;/OP0@ @ FFFFFF AND d08948 XOR OR \ mov     %rdx,%rax
/*	mov	0x40239A  { OP0@+5  } (%rip),%rax	\ 408A7C 	*/.byte 0x48,0x8B,0x5,0x17,0x99,0xFF,0xFF
/*	mov	(%rax),%rax	\ 408A83 	*/.byte 0x48,0x8B,0x0
/*	and	$fimg+0xBFFFFF,%eax	\ 408A86 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
/*	xor	$fimg+0x908948,%eax	\ 408A8B 	*/.byte 0x35,0x48,0x89,0xD0,0x0
/*	or	-0x10(%rbp),%rax	\ 408A90 	*/.byte 0x48,0xB,0x45,0xF0
/*	subq	$0x01,%rax	\ 408A94 	*/.byte 0x48,0x83,0xE8,0x1
;/0=	WHILE   M\ 208 DTST
/*	sbb	%rax,%rax	\ 408A98 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408A9B 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 408A9E 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x408B2A  { EXIT-RULES+8C8  } 	\ 408AA2 	*/.byte 0xF,0x84,0x82,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408AA8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x208,%eax	\ 408AAC 	*/.byte 0xB8,0x8,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408AB1 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 408AB5 E8 97 9A FF FF 
;/	OP1@ L@	OP2@ L@ 100000 XOR
/*	mov	%rax,-0x08(%rbp)	\ 408ABA 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 408ABE 	*/.byte 0x48,0x8B,0x5,0xE2,0x98,0xFF,0xFF
/*	mov	(%rax),%eax	\ 408AC5 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 408AC7 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 408ACB 	*/.byte 0x48,0x8B,0x5,0xE2,0x98,0xFF,0xFF
/*	mov	(%rax),%eax	\ 408AD2 	*/.byte 0x8B,0x0
/*	xor	$0x100000,%rax	\ 408AD4 	*/.byte 0x48,0x35,0x0,0x0,0x10,0x0
/*	mov	%rax,-0x18(%rbp)	\ 408ADA 	*/.byte 0x48,0x89,0x45,0xE8
;/	OP1@ L!	OP2@ L!
/*	mov	0x4023A7  { OP1@+5  } (%rip),%rax	\ 408ADE 	*/.byte 0x48,0x8B,0x5,0xC2,0x98,0xFF,0xFF
/*	mov	-0x18(%rbp),%edx	\ 408AE5 	*/.byte 0x8B,0x55,0xE8
/*	mov	%edx,(%rax)	\ 408AE8 	*/.byte 0x89,0x10
/*	mov	0x4023B4  { OP2@+5  } (%rip),%rax	\ 408AEA 	*/.byte 0x48,0x8B,0x5,0xC3,0x98,0xFF,0xFF
/*	mov	-0x10(%rbp),%edx	\ 408AF1 	*/.byte 0x8B,0x55,0xF0
/*	mov	%edx,(%rax)	\ 408AF4 	*/.byte 0x89,0x10
/*	lea	0x402258  { LAST-HERE+15  } (%rip),%rax	\ 408AF6 	*/.byte 0x48,0x8D,0x5,0x5B,0x97,0xFF,0xFF
;/	OP1 ToOP0
/*	lea	-0x08(%rbp),%rbp	\ 408AFD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402487  { ToOP0 } 	\ 408B01 E8 81 99 FF FF 
;/	-3 ALLOT
/*	addq	$-0x03,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 408B06 	*/.byte 0x48,0x83,0x5,0x42,0x8B,0xFF,0xFF,0xFD
;/   M\ 209 DTST
/*	mov	%rax,-0x08(%rbp)	\ 408B0E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x209,%eax	\ 408B12 	*/.byte 0xB8,0x9,0x2,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408B17 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x402551  { DTST } 	\ 408B1B E8 31 9A FF FF 
;/	MOPT-RULES
	call	0x408178  { MOPT-RULES } 	\ 408B20 E8 53 F6 FF FF 
;/	REPEAT
/*	jmp	0x408276  { EXIT-RULES+14  } 	\ 408B25 	*/.byte 0xE9,0x4C,0xF7,0xFF,0xFF
;/
;/;
	ret		\ 408B2A C3 
;/
;/: INLINE?  ( CFA -- CFA FLAG )
;/
;/  DUP         BEGIN


INLINEque:
/*	mov	%rax,-0x08(%rbp)	\ 408B2B 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 408B2F 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  2DUP
/*	mov	0x00(%rbp),%rdx	\ 408B33 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408B37 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 408B3B 	*/.byte 0x48,0x89,0x55,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 408B3F 	*/.byte 0x48,0x89,0x45,0xE8
;/  MM_SIZE -   U> 0= IF  DROP FALSE  BREAK
/*	mov	0x402214  { MM_SIZE+5  } (%rip),%rax	\ 408B43 	*/.byte 0x48,0x8B,0x5,0xCA,0x96,0xFF,0xFF
/*		negq	%rax	\ 408B4A 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x18(%rbp),%rax	\ 408B4D 	*/.byte 0x48,0x3,0x45,0xE8
/*	cmp	-0x10(%rbp),%rax	\ 408B51 	*/.byte 0x48,0x3B,0x45,0xF0
/*	sbb	%rax,%rax	\ 408B55 	*/.byte 0x48,0x19,0xC0
/*	subq	$0x01,%rax	\ 408B58 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 408B5C 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408B5F 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 408B62 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x408B72  { INLINE?+47  } 	\ 408B66 	*/.byte 0xF,0x84,0x6,0x0,0x0,0x0
/*	mov	$0x0,%eax	\ 408B6C 	*/.byte 0xB8,0x0,0x0,0x0,0x0
	ret		\ 408B71 C3 
;/  DUP L@      \  CFA CFA+OFF N'
/*	mov	%rax,-0x08(%rbp)	\ 408B72 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%eax	\ 408B76 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 408B78 	*/.byte 0x48,0x89,0x45,0xF0
;/  DUP FF AND 0C3 = IF 2DROP  TRUE BREAK  \ RET
/*	and	$0xFF,%eax	\ 408B7C 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0xC3,%rax	\ 408B81 	*/.byte 0x48,0x35,0xC3,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 408B87 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 408B8B 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408B8E 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 408B91 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 408B95 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x408BAB  { INLINE?+80  } 	\ 408B99 	*/.byte 0xF,0x84,0xC,0x0,0x0,0x0
/*	movq	$-0x1,%rax	\ 408B9F 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	0x08(%rbp),%rbp	\ 408BA6 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 408BAA C3 
;/  DUP4B?	M_WL	DROP 4 + REPEAT
	call	0x40304E  { DUP4B? } 	\ 408BAB E8 9E A4 FF FF 
	test	%rax,%rax	\ 408BB0 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408BB3 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408BB7 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408BD3  { INLINE?+A8  } 	\ 408BBB 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x4,%eax	\ 408BC1 	*/.byte 0xB8,0x4,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408BC6 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408BCA 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408BCE 	*/.byte 0xE9,0x60,0xFF,0xFF,0xFF
;/  DUP5B?	M_WL	DROP 5 + REPEAT
	call	0x4030C4  { DUP5B? } 	\ 408BD3 E8 EC A4 FF FF 
	test	%rax,%rax	\ 408BD8 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408BDB 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408BDF 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408BFB  { INLINE?+D0  } 	\ 408BE3 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x5,%eax	\ 408BE9 	*/.byte 0xB8,0x5,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408BEE 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408BF2 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408BF6 	*/.byte 0xE9,0x38,0xFF,0xFF,0xFF
;/  DUP7B?	M_WL	DROP 7 + REPEAT
	call	0x403299  { DUP7B? } 	\ 408BFB E8 99 A6 FF FF 
	test	%rax,%rax	\ 408C00 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408C03 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408C07 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408C23  { INLINE?+F8  } 	\ 408C0B 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x7,%eax	\ 408C11 	*/.byte 0xB8,0x7,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408C16 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408C1A 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408C1E 	*/.byte 0xE9,0x10,0xFF,0xFF,0xFF
;/  DUP4B?[EBP]	M_WL 	DROP 4 + REPEAT
	call	0x40317D  { DUP4B?[EBP] } 	\ 408C23 E8 55 A5 FF FF 
	test	%rax,%rax	\ 408C28 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408C2B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408C2F 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408C4B  { INLINE?+120  } 	\ 408C33 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x4,%eax	\ 408C39 	*/.byte 0xB8,0x4,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408C3E 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408C42 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408C46 	*/.byte 0xE9,0xE8,0xFE,0xFF,0xFF
;/  DUP5B?[EBP]	M_WL	DROP 5 + REPEAT
	call	0x4031E8  { DUP5B?[EBP] } 	\ 408C4B E8 98 A5 FF FF 
	test	%rax,%rax	\ 408C50 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408C53 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408C57 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408C73  { INLINE?+148  } 	\ 408C5B 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x5,%eax	\ 408C61 	*/.byte 0xB8,0x5,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408C66 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408C6A 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408C6E 	*/.byte 0xE9,0xC0,0xFE,0xFF,0xFF
;/  DUP6B?IP	M_WL	DROP 6 + REPEAT
	call	0x40322F  { DUP6B?IP } 	\ 408C73 E8 B7 A5 FF FF 
	test	%rax,%rax	\ 408C78 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408C7B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408C7F 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408C9B  { INLINE?+170  } 	\ 408C83 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x6,%eax	\ 408C89 	*/.byte 0xB8,0x6,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408C8E 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408C92 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408C96 	*/.byte 0xE9,0x98,0xFE,0xFF,0xFF
;/  DUP7B?IP	M_WL	DROP 7 + REPEAT
	call	0x4032E0  { DUP7B?IP } 	\ 408C9B E8 40 A6 FF FF 
	test	%rax,%rax	\ 408CA0 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408CA3 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408CA7 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408CC3  { INLINE?+198  } 	\ 408CAB 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x7,%eax	\ 408CB1 	*/.byte 0xB8,0x7,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408CB6 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408CBA 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408CBE 	*/.byte 0xE9,0x70,0xFE,0xFF,0xFF
;/  FFFFFF AND
/*	and	$fimg+0xBFFFFF,%eax	\ 408CC3 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/  DUP 6D8D48 =	M_WL	DROP 4 + REPEAT  \ LEA  EBP, OFF-EBP [EBP]
/*	mov	%rax,-0x08(%rbp)	\ 408CC8 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x2D8D48,%rax	\ 408CCC 	*/.byte 0x48,0x35,0x48,0x8D,0x6D,0x0
/*	subq	$0x01,%rax	\ 408CD2 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 408CD6 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408CD9 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 408CDC 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x408CF8  { INLINE?+1CD  } 	\ 408CE0 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x4,%eax	\ 408CE6 	*/.byte 0xB8,0x4,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408CEB 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408CEF 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408CF3 	*/.byte 0xE9,0x3B,0xFE,0xFF,0xFF
;/  DUP3B?[EBP]	M_WL	DROP 3 + REPEAT
	call	0x402E4E  { DUP3B?[EBP] } 	\ 408CF8 E8 51 A1 FF FF 
	test	%rax,%rax	\ 408CFD 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408D00 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408D04 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408D20  { INLINE?+1F5  } 	\ 408D08 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x3,%eax	\ 408D0E 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408D13 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408D17 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408D1B 	*/.byte 0xE9,0x13,0xFE,0xFF,0xFF
;/  DUP3B?	M_WL	DROP 3 + REPEAT
	call	0x402ECD  { DUP3B? } 	\ 408D20 E8 A8 A1 FF FF 
	test	%rax,%rax	\ 408D25 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408D28 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408D2C 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408D48  { INLINE?+21D  } 	\ 408D30 	*/.byte 0xF,0x84,0x12,0x0,0x0,0x0
/*	mov	$0x3,%eax	\ 408D36 	*/.byte 0xB8,0x3,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 408D3B 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408D3F 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408D43 	*/.byte 0xE9,0xEB,0xFD,0xFF,0xFF
;/  FFFF AND
/*	and	$0xFFFF,%eax	\ 408D48 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
;/  DUP2B?	WHILE 	DROP 2+ REPEAT
	call	0x402CB6  { DUP2B? } 	\ 408D4D E8 64 9F FF FF 
	test	%rax,%rax	\ 408D52 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408D55 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408D59 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408D74  { INLINE?+249  } 	\ 408D5D 	*/.byte 0xF,0x84,0x11,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 408D63 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x02(%rax),%rax	\ 408D67 	*/.byte 0x48,0x8D,0x40,0x2
/*	lea	0x08(%rbp),%rbp	\ 408D6B 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408B33  { INLINE?+8  } 	\ 408D6F 	*/.byte 0xE9,0xBF,0xFD,0xFF,0xFF
;/
;/ 2DROP  FALSE
/*	mov	$0x0,%eax	\ 408D74 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	0x08(%rbp),%rbp	\ 408D79 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 408D7D C3 
;/
;/: DO_OPT   ( ADDR -- ADDR' )
;/  OPT? IF


DO_OPT:
/*	mov	%rax,-0x08(%rbp)	\ 408D7E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402207  { OPT?+5  } (%rip),%rax	\ 408D82 	*/.byte 0x48,0x8B,0x5,0x7E,0x94,0xFF,0xFF
	test	%rax,%rax	\ 408D89 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 408D8C 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x408DA0  { DO_OPT+22  } 	\ 408D90 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
;/  MOPT-RULES  
	call	0x408178  { MOPT-RULES } 	\ 408D96 E8 DD F3 FF FF 
;/ EVEN-EAX
	call	0x402A2D  { EVEN-EAX } 	\ 408D9B E8 8D 9C FF FF 
;/ THEN ;
	ret		\ 408DA0 C3 
;/
;/: OPT   ( -- )  'NOOP DO_OPT DROP  ;


OPT:
/*	mov	%rax,-0x08(%rbp)	\ 408DA1 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x400404  { NOOP } (%rip),%rax	\ 408DA5 	*/.byte 0x48,0x8D,0x5,0x58,0x76,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 408DAC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x408D7E  { DO_OPT } 	\ 408DB0 E8 C9 FF FF FF 
/*	mov	0x00(%rbp),%rax	\ 408DB5 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408DB9 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 408DBD C3 
;/
;/: 1_,_STEP SetOP DROP COUNT C, ;


1_com_STEP:
	call	0x40240E  { SetOP } 	\ 408DBE E8 4B 96 FF FF 
/*	mov	0x00(%rbp),%rax	\ 408DC3 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x01(%rax),%rdx	\ 408DC7 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 408DCB 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,0x00(%rbp)	\ 408DCF 	*/.byte 0x48,0x89,0x55,0x0
	call	0x4016EE  { C, } 	\ 408DD3 E8 16 89 FF FF 
	ret		\ 408DD8 C3 
;/: 2_,_STEP SetOP DROP DUP W@ W, 2+ ;


2_com_STEP:
	call	0x40240E  { SetOP } 	\ 408DD9 E8 30 96 FF FF 
/*	mov	0x00(%rbp),%rax	\ 408DDE 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzw	(%rax),%eax	\ 408DE2 	*/.byte 0xF,0xB7,0x0
	call	0x4016CC  { W, } 	\ 408DE5 E8 E2 88 FF FF 
/*	lea	0x02(%rax),%rax	\ 408DEA 	*/.byte 0x48,0x8D,0x40,0x2
	ret		\ 408DEE C3 
;/: 3_,_STEP 2_,_STEP COUNT C, ;


3_com_STEP:
	call	0x408DD9  { 2_,_STEP } 	\ 408DEF E8 E5 FF FF FF 
/*	lea	0x01(%rax),%rdx	\ 408DF4 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 408DF8 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 408DFC 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 408E00 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 408E04 E8 E5 88 FF FF 
	ret		\ 408E09 C3 
;/: 4_,_STEP SetOP DROP DUP L@ L, 4+ ;


4_com_STEP:
	call	0x40240E  { SetOP } 	\ 408E0A E8 FF 95 FF FF 
/*	mov	0x00(%rbp),%rax	\ 408E0F 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	(%rax),%eax	\ 408E13 	*/.byte 0x8B,0x0
	call	0x4016AB  { L, } 	\ 408E15 E8 91 88 FF FF 
/*	lea	0x04(%rax),%rax	\ 408E1A 	*/.byte 0x48,0x8D,0x40,0x4
	ret		\ 408E1E C3 
;/: 2_;_STEP 2_,_STEP DO_OPT ;


2_end_STEP:
	call	0x408DD9  { 2_,_STEP } 	\ 408E1F E8 B5 FF FF FF 
	call	0x408D7E  { DO_OPT } 	\ 408E24 E8 55 FF FF FF 
	ret		\ 408E29 C3 
;/: 3_;_STEP 3_,_STEP DO_OPT ;


3_end_STEP:
	call	0x408DEF  { 3_,_STEP } 	\ 408E2A E8 C0 FF FF FF 
	call	0x408D7E  { DO_OPT } 	\ 408E2F E8 4A FF FF FF 
	ret		\ 408E34 C3 
;/: 4_;_STEP 4_,_STEP DO_OPT ;


4_end_STEP:
	call	0x408E0A  { 4_,_STEP } 	\ 408E35 E8 D0 FF FF FF 
	call	0x408D7E  { DO_OPT } 	\ 408E3A E8 3F FF FF FF 
	ret		\ 408E3F C3 
;/: 5_;_STEP 4_,_STEP COUNT C,	DO_OPT ;


5_end_STEP:
	call	0x408E0A  { 4_,_STEP } 	\ 408E40 E8 C5 FF FF FF 
/*	lea	0x01(%rax),%rdx	\ 408E45 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 408E49 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 408E4D 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 408E51 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 408E55 E8 94 88 FF FF 
	call	0x408D7E  { DO_OPT } 	\ 408E5A E8 1F FF FF FF 
	ret		\ 408E5F C3 
;/: 6_;_STEP 2_,_STEP DUP L@ L, 4+ DO_OPT ;


6_end_STEP:
	call	0x408DD9  { 2_,_STEP } 	\ 408E60 E8 74 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 408E65 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%eax	\ 408E69 	*/.byte 0x8B,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408E6B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016AB  { L, } 	\ 408E6F E8 37 88 FF FF 
/*	lea	0x04(%rax),%rax	\ 408E74 	*/.byte 0x48,0x8D,0x40,0x4
	call	0x408D7E  { DO_OPT } 	\ 408E78 E8 1 FF FF FF 
	ret		\ 408E7D C3 
;/: 7_;_STEP 3_,_STEP DUP L@ L, 4+ DO_OPT ;


7_end_STEP:
	call	0x408DEF  { 3_,_STEP } 	\ 408E7E E8 6C FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 408E83 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%eax	\ 408E87 	*/.byte 0x8B,0x0
/*	lea	-0x08(%rbp),%rbp	\ 408E89 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016AB  { L, } 	\ 408E8D E8 19 88 FF FF 
/*	lea	0x04(%rax),%rax	\ 408E92 	*/.byte 0x48,0x8D,0x40,0x4
	call	0x408D7E  { DO_OPT } 	\ 408E96 E8 E3 FE FF FF 
	ret		\ 408E9B C3 
;/: +EBP COUNT C>S OFF-EBP + C,	DO_OPT ;


addEBP:
/*	lea	0x01(%rax),%rdx	\ 408E9C 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 408EA0 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 408EA4 	*/.byte 0x48,0x89,0x55,0xF8
/*	movsbq	%al,%rax	\ 408EA8 	*/.byte 0x48,0xF,0xBE,0xC0
/*	add	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 408EAC 	*/.byte 0x48,0x3,0x5,0x6E,0x93,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 408EB3 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4016EE  { C, } 	\ 408EB7 E8 32 88 FF FF 
	call	0x408D7E  { DO_OPT } 	\ 408EBC E8 BD FE FF FF 
	ret		\ 408EC1 C3 
;/: +REL DUP SL@ OVER + THERE -  L, 4+ \	DO_OPT


addREL:
/*	mov	%rax,-0x08(%rbp)	\ 408EC2 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 408EC6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40048A  { SL@ } 	\ 408ECA E8 BB 75 FF FF 
/*	add	0x00(%rbp),%rax	\ 408ECF 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408ED3 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 408ED7 	*/.byte 0x48,0x8B,0x5,0x72,0x87,0xFF,0xFF
/*		negq	%rax	\ 408EDE 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 408EE1 	*/.byte 0x48,0x3,0x45,0xF8
	call	0x4016AB  { L, } 	\ 408EE5 E8 C1 87 FF FF 
/*	lea	0x04(%rax),%rax	\ 408EEA 	*/.byte 0x48,0x8D,0x40,0x4
;/ ;
	ret		\ 408EEE C3 
;/
;/: _INLINE,  (  CFA  --  )
;/	BEGIN
;/\  DO_OPT
;/  DUP L@      \  CFA  N'


_INLINEcom:
/*	mov	%rax,-0x08(%rbp)	\ 408EEF 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rax),%eax	\ 408EF3 	*/.byte 0x8B,0x0
/*	mov	%rax,-0x10(%rbp)	\ 408EF5 	*/.byte 0x48,0x89,0x45,0xF0
;/  DUP FF AND 0C3 = IF DROP OPT? IF -EVEN-EAX EXIT-RULES EVEN-EAX THEN DROP  BREAK  \ RET
/*	and	$0xFF,%eax	\ 408EF9 	*/.byte 0x25,0xFF,0x0,0x0,0x0
/*	xor	$0xC3,%rax	\ 408EFE 	*/.byte 0x48,0x35,0xC3,0x0,0x0,0x0
/*	subq	$0x01,%rax	\ 408F04 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 408F08 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 408F0B 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 408F0E 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 408F12 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x408F4C  { _INLINE,+5D  } 	\ 408F16 	*/.byte 0xF,0x84,0x30,0x0,0x0,0x0
/*	mov	0x402207  { OPT?+5  } (%rip),%rax	\ 408F1C 	*/.byte 0x48,0x8B,0x5,0xE4,0x92,0xFF,0xFF
	test	%rax,%rax	\ 408F23 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408F26 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408F2A 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408F43  { _INLINE,+54  } 	\ 408F2E 	*/.byte 0xF,0x84,0xF,0x0,0x0,0x0
	call	0x403C00  { -EVEN-EAX } 	\ 408F34 E8 C7 AC FF FF 
	call	0x408262  { EXIT-RULES } 	\ 408F39 E8 24 F3 FF FF 
	call	0x402A2D  { EVEN-EAX } 	\ 408F3E E8 EA 9A FF FF 
/*	mov	0x00(%rbp),%rax	\ 408F43 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408F47 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 408F4B C3 
;/  DUP4B?	M_WL	4_;_STEP REPEAT
	call	0x40304E  { DUP4B? } 	\ 408F4C E8 FD A0 FF FF 
	test	%rax,%rax	\ 408F51 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408F54 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408F58 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408F6C  { _INLINE,+7D  } 	\ 408F5C 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x408E35  { 4_;_STEP } 	\ 408F62 E8 CE FE FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 408F67 	*/.byte 0xE9,0x83,0xFF,0xFF,0xFF
;/  DUP5B?	M_WL	5_;_STEP REPEAT
	call	0x4030C4  { DUP5B? } 	\ 408F6C E8 53 A1 FF FF 
	test	%rax,%rax	\ 408F71 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408F74 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408F78 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408F8C  { _INLINE,+9D  } 	\ 408F7C 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x408E40  { 5_;_STEP } 	\ 408F82 E8 B9 FE FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 408F87 	*/.byte 0xE9,0x63,0xFF,0xFF,0xFF
;/  DUP6B?	M_WL	6_;_STEP REPEAT
	call	0x403112  { DUP6B? } 	\ 408F8C E8 81 A1 FF FF 
	test	%rax,%rax	\ 408F91 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408F94 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408F98 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408FAC  { _INLINE,+BD  } 	\ 408F9C 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x408E60  { 6_;_STEP } 	\ 408FA2 E8 B9 FE FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 408FA7 	*/.byte 0xE9,0x43,0xFF,0xFF,0xFF
;/  DUP7B?	M_WL	7_;_STEP REPEAT
	call	0x403299  { DUP7B? } 	\ 408FAC E8 E8 A2 FF FF 
	test	%rax,%rax	\ 408FB1 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408FB4 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408FB8 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x408FCC  { _INLINE,+DD  } 	\ 408FBC 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x408E7E  { 7_;_STEP } 	\ 408FC2 E8 B7 FE FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 408FC7 	*/.byte 0xE9,0x23,0xFF,0xFF,0xFF
;/  DUP4B?[EBP]	M_WL 3?EBP 3_,_STEP +EBP REPEAT
	call	0x40317D  { DUP4B?[EBP] } 	\ 408FCC E8 AC A1 FF FF 
	test	%rax,%rax	\ 408FD1 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 408FD4 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 408FD8 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409001  { _INLINE,+112  } 	\ 408FDC 	*/.byte 0xF,0x84,0x1F,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 408FE2 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 408FE6 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x03(%rax),%rax	\ 408FEA 	*/.byte 0x48,0x8D,0x40,0x3
/*	mov	-0x08(%rbp),%rax	\ 408FEE 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x408DEF  { 3_,_STEP } 	\ 408FF2 E8 F8 FD FF FF 
	call	0x408E9C  { +EBP } 	\ 408FF7 E8 A0 FE FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 408FFC 	*/.byte 0xE9,0xEE,0xFE,0xFF,0xFF
;/  DUP5B?[EBP]	M_WL 4?EBP 4_,_STEP +EBP REPEAT
	call	0x4031E8  { DUP5B?[EBP] } 	\ 409001 E8 E2 A1 FF FF 
	test	%rax,%rax	\ 409006 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 409009 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40900D 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409036  { _INLINE,+147  } 	\ 409011 	*/.byte 0xF,0x84,0x1F,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 409017 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 40901B 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x04(%rax),%rax	\ 40901F 	*/.byte 0x48,0x8D,0x40,0x4
/*	mov	-0x08(%rbp),%rax	\ 409023 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x408E0A  { 4_,_STEP } 	\ 409027 E8 DE FD FF FF 
	call	0x408E9C  { +EBP } 	\ 40902C E8 6B FE FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 409031 	*/.byte 0xE9,0xB9,0xFE,0xFF,0xFF
;/  DUP6B?IP	M_WL	2_,_STEP +REL REPEAT
	call	0x40322F  { DUP6B?IP } 	\ 409036 E8 F4 A1 FF FF 
	test	%rax,%rax	\ 40903B 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40903E 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409042 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x40905B  { _INLINE,+16C  } 	\ 409046 	*/.byte 0xF,0x84,0xF,0x0,0x0,0x0
	call	0x408DD9  { 2_,_STEP } 	\ 40904C E8 88 FD FF FF 
	call	0x408EC2  { +REL } 	\ 409051 E8 6C FE FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 409056 	*/.byte 0xE9,0x94,0xFE,0xFF,0xFF
;/  DUP7B?IP	M_WL	3_,_STEP +REL  REPEAT
	call	0x4032E0  { DUP7B?IP } 	\ 40905B E8 80 A2 FF FF 
	test	%rax,%rax	\ 409060 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 409063 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409067 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409080  { _INLINE,+191  } 	\ 40906B 	*/.byte 0xF,0x84,0xF,0x0,0x0,0x0
	call	0x408DEF  { 3_,_STEP } 	\ 409071 E8 79 FD FF FF 
	call	0x408EC2  { +REL } 	\ 409076 E8 47 FE FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 40907B 	*/.byte 0xE9,0x6F,0xFE,0xFF,0xFF
;/  FFFFFF AND 
/*	and	$fimg+0xBFFFFF,%eax	\ 409080 	*/.byte 0x25,0xFF,0xFF,0xFF,0x0
;/  DUP 6D8D48 = M_WL DROP DUP 3 + C@ +>OFF-EBP
/*	mov	%rax,-0x08(%rbp)	\ 409085 	*/.byte 0x48,0x89,0x45,0xF8
/*	xor	$fimg+0x2D8D48,%rax	\ 409089 	*/.byte 0x48,0x35,0x48,0x8D,0x6D,0x0
/*	subq	$0x01,%rax	\ 40908F 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 409093 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 409096 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 409099 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x4090CF  { _INLINE,+1E0  } 	\ 40909D 	*/.byte 0xF,0x84,0x2C,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rax	\ 4090A3 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzb	0x03(%rax),%eax	\ 4090A7 	*/.byte 0xF,0xB6,0x40,0x3
/*	movsbq	%al,%rax	\ 4090AB 	*/.byte 0x48,0xF,0xBE,0xC0
/*	add	0x402221  { OFF-EBP+5  } (%rip),%rax	\ 4090AF 	*/.byte 0x48,0x3,0x5,0x6B,0x91,0xFF,0xFF
/*	mov	%rax,0x402221  { OFF-EBP+5  } (%rip)	\ 4090B6 	*/.byte 0x48,0x89,0x5,0x64,0x91,0xFF,0xFF
/*	mov	$0x4,%eax	\ 4090BD 	*/.byte 0xB8,0x4,0x0,0x0,0x0
/*	add	0x00(%rbp),%rax	\ 4090C2 	*/.byte 0x48,0x3,0x45,0x0
;/                     4 + REPEAT  \ LEA  EBP, OFF-EBP [EBP]
/*	lea	0x08(%rbp),%rbp	\ 4090C6 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jmp	0x408EEF  { _INLINE, } 	\ 4090CA 	*/.byte 0xE9,0x20,0xFE,0xFF,0xFF
;/  DUP3B?[EBP]	M_WL 2?EBP 2_,_STEP +EBP REPEAT
	call	0x402E4E  { DUP3B?[EBP] } 	\ 4090CF E8 7A 9D FF FF 
	test	%rax,%rax	\ 4090D4 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 4090D7 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4090DB 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409104  { _INLINE,+215  } 	\ 4090DF 	*/.byte 0xF,0x84,0x1F,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4090E5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 4090E9 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x02(%rax),%rax	\ 4090ED 	*/.byte 0x48,0x8D,0x40,0x2
/*	mov	-0x08(%rbp),%rax	\ 4090F1 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x408DD9  { 2_,_STEP } 	\ 4090F5 E8 DF FC FF FF 
	call	0x408E9C  { +EBP } 	\ 4090FA E8 9D FD FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 4090FF 	*/.byte 0xE9,0xEB,0xFD,0xFF,0xFF
;/  DUP3B?	M_WL	3_;_STEP REPEAT
	call	0x402ECD  { DUP3B? } 	\ 409104 E8 C4 9D FF FF 
	test	%rax,%rax	\ 409109 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 40910C 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409110 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409124  { _INLINE,+235  } 	\ 409114 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x408E2A  { 3_;_STEP } 	\ 40911A E8 B FD FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 40911F 	*/.byte 0xE9,0xCB,0xFD,0xFF,0xFF
;/  FFFF AND
/*	and	$0xFFFF,%eax	\ 409124 	*/.byte 0x25,0xFF,0xFF,0x0,0x0
;/  DUP2B?	WHILE	2_;_STEP REPEAT
	call	0x402CB6  { DUP2B? } 	\ 409129 E8 88 9B FF FF 
	test	%rax,%rax	\ 40912E 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 409131 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 409135 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x409149  { _INLINE,+25A  } 	\ 409139 	*/.byte 0xF,0x84,0xA,0x0,0x0,0x0
	call	0x408E1F  { 2_;_STEP } 	\ 40913F E8 DB FC FF FF 
/*	jmp	0x408EEF  { _INLINE, } 	\ 409144 	*/.byte 0xE9,0xA6,0xFD,0xFF,0xFF
;/  HH. ." @COD, ERROR" ABORT
	call	0x40200A  { HH. } 	\ 409149 E8 BC 8E FF FF 
	call	0x4018C1  { (S") } 	\ 40914E E8 6E 87 FF FF 
	.byte 0xB,0x40,0x43,0x4F,0x44
	.byte 0x2C,0x20,0x45,0x52,0x52,0x4F,0x52,0xE8
/*	sbb	0x39E8FFFF(%rsi),%al	\ 409160 	*/.byte 0x1A,0x86,0xFF,0xFF,0xE8,0x39
	mov	%edi,% 	\ 409166 8E FF 
/*	inc	%ebx	\ 409168 	*/.byte 0xFF,0xC3
;/;
;/
;/: OPT_INIT  ?SET


OPT_INIT:
	call	0x4024A5  { ?SET } 	\ 40916A E8 36 93 FF FF 
;/\ EVEN-EBP? IF
;/ -EVEN-EBP
	call	0x402C2C  { -EVEN-EBP } 	\ 40916F E8 B8 9A FF FF 
;/\ THEN
;/ ;
	ret		\ 409174 C3 
;/
;/: OPT_CLOSE
;/ EVEN-EBP


OPT_CLOSE:
	call	0x402B41  { EVEN-EBP } 	\ 409175 E8 C7 99 FF FF 
;/ THERE TO LAST-HERE
/*	mov	%rax,-0x08(%rbp)	\ 40917A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 40917E 	*/.byte 0x48,0x8B,0x5,0xCB,0x84,0xFF,0xFF
/*	mov	%rax,0x402248  { LAST-HERE+5  } (%rip)	\ 409185 	*/.byte 0x48,0x89,0x5,0xBC,0x90,0xFF,0xFF
/*	mov	-0x08(%rbp),%rax	\ 40918C 	*/.byte 0x48,0x8B,0x45,0xF8
;/ ;
	ret		\ 409190 C3 
;/
;/: OPT; OPT  OPT_CLOSE ;


OPTend:
	call	0x408DA1  { OPT } 	\ 409191 E8 B FC FF FF 
	call	0x409175  { OPT_CLOSE } 	\ 409196 E8 DA FF FF FF 
	ret		\ 40919B C3 
;/
;/
;/: INLINE, ( CFA --  )
;/  OPT_INIT


INLINEcom:
	call	0x40916A  { OPT_INIT } 	\ 40919C E8 C9 FF FF FF 
;/  _INLINE,
	call	0x408EEF  { _INLINE, } 	\ 4091A1 E8 49 FD FF FF 
;/  OPT_CLOSE
	call	0x409175  { OPT_CLOSE } 	\ 4091A6 E8 CA FF FF FF 
;/ ;
	ret		\ 4091AB C3 
;/
;/TBASE M!
;/
;/\  8A DTST
;/\ [ ' DoTDTST TO TDTST ]
