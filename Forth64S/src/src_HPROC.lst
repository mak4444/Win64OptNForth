;/\- DOCREATE	: DOCREATE	R> ;
;/\- DOCONSTANT	: DOCONSTANT	R> @ ;
;/\- DOVALUE	: DOTVALUE	R> @ ;
;/\- DOVECT 	: DOVECT	R> PERFORM ;
;/
;/\- DOFIELD	: DOFIELD	R> L@ + ;
;/
;/' DOCREATE TO 'DOCREATE
;/' DOCONSTANT TO 'DOCONSTANT
;/' DOVALUE TO 'DOVALUE
;/' DOVECT TO 'DOVECT
;/' DOFIELD TO 'DOFIELD
;/
;/VARIABLE SP0
	DQ 0x0
	DB 0x0,0x0,0x0,0x0,0x0
;/VARIABLE &INPUT
	DQ 0x0
;/VARIABLE &INPUT?
	DQ 0x0
;/
;/VARIABLE &OUTPUT
	DQ 0x0
;/
;/CREATE &START_INIT ' NOOP ,
	DQ 0x404+fimg
;/\ CREATE DP ' DPBuff ,
;/VARIABLE DP
	DQ 0x0
;/
;/VARIABLE EMITVAR
	DQ 0x0
;/
;/TIMAGE-BASE CONSTANT IMAGE-BASE
;/
;/T: THERE DP @ ;

THERE:
/*	mov	%rax,-0x08(%rbp)	\ 401660 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 401664 	*/.byte 0x48,0x8B,0x5,0xE5,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40166B 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40166F C3 
;/
;/T: ALLOT DP +! ;


ALLOT:
/*	add	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 401670 	*/.byte 0x48,0x1,0x5,0xD9,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 401677 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40167B 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40167F C3 
;/
;/T: DP! DP ! ;


DPsave:
/*	mov	%rax,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 401680 	*/.byte 0x48,0x89,0x5,0xC9,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 401687 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40168B 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40168F C3 
;/
;/T: ,   THERE ! 8 ALLOT ;


com:
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rdx	\ 401690 	*/.byte 0x48,0x8B,0x15,0xB9,0xFF,0xFF,0xFF
/*	mov	%rax,(%rdx)	\ 401697 	*/.byte 0x48,0x89,0x2
/*	addq	$0x08,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 40169A 	*/.byte 0x48,0x83,0x5,0xAE,0xFF,0xFF,0xFF,0x8
/*	mov	0x00(%rbp),%rax	\ 4016A2 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4016A6 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4016AA C3 
;/
;/T: L, THERE L! 4 ALLOT ;


Lcom:
/*	mov	%rax,-0x08(%rbp)	\ 4016AB 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 4016AF 	*/.byte 0x48,0x8B,0x5,0x9A,0xFF,0xFF,0xFF
/*	mov	-0x08(%rbp),%edx	\ 4016B6 	*/.byte 0x8B,0x55,0xF8
/*	mov	%edx,(%rax)	\ 4016B9 	*/.byte 0x89,0x10
/*	addq	$0x04,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4016BB 	*/.byte 0x48,0x83,0x5,0x8D,0xFF,0xFF,0xFF,0x4
/*	mov	0x00(%rbp),%rax	\ 4016C3 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4016C7 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4016CB C3 
;/
;/T: W, THERE W! 2 ALLOT ;


Wcom:
/*	mov	%rax,-0x08(%rbp)	\ 4016CC 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 4016D0 	*/.byte 0x48,0x8B,0x5,0x79,0xFF,0xFF,0xFF
/*	mov	-0x08(%rbp),%edx	\ 4016D7 	*/.byte 0x8B,0x55,0xF8
/*	mov	%dx,(%rax)	\ 4016DA 	*/.byte 0x66,0x89,0x10
/*	addq	$0x02,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4016DD 	*/.byte 0x48,0x83,0x5,0x6B,0xFF,0xFF,0xFF,0x2
/*	mov	0x00(%rbp),%rax	\ 4016E5 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 4016E9 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4016ED C3 
;/
;/T: C, THERE C! 1 ALLOT ;


Ccom:
/*	mov	%rax,-0x08(%rbp)	\ 4016EE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401650  { ORIGVIEWLINK+3A  } (%rip),%rax	\ 4016F2 	*/.byte 0x48,0x8B,0x5,0x57,0xFF,0xFF,0xFF
/*	mov	-0x08(%rbp),%dl	\ 4016F9 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 4016FC 	*/.byte 0x88,0x10
/*	addq	$0x01,0x401650  { ORIGVIEWLINK+3A  } (%rip)	\ 4016FE 	*/.byte 0x48,0x83,0x5,0x4A,0xFF,0xFF,0xFF,0x1
/*	mov	0x00(%rbp),%rax	\ 401706 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40170A 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 40170E C3 
;/
;/' EMIT_M ->DEFER EMIT


EMIT:
	call	0x400B02  { DOVECT } 	\ 40170F E8 EE F3 FF FF 
	.quad 0x400BC8  { EMIT_M } 

;/
;/: TYPE_M ( c-addr1 u --- )
;/\ Output the string starting at c-addr and length u to the terminal.
;/\ CC_LINES
;/  0 ?DO COUNT EMIT LOOP DROP

TYPE_M:
/*	mov	%rax,-0x08(%rbp)	\ 40171C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 401720 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 401725 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400A59  { (?DO) } 	\ 401729 E8 2B F3 FF FF 
	.quad 0x401758  { TYPE_M+3C  } 
/*	lea	0x01(%rax),%rdx	\ 401736 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 40173A 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 40173E 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 401742 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 401746 E8 C4 FF FF FF 
/*	inc	%r14	\ 40174B 	*/.byte 0x49,0xFF,0xC6
/*	inc	%r15	\ 40174E 	*/.byte 0x49,0xFF,0xC7
	jNo	0x401736  { TYPE_M+1A  } 	\ 401751 71 E3 
	pop	%r14	\ 401753 41 5E 
	pop	%r15	\ 401755 41 5F 
	pop	%rcx	\ 401757 59 
/*	mov	0x00(%rbp),%rax	\ 401758 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40175C 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 401760 C3 
;/
;/: TYPE1 ( c-addr u -- ) \ 94
;/  H-STDOUT \ DUP 0= IF DROP 2DROP BREAK


TYPE1:
/*	mov	%rax,-0x08(%rbp)	\ 401761 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x400B1C  { H-STDOUT+5  } (%rip),%rax	\ 401765 	*/.byte 0x48,0x8B,0x5,0xB0,0xF3,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40176C 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  WRITE-FILE DROP \ THROW  !!!!!
	call	0x400C0A  { WRITE-FILE } 	\ 401770 E8 95 F4 FF FF 
/*	mov	0x00(%rbp),%rax	\ 401775 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401779 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 40177D C3 
;/
;/' TYPE_M ->DEFER TYPE


TYPE:
	call	0x400B02  { DOVECT } 	\ 40177E E8 7F F3 FF FF 
	.quad 0x40171C  { TYPE_M } 

;/
;/: CR1 	$d EMIT	$a EMIT ;

CR1:
/*	mov	%rax,-0x08(%rbp)	\ 40178B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xD,%eax	\ 40178F 	*/.byte 0xB8,0xD,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 401794 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 401798 E8 72 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40179D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xA,%eax	\ 4017A1 	*/.byte 0xB8,0xA,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 4017A6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 4017AA E8 60 FF FF FF 
	ret		\ 4017AF C3 
;/' CR1 ->defer CR


CR:
	call	0x400B02  { DOVECT } 	\ 4017B0 E8 4D F3 FF FF 
	.quad 0x40178B  { CR1 } 

;/
;/VARIABLE TEXTINPUEX
	DQ 0x0
	DB 0x0,0x0,0x0
;/VARIABLE IVANTID
	DQ 0x0
;/
;/0 VALUE BOOTSERV

BOOTSERV:
	call	0x400AF4  { DOVALUE } 	\ 4017D0 E8 1F F3 FF FF 

	DQ 0x0
;/0 VALUE VOLUME

VOLUME:
	call	0x400AF4  { DOVALUE } 	\ 4017DD E8 12 F3 FF FF 

	DQ 0x0
;/
;/: KEY?EX ( -- flg )
;/ ;

KEYqueEX:
	ret		\ 4017EA C3 
;/
;/: SHIFT@  ;


SHIFTload:
	ret		\ 4017EB C3 
;/: CTL@  ;


CTLload:
	ret		\ 4017EC C3 
;/: ALT@  ;


ALTload:
	ret		\ 4017ED C3 
;/
;/' KEY?EX ->DEFER KEY?


KEYque:
	call	0x400B02  { DOVECT } 	\ 4017EE E8 F F3 FF FF 
	.quad 0x4017EA  { KEY?EX } 

;/
;/' OS_KEY ->DEFER KEY

KEY:
	call	0x400B02  { DOVECT } 	\ 4017FB E8 2 F3 FF FF 
	.quad 0x400B58  { OS_KEY } 

;/
;/: TAB	9  EMIT ;

TAB:
/*	mov	%rax,-0x08(%rbp)	\ 401808 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x9,%eax	\ 40180C 	*/.byte 0xB8,0x9,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 401811 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 401815 E8 F5 FE FF FF 
	ret		\ 40181A C3 
;/
;/T: HALIGNED  1+  1 ANDC ;


HALIGNED:
/*	lea	0x01(%rax),%rax	\ 40181B 	*/.byte 0x48,0x8D,0x40,0x1
/*	andq	$-0x02,%rax	\ 40181F 	*/.byte 0x48,0x83,0xE0,0xFE
	ret		\ 401823 C3 
;/T: IALIGNED  3 + 3 ANDC ;


IALIGNED:
/*	lea	0x03(%rax),%rax	\ 401824 	*/.byte 0x48,0x8D,0x40,0x3
/*	andq	$-0x04,%rax	\ 401828 	*/.byte 0x48,0x83,0xE0,0xFC
	ret		\ 40182C C3 
;/T: QALIGNED  7 + 7 ANDC ;


QALIGNED:
/*	lea	0x07(%rax),%rax	\ 40182D 	*/.byte 0x48,0x8D,0x40,0x7
/*	mov	%rax,-0x08(%rbp)	\ 401831 	*/.byte 0x48,0x89,0x45,0xF8
/*	andq	$-0x08,%rax	\ 401835 	*/.byte 0x48,0x83,0xE0,0xF8
	ret		\ 401839 C3 
;/
;/CREATE ALIGN-BYTES 8 ,

	DQ 0x8
;/
;/T: ALIGNED ( addr -- a-addr ) \ 94
;/\ a-addr - первый выровненный адрес, больший или равный addr.
;/  ALIGN-BYTES @ DUP 0= IF 1+ DUP ALIGN-BYTES ! THEN

ALIGNED:
/*	mov	%rax,-0x08(%rbp)	\ 401842 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x40183A  { QALIGNED+D  } (%rip),%rax	\ 401846 	*/.byte 0x48,0x8B,0x5,0xED,0xFF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 40184D 	*/.byte 0x48,0x89,0x45,0xF0
/*	subq	$0x01,%rax	\ 401851 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 401855 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 401858 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 40185B 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 40185F 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x401874  { ALIGNED+32  } 	\ 401863 	*/.byte 0xF,0x84,0xB,0x0,0x0,0x0
/*	lea	0x01(%rax),%rax	\ 401869 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	%rax,0x40183A  { QALIGNED+D  } (%rip)	\ 40186D 	*/.byte 0x48,0x89,0x5,0xC6,0xFF,0xFF,0xFF
;/  2DUP
/*	mov	0x00(%rbp),%rdx	\ 401874 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401878 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 40187C 	*/.byte 0x48,0x89,0x55,0xF0
/*	mov	%rax,%rcx	\ 401880 	*/.byte 0x48,0x89,0xC1
/*	mov	-0x10(%rbp),%rax	\ 401883 	*/.byte 0x48,0x8B,0x45,0xF0
;/  MOD DUP IF - + ELSE 2DROP THEN ;
	dw 9948h		\ 401887 48 99 
/*		idivq	%rcx	\ 401889 	*/.byte 0x48,0xF7,0xF9
/*	mov	%rdx,%rax	\ 40188C 	*/.byte 0x48,0x89,0xD0
/*	mov	%rax,-0x10(%rbp)	\ 40188F 	*/.byte 0x48,0x89,0x45,0xF0
	test	%rax,%rax	\ 401893 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 401896 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 40189A 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x4018B8  { ALIGNED+76  } 	\ 40189E 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*		negq	%rax	\ 4018A4 	*/.byte 0x48,0xF7,0xD8
/*	add	0x00(%rbp),%rax	\ 4018A7 	*/.byte 0x48,0x3,0x45,0x0
/*	add	0x08(%rbp),%rax	\ 4018AB 	*/.byte 0x48,0x3,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 4018AF 	*/.byte 0x48,0x8D,0x6D,0x10
/*	jmp	0x4018C0  { ALIGNED+7E  } 	\ 4018B3 	*/.byte 0xE9,0x8,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rax	\ 4018B8 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 4018BC 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 4018C0 C3 
;/
;/: (S")  ( --- c-addr u )
;/\ Runtime part of S"
;/\ It returns address and length of an in-line counted string.
;/  R>  COUNT 2DUP + >R ;


cbigSdticcend:
/*	mov	%rax,-0x08(%rbp)	\ 4018C1 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 4018C5 58 
/*	lea	0x01(%rax),%rdx	\ 4018C6 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 4018CA 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x10(%rbp)	\ 4018CE 	*/.byte 0x48,0x89,0x55,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 4018D2 	*/.byte 0x48,0x89,0x45,0xE8
/*	add	%rdx,%rax	\ 4018D6 	*/.byte 0x48,0x1,0xD0
	Push	%rax	\ 4018D9 50 
/*	mov	-0x18(%rbp),%rax	\ 4018DA 	*/.byte 0x48,0x8B,0x45,0xE8
/*	lea	-0x10(%rbp),%rbp	\ 4018DE 	*/.byte 0x48,0x8D,0x6D,0xF0
	ret		\ 4018E2 C3 
;/
;/\+ '(S") ' (S") TO '(S")
;/
;/: (Z")  ( --- c-addr u )
;/\ Runtime part of S"
;/\ It returns address and length of an in-line counted string.
;/  R>  COUNT OVER + 1+ >R ;


cbigZdticcend:
/*	mov	%rax,-0x08(%rbp)	\ 4018E3 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 4018E7 58 
/*	lea	0x01(%rax),%rdx	\ 4018E8 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 4018EC 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x10(%rbp)	\ 4018F0 	*/.byte 0x48,0x89,0x55,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 4018F4 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,%rax	\ 4018F8 	*/.byte 0x48,0x89,0xD0
/*	add	-0x18(%rbp),%rax	\ 4018FB 	*/.byte 0x48,0x3,0x45,0xE8
/*	lea	0x01(%rax),%rax	\ 4018FF 	*/.byte 0x48,0x8D,0x40,0x1
	Push	%rax	\ 401903 50 
/*	mov	-0x10(%rbp),%rax	\ 401904 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 401908 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 40190C C3 
;/
;/: (C")  ( --- c-addr )
;/   R> DUP COUNT +  >R ;


cbigCdticcend:
/*	mov	%rax,-0x08(%rbp)	\ 40190D 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 401911 58 
/*	mov	%rax,-0x10(%rbp)	\ 401912 	*/.byte 0x48,0x89,0x45,0xF0
/*	movzbq	(%rax),%rdx	\ 401916 	*/.byte 0x48,0xF,0xB6,0x10
/*	lea	0x01(%rdx,%rax,1),%rax	\ 40191A 	*/.byte 0x48,0x8D,0x44,0x2,0x1
	Push	%rax	\ 40191F 50 
/*	mov	-0x10(%rbp),%rax	\ 401920 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 401924 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 401928 C3 
;/
;/\+ '(C") ' (C") TO '(C")
;/
;/: DEPTH ( -- n ) \ 94
;/  SP@ SP0 @ - NEGATE  3 ARSHIFT ;


DEPTH:
	call	0x400465  { SP@ } 	\ 401929 E8 37 EB FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 40192E 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401628  { ORIGVIEWLINK+12  } (%rip),%rax	\ 401932 	*/.byte 0x48,0x8B,0x5,0xEF,0xFC,0xFF,0xFF
/*	sub	-0x08(%rbp),%rax	\ 401939 	*/.byte 0x48,0x2B,0x45,0xF8
/*	sar	$0x03,%rax	\ 40193D 	*/.byte 0x48,0xC1,0xF8,0x3
	ret		\ 401941 C3 
;/
;/\ T: ERASE 0 FILL ;
;/
;/: WCOUNT DUP W@ SWAP 2+ SWAP ;


WCOUNT:
/*	mov	%rax,-0x08(%rbp)	\ 401942 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzw	(%rax),%eax	\ 401946 	*/.byte 0xF,0xB7,0x0
/*	mov	-0x08(%rbp),%rdx	\ 401949 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 40194D 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x01(%rdx),%rax	\ 401951 	*/.byte 0x48,0x8D,0x42,0x1
/*	lea	0x01(%rax),%rax	\ 401955 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	-0x08(%rbp),%rdx	\ 401959 	*/.byte 0x48,0x8B,0x55,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 40195D 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,%rax	\ 401961 	*/.byte 0x48,0x89,0xD0
/*	lea	-0x08(%rbp),%rbp	\ 401964 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 401968 C3 
;/
;/: SPACE BL EMIT ;


SPACE:
/*	mov	%rax,-0x08(%rbp)	\ 401969 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x20,%eax	\ 40196D 	*/.byte 0xB8,0x20,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 401972 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40170F  { EMIT } 	\ 401976 E8 94 FD FF FF 
	ret		\ 40197B C3 
;/
;/: 0MAX 0 MAX ;


0MAX:
/*	mov	%rax,-0x08(%rbp)	\ 40197C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 401980 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 401985 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovl/*	cmov	-0x08(%rbp),%rax	\ 401989 	*/.byte 0x48,0xF,0x4C,0x45,0xF8
	ret		\ 40198E C3 
;/
;/: 3DUP DUP 2OVER ROT ;


3DUP:
/*	mov	%rax,-0x08(%rbp)	\ 40198F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x08(%rbp),%rdx	\ 401993 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rax,-0x10(%rbp)	\ 401997 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	0x00(%rbp),%rax	\ 40199B 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rax,-0x18(%rbp)	\ 40199F 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	-0x10(%rbp),%rax	\ 4019A3 	*/.byte 0x48,0x8B,0x45,0xF0
/*	mov	%rdx,-0x10(%rbp)	\ 4019A7 	*/.byte 0x48,0x89,0x55,0xF0
/*	lea	-0x18(%rbp),%rbp	\ 4019AB 	*/.byte 0x48,0x8D,0x6D,0xE8
	ret		\ 4019AF C3 
;/
;/: BOUNDS OVER + SWAP ;


BOUNDS:
/*	add	0x00(%rbp),%rax	\ 4019B0 	*/.byte 0x48,0x3,0x45,0x0
/*	mov	0x00(%rbp),%rdx	\ 4019B4 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 4019B8 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 4019BC 	*/.byte 0x48,0x89,0xD0
	ret		\ 4019BF C3 
;/
;/: U<= U> 0= ;


Ulessequ:
/*	cmp	0x00(%rbp),%rax	\ 4019C0 	*/.byte 0x48,0x3B,0x45,0x0
/*	sbb	%rax,%rax	\ 4019C4 	*/.byte 0x48,0x19,0xC0
/*	subq	$0x01,%rax	\ 4019C7 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 4019CB 	*/.byte 0x48,0x19,0xC0
/*	lea	0x08(%rbp),%rbp	\ 4019CE 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 4019D2 C3 
;/
;/: CS-ROLL  2* 1+ DUP>R ROLL R> ROLL ;


CSsubROLL:
/*	lea	(%rax,%rax,1),%rax	\ 4019D3 	*/.byte 0x48,0x8D,0x4,0x0
/*	lea	0x01(%rax),%rax	\ 4019D7 	*/.byte 0x48,0x8D,0x40,0x1
	Push	%rax	\ 4019DB 50 
	call	0x40089B  { ROLL } 	\ 4019DC E8 BA EE FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 4019E1 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 4019E5 58 
/*	lea	-0x08(%rbp),%rbp	\ 4019E6 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40089B  { ROLL } 	\ 4019EA E8 AC EE FF FF 
	ret		\ 4019EF C3 
;/
;/: D2*      ( D -- D*2 )        2DUP D+     ;


D2mul:
/*	mov	0x00(%rbp),%rdx	\ 4019F0 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 4019F4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 4019F8 	*/.byte 0x48,0x89,0x55,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 4019FC 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x4006ED  { D+ } 	\ 401A00 E8 E8 EC FF FF 
	ret		\ 401A05 C3 
;/: DABS     ( d -- ud )         DUP 0< IF DNEGATE THEN  ;


DABS:
	test	%rax,%rax	\ 401A06 48 85 C0 
/*	jNl	0x401A14  { DABS+E  } 	\ 401A09 	*/.byte 0xF,0x8D,0x5,0x0,0x0,0x0
	call	0x4006CE  { DNEGATE } 	\ 401A0F E8 BA EC FF FF 
	ret		\ 401A14 C3 
;/
;/: U/MOD 0 SWAP UM/MOD ;


UrslMOD:
/*	movq	$0x0,-0x08(%rbp)	\ 401A15 	*/.byte 0x48,0xC7,0x45,0xF8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 401A1D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4007D5  { UM/MOD } 	\ 401A21 E8 AF ED FF FF 
	ret		\ 401A26 C3 
;/
;/\ : U/ ( n1 n2 -- n1*n2 ) U/MOD  NIP ;
;/
;/\ : UMOD ( n1 n2 -- n1%n2 )  U/MOD DROP ;
;/
;/: MOVE ( addr1 addr2 u -- ) \ 94	
;/  >R 2DUP SWAP R@ + U<


MOVE:
	Push	%rax	\ 401A27 50 
/*	mov	0x00(%rbp),%rax	\ 401A28 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401A2C 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x08(%rbp),%rax	\ 401A30 	*/.byte 0x48,0x8B,0x45,0x8
/*	add	(%rsp),%rax	\ 401A34 	*/.byte 0x48,0x3,0x4,0x24
/*	cmp	%rax,-0x08(%rbp)	\ 401A38 	*/.byte 0x48,0x39,0x45,0xF8
/*	sbb	%rax,%rax	\ 401A3C 	*/.byte 0x48,0x19,0xC0
;/  IF 2DUP U<
	test	%rax,%rax	\ 401A3F 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 401A42 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401A46 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x401A96  { MOVE+6F  } 	\ 401A4A 	*/.byte 0xF,0x84,0x46,0x0,0x0,0x0
/*	mov	0x00(%rbp),%rdx	\ 401A50 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401A54 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 401A58 	*/.byte 0x48,0x89,0x55,0xF0
/*	cmp	%rax,-0x10(%rbp)	\ 401A5C 	*/.byte 0x48,0x39,0x45,0xF0
/*	sbb	%rax,%rax	\ 401A60 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 401A63 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 401A66 	*/.byte 0x48,0x8B,0x45,0xF8
;/     IF R> CMOVE> ELSE R> CMOVE THEN
/*	jz	0x401A83  { MOVE+5C  } 	\ 401A6A 	*/.byte 0xF,0x84,0x13,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401A70 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 401A74 58 
/*	lea	-0x08(%rbp),%rbp	\ 401A75 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400993  { CMOVE> } 	\ 401A79 E8 15 EF FF FF 
/*	jmp	0x401A91  { MOVE+6A  } 	\ 401A7E 	*/.byte 0xE9,0xE,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401A83 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 401A87 58 
/*	lea	-0x08(%rbp),%rbp	\ 401A88 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4009EE  { CMOVE } 	\ 401A8C E8 5D EF FF FF 
;/  ELSE R> CMOVE THEN ;
/*	jmp	0x401AA4  { MOVE+7D  } 	\ 401A91 	*/.byte 0xE9,0xE,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401A96 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 401A9A 58 
/*	lea	-0x08(%rbp),%rbp	\ 401A9B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x4009EE  { CMOVE } 	\ 401A9F E8 4A EF FF FF 
	ret		\ 401AA4 C3 
;/
;/255 CONSTANT MAXCOUNTED   \ maximum length of contents of a counted string
;/
;/
;/: "CLIP"        ( a1 n1 -- a1 n1' )   \ clip a string to between 0 and MAXCOUNTED
;/                MAXCOUNTED MIN 0 MAX ;


dticCLIPdtic:
/*	mov	%rax,-0x08(%rbp)	\ 401AA5 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0xFF,%eax	\ 401AA9 	*/.byte 0xB8,0xFF,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 401AAE 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovNle/*	cmov	-0x08(%rbp),%rax	\ 401AB2 	*/.byte 0x48,0xF,0x4F,0x45,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 401AB7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 401ABB 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 401AC0 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovl/*	cmov	-0x08(%rbp),%rax	\ 401AC4 	*/.byte 0x48,0xF,0x4C,0x45,0xF8
	ret		\ 401AC9 C3 
;/
;/: PLACE         ( addr len dest -- )
;/                SWAP "CLIP" SWAP


PLACE:
/*	mov	0x00(%rbp),%rdx	\ 401ACA 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401ACE 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 401AD2 	*/.byte 0x48,0x89,0x55,0xF8
/*	mov	$0xFF,%eax	\ 401AD6 	*/.byte 0xB8,0xFF,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 401ADB 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovNle/*	cmov	-0x08(%rbp),%rax	\ 401ADF 	*/.byte 0x48,0xF,0x4F,0x45,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 401AE4 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 401AE8 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	cmp	-0x08(%rbp),%rax	\ 401AED 	*/.byte 0x48,0x3B,0x45,0xF8
/*	cmovl/*	cmov	-0x08(%rbp),%rax	\ 401AF1 	*/.byte 0x48,0xF,0x4C,0x45,0xF8
/*	mov	0x00(%rbp),%rdx	\ 401AF6 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401AFA 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 401AFE 	*/.byte 0x48,0x89,0x55,0xF8
;/                2DUP 2>R
/*	xchg	%rdx,%rax	\ 401B02 	*/.byte 0x48,0x92
/*	mov	%rdx,-0x10(%rbp)	\ 401B04 	*/.byte 0x48,0x89,0x55,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 401B08 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400456  { 2>R } 	\ 401B0C E8 45 E9 FF FF 
;/                CHAR+ SWAP MOVE
/*	lea	0x01(%rax),%rax	\ 401B11 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	0x00(%rbp),%rdx	\ 401B15 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401B19 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 401B1D 	*/.byte 0x48,0x89,0xD0
	call	0x401A27  { MOVE } 	\ 401B20 E8 2 FF FF FF 
;/                2R> C! ;
	call	0x40041E  { 2R> } 	\ 401B25 E8 F4 E8 FF FF 
/*	mov	0x00(%rbp),%dl	\ 401B2A 	*/.byte 0x8A,0x55,0x0
/*	mov	%dl,(%rax)	\ 401B2D 	*/.byte 0x88,0x10
/*	mov	0x08(%rbp),%rax	\ 401B2F 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 401B33 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 401B37 C3 
;/
;/: $!   PLACE ;


dolsave:
	call	0x401ACA  { PLACE } 	\ 401B38 E8 8D FF FF FF 
	ret		\ 401B3D C3 
;/
;/: +PLACE        ( addr len dest -- ) \ append string addr,len to counted
;/                                     \ string dest
;/                >R "CLIP" MAXCOUNTED  R@ C@ -  MIN R>


addPLACE:
	Push	%rax	\ 401B3E 50 
/*	mov	$0xFF,%eax	\ 401B3F 	*/.byte 0xB8,0xFF,0x0,0x0,0x0
/*	cmp	0x00(%rbp),%rax	\ 401B44 	*/.byte 0x48,0x3B,0x45,0x0
/*	cmovNle/*	cmov	0x00(%rbp),%rax	\ 401B48 	*/.byte 0x48,0xF,0x4F,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 401B4D 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	$0x0,%eax	\ 401B51 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	cmp	0x00(%rbp),%rax	\ 401B56 	*/.byte 0x48,0x3B,0x45,0x0
/*	cmovl/*	cmov	0x00(%rbp),%rax	\ 401B5A 	*/.byte 0x48,0xF,0x4C,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 401B5F 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	$0xFF,%eax	\ 401B63 	*/.byte 0xB8,0xFF,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401B68 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	(%rsp),%rax	\ 401B6C 	*/.byte 0x48,0x8B,0x4,0x24
/*	movzb	(%rax),%eax	\ 401B70 	*/.byte 0xF,0xB6,0x0
/*		negq	%rax	\ 401B73 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 401B76 	*/.byte 0x48,0x3,0x45,0xF8
/*	cmp	0x00(%rbp),%rax	\ 401B7A 	*/.byte 0x48,0x3B,0x45,0x0
/*	cmovNle/*	cmov	0x00(%rbp),%rax	\ 401B7E 	*/.byte 0x48,0xF,0x4F,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 401B83 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rax,%rdx	\ 401B87 	*/.byte 0x48,0x89,0xC2
;/                                        \ clip total to MAXCOUNTED string
;/                2DUP 2>R
	pop	%rax	\ 401B8A 58 
/*	mov	%rax,-0x08(%rbp)	\ 401B8B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 401B8F 	*/.byte 0x48,0x89,0x55,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 401B93 	*/.byte 0x48,0x8D,0x6D,0xF0
	call	0x400456  { 2>R } 	\ 401B97 E8 BA E8 FF FF 
;/
;/                COUNT + SWAP MOVE
/*	movzbq	(%rax),%rdx	\ 401B9C 	*/.byte 0x48,0xF,0xB6,0x10
/*	lea	0x01(%rdx,%rax,1),%rax	\ 401BA0 	*/.byte 0x48,0x8D,0x44,0x2,0x1
/*	mov	0x00(%rbp),%rdx	\ 401BA5 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401BA9 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 401BAD 	*/.byte 0x48,0x89,0xD0
	call	0x401A27  { MOVE } 	\ 401BB0 E8 72 FE FF FF 
;/                2R> +! ;
	call	0x40041E  { 2R> } 	\ 401BB5 E8 64 E8 FF FF 
/*	mov	0x00(%rbp),%rdx	\ 401BBA 	*/.byte 0x48,0x8B,0x55,0x0
/*	add	%rdx,(%rax)	\ 401BBE 	*/.byte 0x48,0x1,0x10
/*	mov	0x08(%rbp),%rax	\ 401BC1 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 401BC5 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 401BC9 C3 
;/
;/: $+!  +PLACE ;


doladdsave:
	call	0x401B3E  { +PLACE } 	\ 401BCA E8 6F FF FF FF 
	ret		\ 401BCF C3 
;/
;/: C+PLACE       ( c1 a1 -- )    \ append char c1 to the counted string at a1
;/                DUP 1+! COUNT + 1- C! ;


CaddPLACE:
/*	incq	(%rax)	\ 401BD0 	*/.byte 0x48,0xFF,0x0
/*	movzbq	(%rax),%rdx	\ 401BD3 	*/.byte 0x48,0xF,0xB6,0x10
/*	lea	0x00(%rdx,%rax,1),%rax	\ 401BD7 	*/.byte 0x48,0x8D,0x44,0x2,0x0
/*	mov	0x00(%rbp),%dl	\ 401BDC 	*/.byte 0x8A,0x55,0x0
/*	mov	%dl,(%rax)	\ 401BDF 	*/.byte 0x88,0x10
/*	mov	0x08(%rbp),%rax	\ 401BE1 	*/.byte 0x48,0x8B,0x45,0x8
/*	lea	0x10(%rbp),%rbp	\ 401BE5 	*/.byte 0x48,0x8D,0x6D,0x10
	ret		\ 401BE9 C3 
;/
;/: $C+! C+PLACE  ;


dolCaddsave:
	call	0x401BD0  { C+PLACE } 	\ 401BEA E8 E1 FF FF FF 
	ret		\ 401BEF C3 
;/
;/: +NULL         ( a1 -- )       \ append a NULL just beyond the counted chars
;/                COUNT + 0 SWAP C! ;


addNULL:
/*	movzbq	(%rax),%rdx	\ 401BF0 	*/.byte 0x48,0xF,0xB6,0x10
/*	lea	0x01(%rdx,%rax,1),%rax	\ 401BF4 	*/.byte 0x48,0x8D,0x44,0x2,0x1
/*	movq	$0x0,-0x08(%rbp)	\ 401BF9 	*/.byte 0x48,0xC7,0x45,0xF8,0x0,0x0,0x0,0x0
/*	mov	-0x08(%rbp),%dl	\ 401C01 	*/.byte 0x8A,0x55,0xF8
/*	mov	%dl,(%rax)	\ 401C04 	*/.byte 0x88,0x10
/*	mov	0x00(%rbp),%rax	\ 401C06 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401C0A 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 401C0E C3 
;/
;/
;/: zplace        \ caddr len zaddr --
;/\ *G Copy the string caddr/len to zaddr as a 0 terminated string.
;/  2dup + >r				\ save location of zero


zplace:
/*	mov	0x00(%rbp),%rdx	\ 401C0F 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401C13 	*/.byte 0x48,0x89,0x45,0xF8
/*	add	%rdx,%rax	\ 401C17 	*/.byte 0x48,0x1,0xD0
	Push	%rax	\ 401C1A 50 
/*	mov	-0x08(%rbp),%rax	\ 401C1B 	*/.byte 0x48,0x8B,0x45,0xF8
;/  swap move				\ copy string
/*	mov	0x00(%rbp),%rdx	\ 401C1F 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401C23 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 401C27 	*/.byte 0x48,0x89,0xD0
	call	0x401A27  { MOVE } 	\ 401C2A E8 F8 FD FF FF 
;/  0 r> c!				\ terminate afterwards in case of overlap
/*	mov	%rax,-0x08(%rbp)	\ 401C2F 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 401C33 58 
/*	movb	$0x00,(%rax)	\ 401C34 	*/.byte 0xC6,0x0,0x0
/*	mov	-0x08(%rbp),%rax	\ 401C37 	*/.byte 0x48,0x8B,0x45,0xF8
;/;
	ret		\ 401C3B C3 
;/
;/: COMPARE ( addr1 u1 addr2 u2 --- diff )
;/\ Compare two strings. diff is negative if addr1 u1 is smaller, 0 if it
;/\ is equal and positive if it is greater than addr2 u2.
;/
;/  ROT 2DUP - >R        


COMPARE:
/*	mov	0x00(%rbp),%rdx	\ 401C3C 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401C40 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	0x08(%rbp),%rax	\ 401C44 	*/.byte 0x48,0x8B,0x45,0x8
/*	mov	%rdx,0x08(%rbp)	\ 401C48 	*/.byte 0x48,0x89,0x55,0x8
/*	mov	0x00(%rbp),%rdx	\ 401C4C 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401C50 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 401C54 	*/.byte 0x48,0x89,0x55,0xF0
/*		negq	%rax	\ 401C58 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 401C5B 	*/.byte 0x48,0x3,0x45,0xF0
	Push	%rax	\ 401C5F 50 
/*	mov	-0x08(%rbp),%rax	\ 401C60 	*/.byte 0x48,0x8B,0x45,0xF8
;/  MIN DUP IF
/*	cmp	0x00(%rbp),%rax	\ 401C64 	*/.byte 0x48,0x3B,0x45,0x0
/*	cmovNle/*	cmov	0x00(%rbp),%rax	\ 401C68 	*/.byte 0x48,0xF,0x4F,0x45,0x0
/*	mov	%rax,0x00(%rbp)	\ 401C6D 	*/.byte 0x48,0x89,0x45,0x0
	test	%rax,%rax	\ 401C71 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 401C74 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401C78 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x401D26  { COMPARE+EA  } 	\ 401C7C 	*/.byte 0xF,0x84,0xA4,0x0,0x0,0x0
;/   >R
	Push	%rax	\ 401C82 50 
/*	mov	0x00(%rbp),%rax	\ 401C83 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401C87 	*/.byte 0x48,0x8D,0x6D,0x8
;/   BEGIN
;/    OVER C@ OVER C@ - IF
/*	mov	%rax,-0x08(%rbp)	\ 401C8B 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 401C8F 	*/.byte 0x48,0x8B,0x45,0x0
/*	movzb	(%rax),%eax	\ 401C93 	*/.byte 0xF,0xB6,0x0
/*	mov	%rax,-0x10(%rbp)	\ 401C96 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	-0x08(%rbp),%rax	\ 401C9A 	*/.byte 0x48,0x8B,0x45,0xF8
/*	movzb	(%rax),%eax	\ 401C9E 	*/.byte 0xF,0xB6,0x0
/*		negq	%rax	\ 401CA1 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 401CA4 	*/.byte 0x48,0x3,0x45,0xF0
	test	%rax,%rax	\ 401CA8 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 401CAB 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x401CDC  { COMPARE+A0  } 	\ 401CAF 	*/.byte 0xF,0x84,0x27,0x0,0x0,0x0
;/     SWAP C@ SWAP C@ -
/*	mov	0x00(%rbp),%rdx	\ 401CB5 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401CB9 	*/.byte 0x48,0x89,0x45,0x0
/*	movzb	(%rdx),%eax	\ 401CBD 	*/.byte 0xF,0xB6,0x2
/*	mov	0x00(%rbp),%rdx	\ 401CC0 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401CC4 	*/.byte 0x48,0x89,0x45,0x0
/*	movzb	(%rdx),%eax	\ 401CC8 	*/.byte 0xF,0xB6,0x2
/*		negq	%rax	\ 401CCB 	*/.byte 0x48,0xF7,0xD8
/*	add	0x00(%rbp),%rax	\ 401CCE 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401CD2 	*/.byte 0x48,0x8D,0x6D,0x8
;/		 2RDROP	EXIT
	call	0x400413  { 2RDROP } 	\ 401CD6 E8 38 E7 FF FF 
	ret		\ 401CDB C3 
;/    THEN 
;/    1+ SWAP 1+ SWAP
/*	lea	0x01(%rax),%rax	\ 401CDC 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	0x00(%rbp),%rdx	\ 401CE0 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401CE4 	*/.byte 0x48,0x89,0x45,0x0
/*	lea	0x01(%rdx),%rax	\ 401CE8 	*/.byte 0x48,0x8D,0x42,0x1
/*	mov	0x00(%rbp),%rdx	\ 401CEC 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401CF0 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 401CF4 	*/.byte 0x48,0x89,0xD0
;/    R> 1- DUP >R 0=
/*	mov	%rax,-0x08(%rbp)	\ 401CF7 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 401CFB 58 
/*	lea	-0x01(%rax),%rax	\ 401CFC 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 401D00 	*/.byte 0x48,0x89,0x45,0xF0
	Push	%rax	\ 401D04 50 
/*	mov	-0x10(%rbp),%rax	\ 401D05 	*/.byte 0x48,0x8B,0x45,0xF0
/*	subq	$0x01,%rax	\ 401D09 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 401D0D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 401D10 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 401D13 	*/.byte 0x48,0x8B,0x45,0xF8
;/   UNTIL R>
/*	jz	0x401C8B  { COMPARE+4F  } 	\ 401D17 	*/.byte 0xF,0x84,0x6E,0xFF,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 401D1D 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 401D21 58 
/*	lea	-0x08(%rbp),%rbp	\ 401D22 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  THEN DROP
	pop	%rax	\ 401D26 58 
/*		negq	%rax	\ 401D27 	*/.byte 0x48,0xF7,0xD8
/*	lea	0x10(%rbp),%rbp	\ 401D2A 	*/.byte 0x48,0x8D,0x6D,0x10
;/  2DROP R> NEGATE
;/;
	ret		\ 401D2E C3 
;/
;/: SCAN ( c-addr1 u1 c --- c-addr2 u2 )
;/\ Find the first occurrence of character c in the string c-addr1 u1
;/\ c-addr2 u2 is the remaining part of the string starting with that char.
;/\ It is a zero-length string if c was not found.
;/  BEGIN
;/   OVER


SCAN:
/*	mov	%rax,-0x08(%rbp)	\ 401D2F 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 401D33 	*/.byte 0x48,0x8B,0x45,0x0
	test	%rax,%rax	\ 401D37 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 401D3A 	*/.byte 0x48,0x8B,0x45,0xF8
;/  WHILE
/*	jz	0x401DB6  { SCAN+87  } 	\ 401D3E 	*/.byte 0xF,0x84,0x72,0x0,0x0,0x0
;/   ROT DUP C@ >R OVER R> =
/*	mov	0x00(%rbp),%rdx	\ 401D44 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401D48 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	0x08(%rbp),%rax	\ 401D4C 	*/.byte 0x48,0x8B,0x45,0x8
/*	mov	%rdx,0x08(%rbp)	\ 401D50 	*/.byte 0x48,0x89,0x55,0x8
/*	mov	%rax,-0x08(%rbp)	\ 401D54 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 401D58 	*/.byte 0xF,0xB6,0x0
	Push	%rax	\ 401D5B 50 
/*	mov	0x00(%rbp),%rax	\ 401D5C 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rax,-0x10(%rbp)	\ 401D60 	*/.byte 0x48,0x89,0x45,0xF0
	pop	%rax	\ 401D64 58 
/*	xor	-0x10(%rbp),%rax	\ 401D65 	*/.byte 0x48,0x33,0x45,0xF0
/*	subq	$0x01,%rax	\ 401D69 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 401D6D 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 401D70 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 401D73 	*/.byte 0x48,0x8B,0x45,0xF8
;/   IF -ROT DROP
/*	jz	0x401D96  { SCAN+67  } 	\ 401D77 	*/.byte 0xF,0x84,0x19,0x0,0x0,0x0
/*	mov	0x08(%rbp),%rdx	\ 401D7D 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rax,0x08(%rbp)	\ 401D81 	*/.byte 0x48,0x89,0x45,0x8
/*	mov	0x00(%rbp),%rax	\ 401D85 	*/.byte 0x48,0x8B,0x45,0x0
/*	mov	%rdx,0x00(%rbp)	\ 401D89 	*/.byte 0x48,0x89,0x55,0x0
/*	mov	0x00(%rbp),%rax	\ 401D8D 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401D91 	*/.byte 0x48,0x8D,0x6D,0x8
;/   BREAK
	ret		\ 401D95 C3 
;/   1+ -ROT SWAP 1- SWAP
/*	lea	0x01(%rax),%rax	\ 401D96 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	0x08(%rbp),%rdx	\ 401D9A 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	%rax,0x08(%rbp)	\ 401D9E 	*/.byte 0x48,0x89,0x45,0x8
/*	lea	-0x01(%rdx),%rax	\ 401DA2 	*/.byte 0x48,0x8D,0x42,0xFF
/*	mov	0x00(%rbp),%rdx	\ 401DA6 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401DAA 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 401DAE 	*/.byte 0x48,0x89,0xD0
;/  REPEAT DROP
/*	jmp	0x401D2F  { SCAN } 	\ 401DB1 	*/.byte 0xE9,0x79,0xFF,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 401DB6 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401DBA 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 401DBE C3 
;/
;/: SEARCH ( c-addr1 u1 c-addr2 u2 -- c-addr3 u3 flag ) \ 94 STRING
;/    2>R 2DUP


SEARCH:
	call	0x400456  { 2>R } 	\ 401DBF E8 92 E6 FF FF 
/*	mov	0x00(%rbp),%rdx	\ 401DC4 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,-0x08(%rbp)	\ 401DC8 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,-0x10(%rbp)	\ 401DCC 	*/.byte 0x48,0x89,0x55,0xF0
/*	lea	-0x10(%rbp),%rbp	\ 401DD0 	*/.byte 0x48,0x8D,0x6D,0xF0
;/    BEGIN
;/      DUP 1+ R@ >
/*	mov	%rax,-0x08(%rbp)	\ 401DD4 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x01(%rax),%rax	\ 401DD8 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 401DDC 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	(%rsp),%rax	\ 401DE0 	*/.byte 0x48,0x8B,0x4,0x24
/*	cmp	-0x10(%rbp),%rax	\ 401DE4 	*/.byte 0x48,0x3B,0x45,0xF0
	setl	%al	\ 401DE8 F 9C C0 
/*		neg	%al	\ 401DEB 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 401DED 	*/.byte 0x48,0xF,0xBE,0xC0
	test	%rax,%rax	\ 401DF1 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 401DF4 	*/.byte 0x48,0x8B,0x45,0xF8
;/    WHILE
/*	jz	0x401E81  { SEARCH+C2  } 	\ 401DF8 	*/.byte 0xF,0x84,0x83,0x0,0x0,0x0
;/      OVER 2R@ TUCK COMPARE 0=
/*	mov	%rax,-0x08(%rbp)	\ 401DFE 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 401E02 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	-0x08(%rbp),%rbp	\ 401E06 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40043F  { 2R@ } 	\ 401E0A E8 30 E6 FF FF 
/*	mov	0x00(%rbp),%rdx	\ 401E0F 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401E13 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,-0x08(%rbp)	\ 401E17 	*/.byte 0x48,0x89,0x55,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 401E1B 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401C3C  { COMPARE } 	\ 401E1F E8 18 FE FF FF 
/*	subq	$0x01,%rax	\ 401E24 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 401E28 	*/.byte 0x48,0x19,0xC0
;/      IF 2RDROP 2SWAP 2DROP TRUE EXIT THEN
	test	%rax,%rax	\ 401E2B 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 401E2E 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401E32 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x401E61  { SEARCH+A2  } 	\ 401E36 	*/.byte 0xF,0x84,0x25,0x0,0x0,0x0
	call	0x400413  { 2RDROP } 	\ 401E3C E8 D2 E5 FF FF 
/*	mov	0x00(%rbp),%rcx	\ 401E41 	*/.byte 0x48,0x8B,0x4D,0x0
/*	mov	0x08(%rbp),%rdx	\ 401E45 	*/.byte 0x48,0x8B,0x55,0x8
/*	mov	0x10(%rbp),%rbx	\ 401E49 	*/.byte 0x48,0x8B,0x5D,0x10
/*	mov	%rcx,0x10(%rbp)	\ 401E4D 	*/.byte 0x48,0x89,0x4D,0x10
/*	mov	%rax,0x08(%rbp)	\ 401E51 	*/.byte 0x48,0x89,0x45,0x8
/*	movq	$-0x1,%rax	\ 401E55 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	0x08(%rbp),%rbp	\ 401E5C 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 401E60 C3 
;/      1- SWAP 1+ SWAP
/*	lea	-0x01(%rax),%rax	\ 401E61 	*/.byte 0x48,0x8D,0x40,0xFF
/*	mov	0x00(%rbp),%rdx	\ 401E65 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401E69 	*/.byte 0x48,0x89,0x45,0x0
/*	lea	0x01(%rdx),%rax	\ 401E6D 	*/.byte 0x48,0x8D,0x42,0x1
/*	mov	0x00(%rbp),%rdx	\ 401E71 	*/.byte 0x48,0x8B,0x55,0x0
/*	mov	%rax,0x00(%rbp)	\ 401E75 	*/.byte 0x48,0x89,0x45,0x0
/*	mov	%rdx,%rax	\ 401E79 	*/.byte 0x48,0x89,0xD0
;/    REPEAT 2RDROP 2DROP 0
/*	jmp	0x401DD4  { SEARCH+15  } 	\ 401E7C 	*/.byte 0xE9,0x53,0xFF,0xFF,0xFF
	call	0x400413  { 2RDROP } 	\ 401E81 E8 8D E5 FF FF 
/*	mov	$0x0,%eax	\ 401E86 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	0x08(%rbp),%rbp	\ 401E8B 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 401E8F C3 
;/
;/: REL@ ( ADDR -- ADDR' )
;/         DUP SL@ + ;


RELload:
/*	mov	%rax,-0x08(%rbp)	\ 401E90 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 401E94 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x40048A  { SL@ } 	\ 401E98 E8 ED E5 FF FF 
/*	add	0x00(%rbp),%rax	\ 401E9D 	*/.byte 0x48,0x3,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401EA1 	*/.byte 0x48,0x8D,0x6D,0x8
	ret		\ 401EA5 C3 
;/
;/: <'>
;/R>  1+ DUP 4 + >R  REL@ 4 + ;


lessticgreat:
/*	mov	%rax,-0x08(%rbp)	\ 401EA6 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 401EAA 58 
/*	lea	0x01(%rax),%rax	\ 401EAB 	*/.byte 0x48,0x8D,0x40,0x1
/*	mov	%rax,-0x10(%rbp)	\ 401EAF 	*/.byte 0x48,0x89,0x45,0xF0
/*	lea	0x04(%rax),%rax	\ 401EB3 	*/.byte 0x48,0x8D,0x40,0x4
	Push	%rax	\ 401EB7 50 
/*	mov	-0x10(%rbp),%rax	\ 401EB8 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 401EBC 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401E90  { REL@ } 	\ 401EC0 E8 CB FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 401EC5 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x04(%rax),%rax	\ 401EC9 	*/.byte 0x48,0x8D,0x40,0x4
	ret		\ 401ECD C3 
;/
;/T: >BODY 5 + ;


greatBODY:
/*	mov	%rax,-0x08(%rbp)	\ 401ECE 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x05(%rax),%rax	\ 401ED2 	*/.byte 0x48,0x8D,0x40,0x5
	ret		\ 401ED6 C3 
;/
;/$20 CONSTANT BL
;/8 CONSTANT CELL
;/0 CONSTANT FALSE
;/-1 CONSTANT TRUE
;/
;/
;/: CATCH ( i*x xt -- j*x 0 | i*x n ) \ 94 EXCEPTION
;/\ Положить на стек исключений кадр перехвата исключительных ситуаций
;/\ и выполнить токен xt (как по EXECUTE) таким образом, чтобы управление
;/\ могло быть передано в точку сразу после CATCH, если во время выполнения
;/\ xt выполняется THROW.
;/\ Если выполнение xt заканчивается нормально (т.е. кадр исключений,
;/\ положенный на стек словом CATCH не был взят выполнением THROW),
;/\ взять кадр исключений и вернуть ноль на вершину стека данных,
;/\ остальные элементы стека возвращаются xt EXECUTE. Иначе остаток
;/\ семантики выполнения дается THROW.
;/\  <SET-EXC-HANDLER>
;/
;/  SP@ >R  HANDLER @  >R


CATCH:
	call	0x400465  { SP@ } 	\ 401ED7 E8 89 E5 FF FF 
	Push	%rax	\ 401EDC 50 
/*	push	0x401100  { SLEEP+33  } (%rip)	\ 401EDD 	*/.byte 0xFF,0x35,0x1D,0xF2,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 401EE3 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401EE7 	*/.byte 0x48,0x8D,0x6D,0x8
;/  RP@ HANDLER !
	call	0x4003EE  { RP@ } 	\ 401EEB E8 FE E4 FF FF 
/*	mov	%rax,0x401100  { SLEEP+33  } (%rip)	\ 401EF0 	*/.byte 0x48,0x89,0x5,0x9,0xF2,0xFF,0xFF
/*	mov	0x00(%rbp),%rax	\ 401EF7 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401EFB 	*/.byte 0x48,0x8D,0x6D,0x8
;/  EXECUTE
	call	0x40047D  { EXECUTE } 	\ 401EFF E8 79 E5 FF FF 
;/  R> HANDLER !
/*	mov	%rax,-0x08(%rbp)	\ 401F04 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 401F08 8F 45 F0 
/*	lea	0x401100  { SLEEP+33  } (%rip),%rax	\ 401F0B 	*/.byte 0x48,0x8D,0x5,0xEE,0xF1,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 401F12 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 401F16 	*/.byte 0x48,0x89,0x10
/*	mov	-0x08(%rbp),%rax	\ 401F19 	*/.byte 0x48,0x8B,0x45,0xF8
;/  RDROP
/*	lea	0x08(%rsp),%rsp	\ 401F1D 	*/.byte 0x48,0x8D,0x64,0x24,0x8
;/  0
/*	mov	%rax,-0x08(%rbp)	\ 401F22 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 401F26 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 401F2B 	*/.byte 0x48,0x8D,0x6D,0xF8
;/;
	ret		\ 401F2F C3 
;/
;/' CATCH TO 'CATCH
;/
;/: THROW
;/\ Если любые биты n ненулевые, взять верхний кадр исключений со стека
;/\ исключений, включая все на стеке возвратов над этим кадром. Затем
;/\ восстановить спецификации входного потока, который использовался перед
;/\ соответствующим CATCH, и установить глубины всех стеков, определенных
;/\ в этом Стандарте, в то состояние, которое было сохранено в кадре
;/\ исключений (i - это то же число, что и i во входных аргументах
;/\ соответствующего CATCH), положить n на вершину стека данных и передать
;/\ управление в точку сразу после CATCH, которое положило этот кадр
;/\ исключений.
;/\ Если вершина стека не ноль, и на стеке исключений есть кадр 
;/\ исключений, то поведение следующее:
;/\   Если n=-1, выполнить функцию ABORT (версию ABORT из слов CORE), 
;/\   не выводя сообщений.
;/\   Если n=-2, выполнить функцию ABORT" (версию ABORT" из слов CORE), 
;/\   выводя символы ccc, ассоциированные с ABORT", генерирующим THROW.
;/\   Иначе система может вывести на дисплей зависящее от реализации 
;/\   сообщение об условии, соответствующем THROW с кодом n. Затем 
;/\   система выполнит функцию ABORT (версию ABORT из CORE).
;/  ?DUP


THROW:
	call	0x4007EC  { ?DUP } 	\ 401F30 E8 B7 E8 FF FF 
;/  IF
	test	%rax,%rax	\ 401F35 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 401F38 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401F3C 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x401FA1  { THROW+71  } 	\ 401F40 	*/.byte 0xF,0x84,0x5B,0x0,0x0,0x0
;/   ( SAVEERR )  HANDLER @ \ A@ 
/*	mov	%rax,-0x08(%rbp)	\ 401F46 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x401100  { SLEEP+33  } (%rip),%rax	\ 401F4A 	*/.byte 0x48,0x8B,0x5,0xAF,0xF1,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 401F51 	*/.byte 0x48,0x8D,0x6D,0xF8
;/     ?DUP
	call	0x4007EC  { ?DUP } 	\ 401F55 E8 92 E8 FF FF 
;/     IF
	test	%rax,%rax	\ 401F5A 48 85 C0 
/*	mov	0x00(%rbp),%rax	\ 401F5D 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401F61 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x401FA1  { THROW+71  } 	\ 401F65 	*/.byte 0xF,0x84,0x36,0x0,0x0,0x0
;/      RP!
	call	0x400405  { RP! } 	\ 401F6B E8 95 E4 FF FF 
;/        R> HANDLER !
/*	mov	%rax,-0x08(%rbp)	\ 401F70 	*/.byte 0x48,0x89,0x45,0xF8
	pop	-0x10(%rbp)	\ 401F74 8F 45 F0 
/*	lea	0x401100  { SLEEP+33  } (%rip),%rax	\ 401F77 	*/.byte 0x48,0x8D,0x5,0x82,0xF1,0xFF,0xFF
/*	mov	-0x10(%rbp),%rdx	\ 401F7E 	*/.byte 0x48,0x8B,0x55,0xF0
/*	mov	%rdx,(%rax)	\ 401F82 	*/.byte 0x48,0x89,0x10
	pop	%rax	\ 401F85 58 
/*	mov	-0x08(%rbp),%rdx	\ 401F86 	*/.byte 0x48,0x8B,0x55,0xF8
;/        R> SWAP >R
/*	mov	%rax,-0x08(%rbp)	\ 401F8A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rdx,%rax	\ 401F8E 	*/.byte 0x48,0x89,0xD0
	Push	%rax	\ 401F91 50 
/*	mov	-0x08(%rbp),%rax	\ 401F92 	*/.byte 0x48,0x8B,0x45,0xF8
;/        SP! DROP R>
	call	0x400471  { SP! } 	\ 401F96 E8 D6 E4 FF FF 
	pop	%rax	\ 401F9B 58 
;/     ELSE
/*	jmp	0x401FA1  { THROW+71  } 	\ 401F9C 	*/.byte 0xE9,0x0,0x0,0x0,0x0
;/\ FATAL-HANDLER
;/ THEN
;/  THEN
;/;
	ret		\ 401FA1 C3 
;/
;/' THROW TO 'THROW 
;/
;/T: ABORT -1 THROW ;


ABORT:
/*	mov	%rax,-0x08(%rbp)	\ 401FA2 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1,%rax	\ 401FA6 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 401FAD 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 401FB1 E8 7A FF FF FF 
	ret		\ 401FB6 C3 
;/
;/: ?THROW        \ k*x flag throw-code -- k*x|i*x n
;/\ *G Perform a *\fo{THROW} of value *\i{throw-code} if flag is non-zero.
;/  SWAP IF THROW THEN DROP


queTHROW:
/*	mov	0x00(%rbp),%rdx	\ 401FB7 	*/.byte 0x48,0x8B,0x55,0x0
	test	%rdx,%rdx	\ 401FBB 48 85 D2 
/*	lea	0x08(%rbp),%rbp	\ 401FBE 	*/.byte 0x48,0x8D,0x6D,0x8
/*	jz	0x401FCD  { ?THROW+16  } 	\ 401FC2 	*/.byte 0xF,0x84,0x5,0x0,0x0,0x0
	call	0x401F30  { THROW } 	\ 401FC8 E8 63 FF FF FF 
/*	mov	0x00(%rbp),%rax	\ 401FCD 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 401FD1 	*/.byte 0x48,0x8D,0x6D,0x8
;/;
	ret		\ 401FD5 C3 
;/
;/: SHORT? ( n -- -129 < n < 128 )
;/  0x80 + 0x100 U< ;


SHORTque:
/*	lea	0x80(%rax),%rax	\ 401FD6 	*/.byte 0x48,0x8D,0x80,0x80,0x0,0x0,0x0
/*	cmp	$0x100,%rax	\ 401FDD 	*/.byte 0x48,0x3D,0x0,0x1,0x0,0x0
/*	sbb	%rax,%rax	\ 401FE3 	*/.byte 0x48,0x19,0xC0
	ret		\ 401FE6 C3 
;/
;/: LONG? ( n -- -2147483648<n<2147483647 )
;/	$80000000 + $100000000 U< ;


LONGque:
/*	mov	%rax,-0x08(%rbp)	\ 401FE7 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x80000000,%eax	\ 401FEB 	*/.byte 0xB8,0x0,0x0,0x0,0x80
/*	add	-0x08(%rbp),%rax	\ 401FF0 	*/.byte 0x48,0x3,0x45,0xF8
/*	mov	%rax,-0x08(%rbp)	\ 401FF4 	*/.byte 0x48,0x89,0x45,0xF8
/*	movabs	$0x100000000,%rax	\ 401FF8 	*/.byte 0x48,0xB8,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0
/*	cmp	%rax,-0x08(%rbp)	\ 402002 	*/.byte 0x48,0x39,0x45,0xF8
/*	sbb	%rax,%rax	\ 402006 	*/.byte 0x48,0x19,0xC0
	ret		\ 402009 C3 
;/
;/: HH.
;/  DUP 0xF ANDC


HHdot:
/*	mov	%rax,-0x08(%rbp)	\ 40200A 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 40200E 	*/.byte 0x48,0x89,0x45,0xF0
/*	andq	$-0x10,%rax	\ 402012 	*/.byte 0x48,0x83,0xE0,0xF0
/*	mov	-0x08(%rbp),%rax	\ 402016 	*/.byte 0x48,0x8B,0x45,0xF8
;/  IF DUP 0xF AND >R
/*	jz	0x402041  { HH.+37  } 	\ 40201A 	*/.byte 0xF,0x84,0x21,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402020 	*/.byte 0x48,0x89,0x45,0xF8
/*	and	$0xF,%eax	\ 402024 	*/.byte 0x25,0xF,0x0,0x0,0x0
	Push	%rax	\ 402029 50 
/*	mov	$0x04,%cl	\ 40202A 	*/.byte 0xB1,0x4
/*	mov	-0x08(%rbp),%rax	\ 40202C 	*/.byte 0x48,0x8B,0x45,0xF8
;/	4 RSHIFT
	shrq	%cl,%rax	\ 402030 48 D3 E8 
;/	T_RECURSE R>
	call	0x40200A  { HH. } 	\ 402033 E8 D2 FF FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 402038 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 40203C 58 
/*	lea	-0x08(%rbp),%rbp	\ 40203D 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  THEN
;/    DUP 10 < 0= IF 7 + THEN 48 + EMIT
/*	mov	%rax,-0x08(%rbp)	\ 402041 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	%rax,-0x10(%rbp)	\ 402045 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	$0xA,%eax	\ 402049 	*/.byte 0xB8,0xA,0x0,0x0,0x0
/*	cmp	-0x10(%rbp),%rax	\ 40204E 	*/.byte 0x48,0x3B,0x45,0xF0
	setNle	%al	\ 402052 F 9F C0 
/*		neg	%al	\ 402055 	*/.byte 0xF6,0xD8
/*	movsbq	%al,%rax	\ 402057 	*/.byte 0x48,0xF,0xBE,0xC0
/*	subq	$0x01,%rax	\ 40205B 	*/.byte 0x48,0x83,0xE8,0x1
/*	sbb	%rax,%rax	\ 40205F 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 402062 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402065 	*/.byte 0x48,0x8B,0x45,0xF8
/*	jz	0x402077  { HH.+6D  } 	\ 402069 	*/.byte 0xF,0x84,0x8,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 40206F 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x07(%rax),%rax	\ 402073 	*/.byte 0x48,0x8D,0x40,0x7
/*	mov	%rax,-0x08(%rbp)	\ 402077 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	0x30(%rax),%rax	\ 40207B 	*/.byte 0x48,0x8D,0x40,0x30
	call	0x40170F  { EMIT } 	\ 40207F E8 8B F6 FF FF 
;/;
	ret		\ 402084 C3 
;/
;/
;/T: BYE 0 HALT ;


BYE:
/*	mov	%rax,-0x08(%rbp)	\ 402085 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	$0x0,%eax	\ 402089 	*/.byte 0xB8,0x0,0x0,0x0,0x0
/*	lea	-0x08(%rbp),%rbp	\ 40208E 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x400E1D  { HALT } 	\ 402092 E8 86 ED FF FF 
	ret		\ 402097 C3 
;/
;/
;/: ASCII-Z     ( addr len buff -- buff-z )        \ make an ascii string
;/   DUP >R $! R> COUNT OVER + 0 SWAP C! ;


ASCIIsubZ:
/*	mov	%rax,-0x08(%rbp)	\ 402098 	*/.byte 0x48,0x89,0x45,0xF8
	Push	%rax	\ 40209C 50 
/*	mov	-0x08(%rbp),%rax	\ 40209D 	*/.byte 0x48,0x8B,0x45,0xF8
	call	0x401B38  { $! } 	\ 4020A1 E8 92 FA FF FF 
/*	mov	%rax,-0x08(%rbp)	\ 4020A6 	*/.byte 0x48,0x89,0x45,0xF8
	pop	%rax	\ 4020AA 58 
/*	lea	0x01(%rax),%rdx	\ 4020AB 	*/.byte 0x48,0x8D,0x50,0x1
/*	movzbq	(%rax),%rax	\ 4020AF 	*/.byte 0x48,0xF,0xB6,0x0
/*	mov	%rdx,-0x10(%rbp)	\ 4020B3 	*/.byte 0x48,0x89,0x55,0xF0
/*	mov	%rax,-0x18(%rbp)	\ 4020B7 	*/.byte 0x48,0x89,0x45,0xE8
/*	mov	%rdx,%rax	\ 4020BB 	*/.byte 0x48,0x89,0xD0
/*	add	-0x18(%rbp),%rax	\ 4020BE 	*/.byte 0x48,0x3,0x45,0xE8
/*	movq	$0x0,-0x18(%rbp)	\ 4020C2 	*/.byte 0x48,0xC7,0x45,0xE8,0x0,0x0,0x0,0x0
/*	mov	-0x18(%rbp),%dl	\ 4020CA 	*/.byte 0x8A,0x55,0xE8
/*	mov	%dl,(%rax)	\ 4020CD 	*/.byte 0x88,0x10
/*	mov	-0x10(%rbp),%rax	\ 4020CF 	*/.byte 0x48,0x8B,0x45,0xF0
/*	lea	-0x08(%rbp),%rbp	\ 4020D3 	*/.byte 0x48,0x8D,0x6D,0xF8
	ret		\ 4020D7 C3 
;/
;/: ZCOUNT        \ zaddr -- zaddr len
;/\ *G A version of *\fo{COUNT} for zero terminated strings, returning
;/\ ** the address of the first character and the length.
;/  dup


ZCOUNT:
/*	mov	%rax,-0x08(%rbp)	\ 4020D8 	*/.byte 0x48,0x89,0x45,0xF8
/*	lea	-0x08(%rbp),%rbp	\ 4020DC 	*/.byte 0x48,0x8D,0x6D,0xF8
;/  begin
;/    dup c@ ( 0<> )
/*	mov	%rax,-0x08(%rbp)	\ 4020E0 	*/.byte 0x48,0x89,0x45,0xF8
/*	movzb	(%rax),%eax	\ 4020E4 	*/.byte 0xF,0xB6,0x0
	test	%rax,%rax	\ 4020E7 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 4020EA 	*/.byte 0x48,0x8B,0x45,0xF8
;/   while
/*	jz	0x4020FD  { ZCOUNT+25  } 	\ 4020EE 	*/.byte 0xF,0x84,0x9,0x0,0x0,0x0
;/     1+
/*	lea	0x01(%rax),%rax	\ 4020F4 	*/.byte 0x48,0x8D,0x40,0x1
;/  repeat
/*	jmp	0x4020E0  { ZCOUNT+8  } 	\ 4020F8 	*/.byte 0xE9,0xE3,0xFF,0xFF,0xFF
;/  over -
/*	mov	%rax,-0x08(%rbp)	\ 4020FD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 402101 	*/.byte 0x48,0x8B,0x45,0x0
/*		negq	%rax	\ 402105 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 402108 	*/.byte 0x48,0x3,0x45,0xF8
;/;
	ret		\ 40210C C3 
;/
;/: ASCIIZ> ZCOUNT ;


ASCIIZgreat:
	call	0x4020D8  { ZCOUNT } 	\ 40210D E8 C6 FF FF FF 
	ret		\ 402112 C3 
;/
;/$400 VALUE /SysPad


rslSysPad:
	call	0x400AF4  { DOVALUE } 	\ 402113 E8 DC E9 FF FF 

	DQ 0x400
;/
;/0 VALUE SysPadBuff

SysPadBuff:
	call	0x400AF4  { DOVALUE } 	\ 402120 E8 CF E9 FF FF 

	DQ 0x0
;/0 VALUE SysPAD

SysPAD:
	call	0x400AF4  { DOVALUE } 	\ 40212D E8 C2 E9 FF FF 

	DQ 0x0
;/0 VALUE SysPadEdge

SysPadEdge:
	call	0x400AF4  { DOVALUE } 	\ 40213A E8 B5 E9 FF FF 

	DQ 0x0
;/
;/: NEWSYSPADGET	\ u -- addr
;/  dup /SysPad u>

NEWSYSPADGET:
/*	mov	%rax,-0x08(%rbp)	\ 402147 	*/.byte 0x48,0x89,0x45,0xF8
/*	cmp	%rax,0x402118  { /SysPad+5  } (%rip)	\ 40214B 	*/.byte 0x48,0x39,0x5,0xC6,0xFF,0xFF,0xFF
/*	sbb	%rax,%rax	\ 402152 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 402155 48 85 C0 
/*	mov	-0x08(%rbp),%rax	\ 402158 	*/.byte 0x48,0x8B,0x45,0xF8
;/  IF  -419 throw  THEN
/*	jz	0x402176  { NEWSYSPADGET+2F  } 	\ 40215C 	*/.byte 0xF,0x84,0x14,0x0,0x0,0x0
/*	mov	%rax,-0x08(%rbp)	\ 402162 	*/.byte 0x48,0x89,0x45,0xF8
/*	movq	$-0x1A3,%rax	\ 402166 	*/.byte 0x48,0xC7,0xC0,0x5D,0xFE,0xFF,0xFF
/*	lea	-0x08(%rbp),%rbp	\ 40216D 	*/.byte 0x48,0x8D,0x6D,0xF8
	call	0x401F30  { THROW } 	\ 402171 E8 BA FD FF FF 
;/
;/  SysPad  SysPadEdge UMIN OVER - 
/*	mov	%rax,-0x08(%rbp)	\ 402176 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x402132  { SysPAD+5  } (%rip),%rax	\ 40217A 	*/.byte 0x48,0x8B,0x5,0xB1,0xFF,0xFF,0xFF
/*	mov	%rax,-0x10(%rbp)	\ 402181 	*/.byte 0x48,0x89,0x45,0xF0
/*	cmp	%rax,0x40213F  { SysPadEdge+5  } (%rip)	\ 402185 	*/.byte 0x48,0x39,0x5,0xB3,0xFF,0xFF,0xFF
/*	mov	0x40213F  { SysPadEdge+5  } (%rip),%rax	\ 40218C 	*/.byte 0x48,0x8B,0x5,0xAC,0xFF,0xFF,0xFF
/*	cmovNbe/*	cmov	-0x10(%rbp),%rax	\ 402193 	*/.byte 0x48,0xF,0x47,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 402198 	*/.byte 0x48,0x89,0x45,0xF0
/*	mov	-0x08(%rbp),%rax	\ 40219C 	*/.byte 0x48,0x8B,0x45,0xF8
/*		negq	%rax	\ 4021A0 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x10(%rbp),%rax	\ 4021A3 	*/.byte 0x48,0x3,0x45,0xF0
/*	mov	%rax,-0x10(%rbp)	\ 4021A7 	*/.byte 0x48,0x89,0x45,0xF0
;/  DUP SysPADBuff U<
/*	cmp	0x402125  { SysPadBuff+5  } (%rip),%rax	\ 4021AB 	*/.byte 0x48,0x3B,0x5,0x73,0xFF,0xFF,0xFF
/*	sbb	%rax,%rax	\ 4021B2 	*/.byte 0x48,0x19,0xC0
	test	%rax,%rax	\ 4021B5 48 85 C0 
/*	mov	-0x10(%rbp),%rax	\ 4021B8 	*/.byte 0x48,0x8B,0x45,0xF0
;/  IF DROP SysPadEdge OVER - THEN
/*	lea	-0x08(%rbp),%rbp	\ 4021BC 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	jz	0x4021DC  { NEWSYSPADGET+95  } 	\ 4021C0 	*/.byte 0xF,0x84,0x16,0x0,0x0,0x0
/*	mov	0x40213F  { SysPadEdge+5  } (%rip),%rax	\ 4021C6 	*/.byte 0x48,0x8B,0x5,0x72,0xFF,0xFF,0xFF
/*	mov	%rax,-0x08(%rbp)	\ 4021CD 	*/.byte 0x48,0x89,0x45,0xF8
/*	mov	0x00(%rbp),%rax	\ 4021D1 	*/.byte 0x48,0x8B,0x45,0x0
/*		negq	%rax	\ 4021D5 	*/.byte 0x48,0xF7,0xD8
/*	add	-0x08(%rbp),%rax	\ 4021D8 	*/.byte 0x48,0x3,0x45,0xF8
;/  NIP DUP TO SysPad
/*	mov	%rax,0x402132  { SysPAD+5  } (%rip)	\ 4021DC 	*/.byte 0x48,0x89,0x5,0x4F,0xFF,0xFF,0xFF
/*	lea	0x08(%rbp),%rbp	\ 4021E3 	*/.byte 0x48,0x8D,0x6D,0x8
;/
;/;
	ret		\ 4021E7 C3 
;/
