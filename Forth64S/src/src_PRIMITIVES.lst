;/
;/
;/ TEXEC_SET
;/
;/
;/CODE TEST333
;/
;/\  add   (%rax,%rax,2),%edx
;/
;/\	POP %r8
;/\	POP %rAX
;/
;/\	$f2 c, $f c, $10 c, 07 c,
;/
;/
;/END-CODE
;/
;/
;/ mcr .( SST0=) here mh.
;/\ CREATE SSSTT0  \ 0 , 
;/   here mh.
;/ mcr .( SST=) here mh.
;/\ CREATE SSSTT \ 0 , 
;/
;/
;/CREATE test3331
;/ $0f C, 00  C, $c0 C,


	DB 0xF,0x0,0xC0
;/ $0f C, 01  C, $c0 C,
	DB 0xF,0x1,0xC0
;/
;/\ Push the address of the top element of the return stack 
;/\ onto the parameter stack.
;/CODE RP@	(  -- addr )
;/	lea    -0x8(%rbp),%rbp

RPload:
/*	lea	-0x08(%rbp),%rbp	\ 4003EE 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 4003F2 	*/.byte 0x48,0x89,0x45,0x0
;/	lea    0x8(%rsp),%rax
/*	lea	0x08(%rsp),%rax	\ 4003F6 	*/.byte 0x48,0x8D,0x44,0x24,0x8
;/	NEXT
	ret		\ 4003FB C3 
;/END-CODE
;/
;/
;/CODE	DROP	\ remove element of parameter stack .
;/CODL	D>S
;/	DROP,


DgreatS:
/*	mov	0x00(%rbp),%rax	\ 4003FC 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 400400 	*/.byte 0x48,0x8D,0x6D,0x8
;/CODL	NOOP
;/	NEXT
NOOP:
	ret		\ 400404 C3 
;/END-CODE
;/
;/' NOOP TO 'CRASH
;/' NOOP TO 'NOOP
;/' DROP TO 'DROP
;/
;/\ Set the return stack pointer to n .
;/CODE RP!	( N -- )
;/	pop    %rbx


RPsave:
	pop	%rbx	\ 400405 5B 
;/	mov    %rax,%rsp
/*	mov	%rax,%rsp	\ 400406 	*/.byte 0x48,0x89,0xC4
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400409 	*/.byte 0x48,0x8B,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 40040D 	*/.byte 0x48,0x8D,0x6D,0x8
;/	jmp	%rbx
/*	jmp	*%rbx	\ 400411 	*/.byte 0xFF,0xE3
;/END-CODE
;/
;/CODE 2RDROP
;/	mov	(%rsp),%rbx


2RDROP:
/*	mov	(%rsp),%rbx	\ 400413 	*/.byte 0x48,0x8B,0x1C,0x24
;/	lea	0x18(%rsp),%rsp
/*	lea	0x18(%rsp),%rsp	\ 400417 	*/.byte 0x48,0x8D,0x64,0x24,0x18
;/	jmp	%rbx
/*	jmp	*%rbx	\ 40041C 	*/.byte 0xFF,0xE3
;/END-CODE
;/
;/\ Pop two items from return stack onto parameter stack
;/CODE 2R>	( -- D.lo D.hi )
;/	mov    (%rsp),%rbx


2Rgreat:
/*	mov	(%rsp),%rbx	\ 40041E 	*/.byte 0x48,0x8B,0x1C,0x24
;/	mov    %rax,-0x8(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 400422 	*/.byte 0x48,0x89,0x45,0xF8
;/	mov    0x10(%rsp),%rcx
/*	mov	0x10(%rsp),%rcx	\ 400426 	*/.byte 0x48,0x8B,0x4C,0x24,0x10
;/	mov    0x8(%rsp),%rax
/*	mov	0x08(%rsp),%rax	\ 40042B 	*/.byte 0x48,0x8B,0x44,0x24,0x8
;/	mov    %rcx,-0x10(%rbp)
/*	mov	%rcx,-0x10(%rbp)	\ 400430 	*/.byte 0x48,0x89,0x4D,0xF0
;/	lea    -0x10(%rbp),%rbp
/*	lea	-0x10(%rbp),%rbp	\ 400434 	*/.byte 0x48,0x8D,0x6D,0xF0
;/	lea    0x18(%rsp),%rsp
/*	lea	0x18(%rsp),%rsp	\ 400438 	*/.byte 0x48,0x8D,0x64,0x24,0x18
;/	jmp	%rbx
/*	jmp	*%rbx	\ 40043D 	*/.byte 0xFF,0xE3
;/END-CODE
;/
;/
;/\ Push a copy of the top two items of the return stack onto the parameter stack.
;/CODE 2R@	( -- D.lo D.hi )
;/	mov    %rax,-0x8(%rbp)


2Rload:
/*	mov	%rax,-0x08(%rbp)	\ 40043F 	*/.byte 0x48,0x89,0x45,0xF8
;/	mov    0x8(%rsp),%rax
/*	mov	0x08(%rsp),%rax	\ 400443 	*/.byte 0x48,0x8B,0x44,0x24,0x8
;/	mov    0x10(%rsp),%rbx
/*	mov	0x10(%rsp),%rbx	\ 400448 	*/.byte 0x48,0x8B,0x5C,0x24,0x10
;/	mov    %rbx,-0x10(%rbp)
/*	mov	%rbx,-0x10(%rbp)	\ 40044D 	*/.byte 0x48,0x89,0x5D,0xF0
;/	lea    -0x10(%rbp),%rbp
/*	lea	-0x10(%rbp),%rbp	\ 400451 	*/.byte 0x48,0x8D,0x6D,0xF0
;/	NEXT
	ret		\ 400455 C3 
;/END-CODE
;/
;/
;/\ Pop two items from parameter stack, push onto return stack.
;/CODE 2>R	( D -- )
;/	pop    %rbx


2greatR:
	pop	%rbx	\ 400456 5B 
;/	push   0(%rbp)
/*	push	0x00(%rbp)	\ 400457 	*/.byte 0xFF,0x75,0x0
;/	push   %rax
	Push	%rax	\ 40045A 50 
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 40045B 	*/.byte 0x48,0x8D,0x6D,0x10
;/	mov    -0x8(%rbp),%rax
/*	mov	-0x08(%rbp),%rax	\ 40045F 	*/.byte 0x48,0x8B,0x45,0xF8
;/	jmp	%rbx
/*	jmp	*%rbx	\ 400463 	*/.byte 0xFF,0xE3
;/END-CODE
;/
;/CODE SP@	( -- N )
;/	lea    -0x8(%rbp),%rbp


SPload:
/*	lea	-0x08(%rbp),%rbp	\ 400465 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 400469 	*/.byte 0x48,0x89,0x45,0x0
;/	mov    %rbp,%rax
/*	mov	%rbp,%rax	\ 40046D 	*/.byte 0x48,0x89,0xE8
;/	NEXT
	ret		\ 400470 C3 
;/END-CODE
;/
;/\ Set the parameter stack pointer to specified value.
;/CODE SP!	( n -- )
;/	lea    0x8(%rax),%rbp


SPsave:
/*	lea	0x08(%rax),%rbp	\ 400471 	*/.byte 0x48,0x8D,0x68,0x8
;/	mov    -0x8(%rbp),%rax
/*	mov	-0x08(%rbp),%rax	\ 400475 	*/.byte 0x48,0x8B,0x45,0xF8
;/	NEXT
	ret		\ 400479 C3 
;/END-CODE
;/
;/CODE PERFORM	( ... [tx] -- ...' )
;/CODL @EXECUTE
;/	mov    (%rax),%rax


loadEXECUTE:
/*	mov	(%rax),%rax	\ 40047A 	*/.byte 0x48,0x8B,0x0
;/\ Execute the word whose CFA is on the stack
;/CODL EXECUTE	( ... tx -- ...' )
;/	mov    %rax,%rdx
EXECUTE:
/*	mov	%rax,%rdx	\ 40047D 	*/.byte 0x48,0x89,0xC2
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400480 	*/.byte 0x48,0x8B,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400484 	*/.byte 0x48,0x8D,0x6D,0x8
;/	jmp    %rdx
/*	jmp	*%rdx	\ 400488 	*/.byte 0xFF,0xE2
;/END-CODE
;/
;/' PERFORM TO 'PERFORM
;/' EXECUTE TO 'EXECUTE
;/
;/CODE SL@
;/	mov    (%rax),%eax


SLload:
/*	mov	(%rax),%eax	\ 40048A 	*/.byte 0x8B,0x0
;/	cltq
	dw 9848h		\ 40048C 48 98 
;/	NEXT
	ret		\ 40048E C3 
;/END-CODE
;/
;/CODE L@
;/	mov    (%rax),%eax


Lload:
/*	mov	(%rax),%eax	\ 40048F 	*/.byte 0x8B,0x0
;/	NEXT
	ret		\ 400491 C3 
;/END-CODE
;/
;/\ ARM Forth word @   ( addr -- n )
;/\ Fetch a value from addr
;/CODE @		( A -- N )
;/	mov    (%rax),%rax


load:
/*	mov	(%rax),%rax	\ 400492 	*/.byte 0x48,0x8B,0x0
;/	NEXT
	ret		\ 400495 C3 
;/END-CODE
;/
;/' @ TO 'GET
;/
;/CODE C@		( A -- c )
;/	movzbl (%rax),%eax


Cload:
/*	movzb	(%rax),%eax	\ 400496 	*/.byte 0xF,0xB6,0x0
;/	NEXT
	ret		\ 400499 C3 
;/END-CODE
;/
;/CODE W@		( A -- c )
;/	movzwl (%rax),%eax


Wload:
/*	movzw	(%rax),%eax	\ 40049A 	*/.byte 0xF,0xB7,0x0
;/	NEXT
	ret		\ 40049D C3 
;/END-CODE
;/
;/\ Store the least significant 8 bits of char at the specified addr
;/CODE C!		( N,A -- )
;/	mov    0x0(%rbp),%dl


Csave:
/*	mov	0x00(%rbp),%dl	\ 40049E 	*/.byte 0x8A,0x55,0x0
;/	mov    %dl,(%rax)
/*	mov	%dl,(%rax)	\ 4004A1 	*/.byte 0x88,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4004A3 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 4004A7 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 4004AB C3 
;/END-CODE
;/
;/CODE W!	( N,A -- )
;/	mov    0x0(%rbp),%edx


Wsave:
/*	mov	0x00(%rbp),%edx	\ 4004AC 	*/.byte 0x8B,0x55,0x0
;/	mov    %dx,(%rax)
/*	mov	%dx,(%rax)	\ 4004AF 	*/.byte 0x66,0x89,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4004B2 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 4004B6 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 4004BA C3 
;/END-CODE
;/
;/CODE L!	( N,A -- )
;/	mov    0x0(%rbp),%edx


Lsave:
/*	mov	0x00(%rbp),%edx	\ 4004BB 	*/.byte 0x8B,0x55,0x0
;/	mov    %edx,(%rax)
/*	mov	%edx,(%rax)	\ 4004BE 	*/.byte 0x89,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4004C0 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 4004C4 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 4004C8 C3 
;/END-CODE
;/
;/\  Store value n into the address addr
;/CODE !	( N,A -- )
;/	mov    0x0(%rbp),%rdx


save:
/*	mov	0x00(%rbp),%rdx	\ 4004C9 	*/.byte 0x48,0x8B,0x55,0x0
;/	mov    %rdx,(%rax)
/*	mov	%rdx,(%rax)	\ 4004CD 	*/.byte 0x48,0x89,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4004D0 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 4004D4 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 4004D8 C3 
;/END-CODE
;/
;/CODE +!		( N,A -- )
;/	mov    0x0(%rbp),%rdx


addsave:
/*	mov	0x00(%rbp),%rdx	\ 4004D9 	*/.byte 0x48,0x8B,0x55,0x0
;/	add	%rdx, (%rax)
/*	add	%rdx,(%rax)	\ 4004DD 	*/.byte 0x48,0x1,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4004E0 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 4004E4 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 4004E8 C3 
;/END-CODE
;/
;/CODE C+!		( N,A -- )
;/	mov    0x0(%rbp),%rdx


Caddsave:
/*	mov	0x00(%rbp),%rdx	\ 4004E9 	*/.byte 0x48,0x8B,0x55,0x0
;/	add	%dl, (%rax)
/*	add	%dl,(%rax)	\ 4004ED 	*/.byte 0x0,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4004EF 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 4004F3 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 4004F7 C3 
;/END-CODE
;/
;/CODE L+!		( N,A -- )
;/	mov    0x0(%rbp),%rdx


Laddsave:
/*	mov	0x00(%rbp),%rdx	\ 4004F8 	*/.byte 0x48,0x8B,0x55,0x0
;/	add	%edx, (%rax)
/*	add	%edx,(%rax)	\ 4004FC 	*/.byte 0x1,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4004FE 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400502 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 400506 C3 
;/END-CODE
;/
;/CODE LOR!		( N,A -- )
;/	mov    0x0(%rbp),%rdx


LORsave:
/*	mov	0x00(%rbp),%rdx	\ 400507 	*/.byte 0x48,0x8B,0x55,0x0
;/	or	%edx, (%rax)
/*	or	%edx,(%rax)	\ 40050B 	*/.byte 0x9,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 40050D 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400511 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 400515 C3 
;/END-CODE
;/
;/CODE OR!		( N,A -- )
;/	mov    0x0(%rbp),%rdx


ORsave:
/*	mov	0x00(%rbp),%rdx	\ 400516 	*/.byte 0x48,0x8B,0x55,0x0
;/	or	%Rdx, (%rax)
/*	or	%rdx,(%rax)	\ 40051A 	*/.byte 0x48,0x9,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 40051D 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400521 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 400525 C3 
;/END-CODE
;/
;/CODE XOR!		( N,A -- )
;/	mov    0x0(%rbp),%rdx


XORsave:
/*	mov	0x00(%rbp),%rdx	\ 400526 	*/.byte 0x48,0x8B,0x55,0x0
;/	xor	%Rdx, (%rax)
/*	xor	%rdx,(%rax)	\ 40052A 	*/.byte 0x48,0x31,0x10
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 40052D 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400531 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 400535 C3 
;/END-CODE
;/
;/CODE 1+!	( N A -- )
;/	incq   (%rax)


1addsave:
/*	incq	(%rax)	\ 400536 	*/.byte 0x48,0xFF,0x0
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400539 	*/.byte 0x48,0x8B,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 40053D 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400541 C3 
;/END-CODE
;/
;/\ [A] = 0
;/CODE 0!		( A -- )
;/CODL OFF		( A -- )
;/	movq   $0,(%rax)


OFF:
/*	movq	$0x0,(%rax)	\ 400542 	*/.byte 0x48,0xC7,0x0,0x0,0x0,0x0,0x0
;/	DROP,
/*	mov	0x00(%rbp),%rax	\ 400549 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40054D 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400551 C3 
;/END-CODE
;/
;/CODE ON		( A -- )
;/	movq   $-1,(%rax)


ON:
/*	movq	$-0x1,(%rax)	\ 400552 	*/.byte 0x48,0xC7,0x0,0xFF,0xFF,0xFF,0xFF
;/	DROP,
/*	mov	0x00(%rbp),%rax	\ 400559 	*/.byte 0x48,0x8B,0x45,0x0
/*	lea	0x08(%rbp),%rbp	\ 40055D 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400561 C3 
;/END-CODE
;/
;/\  Fetch a 64 bit value from addr
;/CODE 2@		( addr -- low32bits high32bits )
;/	mov 8(%rax), %rdx


2load:
/*	mov	0x08(%rax),%rdx	\ 400562 	*/.byte 0x48,0x8B,0x50,0x8
;/	lea -8(%rbp), %rbp
/*	lea	-0x08(%rbp),%rbp	\ 400566 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov %rdx, (%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 40056A 	*/.byte 0x48,0x89,0x55,0x0
;/	mov (%rax), %rax
/*	mov	(%rax),%rax	\ 40056E 	*/.byte 0x48,0x8B,0x0
;/
;/	NEXT
	ret		\ 400571 C3 
;/END-CODE
;/
;/CODE 2!		( D A -- )
;/	mov (%rbp), %rdx


2save:
/*	mov	0x00(%rbp),%rdx	\ 400572 	*/.byte 0x48,0x8B,0x55,0x0
;/	mov %rdx, (%rax)
/*	mov	%rdx,(%rax)	\ 400576 	*/.byte 0x48,0x89,0x10
;/	mov 8(%rbp), %rdx
/*	mov	0x08(%rbp),%rdx	\ 400579 	*/.byte 0x48,0x8B,0x55,0x8
;/     	mov %rdx, 8(%rax)
/*	mov	%rdx,0x08(%rax)	\ 40057D 	*/.byte 0x48,0x89,0x50,0x8
;/	mov 0x10(%rbp), %rax
/*	mov	0x10(%rbp),%rax	\ 400581 	*/.byte 0x48,0x8B,0x45,0x10
;/	lea 0x18(%rbp),%rbp
/*	lea	0x18(%rbp),%rbp	\ 400585 	*/.byte 0x48,0x8D,0x6D,0x18
;/	NEXT
	ret		\ 400589 C3 
;/END-CODE
;/
;/
;/CODE COUNT	( a -- a+1 c ) 
;/	lea    -0x8(%rbp),%rbp


COUNT:
/*	lea	-0x08(%rbp),%rbp	\ 40058A 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	lea    0x1(%rax),%rdx
/*	lea	0x01(%rax),%rdx	\ 40058E 	*/.byte 0x48,0x8D,0x50,0x1
;/	movzbq (%rax),%rax
/*	movzbq	(%rax),%rax	\ 400592 	*/.byte 0x48,0xF,0xB6,0x0
;/	mov    %rdx,0x0(%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 400596 	*/.byte 0x48,0x89,0x55,0x0
;/	NEXT
	ret		\ 40059A C3 
;/END-CODE
;/
;/CODE U>D
;/	lea    -0x8(%rbp),%rbp


UgreatD:
/*	lea	-0x08(%rbp),%rbp	\ 40059B 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 40059F 	*/.byte 0x48,0x89,0x45,0x0
;/	xor    %rax,%rax
/*	xor	%rax,%rax	\ 4005A3 	*/.byte 0x48,0x31,0xC0
;/	NEXT
	ret		\ 4005A6 C3 
;/END-CODE
;/
;/CODE S>D
;/	DUP,


SgreatD:
/*	lea	-0x08(%rbp),%rbp	\ 4005A7 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	mov	%rax,0x00(%rbp)	\ 4005AB 	*/.byte 0x48,0x89,0x45,0x0
;/	sar    $0x3f,%rax
/*	sar	$0x3F,%rax	\ 4005AF 	*/.byte 0x48,0xC1,0xF8,0x3F
;/	NEXT
	ret		\ 4005B3 C3 
;/END-CODE
;/
;/CODE C>S ( c -- n )
;/	movsbq	%al,%rax


CgreatS:
/*	movsbq	%al,%rax	\ 4005B4 	*/.byte 0x48,0xF,0xBE,0xC0
;/	NEXT
	ret		\ 4005B8 C3 
;/END-CODE
;/
;/CODE W>S ( c -- n )
;/	movswq %ax,%rax


WgreatS:
/*	movswq	%ax,%rax	\ 4005B9 	*/.byte 0x48,0xF,0xBF,0xC0
;/	NEXT
	ret		\ 4005BD C3 
;/END-CODE
;/
;/CODE L>S ( c -- n )
;/	movslq %eax,%rax


LgreatS:
/*	movslq	%rax,%rax	\ 4005BE 	*/.byte 0x48,0x63,0xC0
;/	NEXT
	ret		\ 4005C1 C3 
;/END-CODE
;/
;/CODE MIN	( N1,N2 -- MIN )
;/	cmp    0x0(%rbp),%rax


MIN:
/*	cmp	0x00(%rbp),%rax	\ 4005C2 	*/.byte 0x48,0x3B,0x45,0x0
;/	cmovg  0x0(%rbp),%rax
/*	cmovNle/*	cmov	0x00(%rbp),%rax	\ 4005C6 	*/.byte 0x48,0xF,0x4F,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4005CB 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4005CF C3 
;/END-CODE
;/
;/CODE UMIN	( N1,N2 -- MIN )
;/	cmp    0x0(%rbp),%rax


UMIN:
/*	cmp	0x00(%rbp),%rax	\ 4005D0 	*/.byte 0x48,0x3B,0x45,0x0
;/	cmova  0x0(%rbp),%rax
/*	cmovNbe/*	cmov	0x00(%rbp),%rax	\ 4005D4 	*/.byte 0x48,0xF,0x47,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4005D9 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4005DD C3 
;/END-CODE
;/
;/CODE MAX	( N1,N2 -- MAX )
;/	cmp    0x0(%rbp),%rax


MAX:
/*	cmp	0x00(%rbp),%rax	\ 4005DE 	*/.byte 0x48,0x3B,0x45,0x0
;/	cmovl  0x0(%rbp),%rax
/*	cmovl/*	cmov	0x00(%rbp),%rax	\ 4005E2 	*/.byte 0x48,0xF,0x4C,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4005E7 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4005EB C3 
;/END-CODE
;/
;/\ ÌÀÊÑÈÌÓÌ
;/CODE UMAX	( N1,N2 -- MAX )
;/	cmp    0x0(%rbp),%rax


UMAX:
/*	cmp	0x00(%rbp),%rax	\ 4005EC 	*/.byte 0x48,0x3B,0x45,0x0
;/	cmovb  0x0(%rbp),%rax
/*	cmovb/*	cmov	0x00(%rbp),%rax	\ 4005F0 	*/.byte 0x48,0xF,0x42,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4005F5 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4005F9 C3 
;/END-CODE
;/
;/\ Return absolute value of top stack item
;/CODE ABS	( n -- +n )
;/	cqto


ABS:
	dw 9948h		\ 4005FA 48 99 
;/	xor %rdx, %rax
/*	xor	%rdx,%rax	\ 4005FC 	*/.byte 0x48,0x31,0xD0
;/	sub %rdx, %rax
/*	sub	%rdx,%rax	\ 4005FF 	*/.byte 0x48,0x29,0xD0
;/	NEXT
	ret		\ 400602 C3 
;/ASM_END
;/
;/\  If n1 is equal to n2, return TRUE. Otherwise FALSE.
;/CODE =		( a b -- f )
;/\  If n is equal to 0, return TRUE. Otherwise FALSE.
;/	xor    0x0(%rbp),%rax


equ:
/*	xor	0x00(%rbp),%rax	\ 400603 	*/.byte 0x48,0x33,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400607 	*/.byte 0x48,0x8D,0x6D,0x8
;/CODL 0=		( a -- f )
;/     	sub    $1 , %rax
0equ:
/*	subq	$0x01,%rax	\ 40060B 	*/.byte 0x48,0x83,0xE8,0x1
;/     	sbb	%rax,%rax
/*	sbb	%rax,%rax	\ 40060F 	*/.byte 0x48,0x19,0xC0
;/
;/	NEXT
	ret		\ 400612 C3 
;/END-CODE
;/
;/' =	TO '=
;/
;/CODE  D= ( xd1 xd2 -- flag ) \ 94 DOUBLE
;/\ flag is true if and only if xd1 is bit-for-bit the same as xd2
;/	mov    (%rbp),%rdx


Dequ:
/*	mov	0x00(%rbp),%rdx	\ 400613 	*/.byte 0x48,0x8B,0x55,0x0
;/	xor    8(%rbp),%rax
/*	xor	0x08(%rbp),%rax	\ 400617 	*/.byte 0x48,0x33,0x45,0x8
;/	xor    0x10(%rbp),%rdx
/*	xor	0x10(%rbp),%rdx	\ 40061B 	*/.byte 0x48,0x33,0x55,0x10
;/	or     %rdx,%rax
/*	or	%rdx,%rax	\ 40061F 	*/.byte 0x48,0x9,0xD0
;/	sub    $0x1,%rax
/*	subq	$0x01,%rax	\ 400622 	*/.byte 0x48,0x83,0xE8,0x1
;/	sbb    %rax,%rax
/*	sbb	%rax,%rax	\ 400626 	*/.byte 0x48,0x19,0xC0
;/	lea    0x18(%rbp),%rbp
/*	lea	0x18(%rbp),%rbp	\ 400629 	*/.byte 0x48,0x8D,0x6D,0x18
;/	NEXT
	ret		\ 40062D C3 
;/END-CODE
;/
;/CODE D0=		( a b -- f )
;/	or     0x0(%rbp),%rax


D0equ:
/*	or	0x00(%rbp),%rax	\ 40062E 	*/.byte 0x48,0xB,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400632 	*/.byte 0x48,0x8D,0x6D,0x8
;/	sub    $0x1,%rax
/*	subq	$0x01,%rax	\ 400636 	*/.byte 0x48,0x83,0xE8,0x1
;/	sbb    %rax,%rax
/*	sbb	%rax,%rax	\ 40063A 	*/.byte 0x48,0x19,0xC0
;/	NEXT
	ret		\ 40063D C3 
;/END-CODE
;/
;/CODE >		( a b -- f )
;/	cmp	(%rbp),%rax


great:
/*	cmp	0x00(%rbp),%rax	\ 40063E 	*/.byte 0x48,0x3B,0x45,0x0
;/	setl	%al
	setl	%al	\ 400642 F 9C C0 
;/	neg	%al
/*		neg	%al	\ 400645 	*/.byte 0xF6,0xD8
;/	movsb	%al,%rax
/*	movsbq	%al,%rax	\ 400647 	*/.byte 0x48,0xF,0xBE,0xC0
;/	lea	8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 40064B 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 40064F C3 
;/END-CODE
;/
;/CODE <		( a b -- f )
;/	cmp	(%rbp),%rax


less:
/*	cmp	0x00(%rbp),%rax	\ 400650 	*/.byte 0x48,0x3B,0x45,0x0
;/	setg	%al
	setNle	%al	\ 400654 F 9F C0 
;/	neg	%al
/*		neg	%al	\ 400657 	*/.byte 0xF6,0xD8
;/	movsb	%al,%rax
/*	movsbq	%al,%rax	\ 400659 	*/.byte 0x48,0xF,0xBE,0xC0
;/	lea	8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 40065D 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400661 C3 
;/END-CODE
;/
;/\ If n1 is not equal to n2, return TRUE.  Otherwise FALSE.
;/CODE <>		( a b -- f )
;/	xor    0x0(%rbp),%rax


lessgreat:
/*	xor	0x00(%rbp),%rax	\ 400662 	*/.byte 0x48,0x33,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400666 	*/.byte 0x48,0x8D,0x6D,0x8
;/\ If n is not equal to 0, return TRUE.  Otherwise FALSE.
;/CODL 0<>		( a b -- f )
;/	neg    %rax
0lessgreat:
/*		negq	%rax	\ 40066A 	*/.byte 0x48,0xF7,0xD8
;/	sbb    %rax,%rax
/*	sbb	%rax,%rax	\ 40066D 	*/.byte 0x48,0x19,0xC0
;/	NEXT
	ret		\ 400670 C3 
;/END-CODE
;/
;/CODE 0>		( n -- f )
;/	neg    %rax


0great:
/*		negq	%rax	\ 400671 	*/.byte 0x48,0xF7,0xD8
;/\ Returns true if top is negative, ie sign bit is on.
;/CODL 0<		( n -- f )
;/	sar    $0x3f,%rax
0less:
/*	sar	$0x3F,%rax	\ 400674 	*/.byte 0x48,0xC1,0xF8,0x3F
;/	NEXT
	ret		\ 400678 C3 
;/END-CODE
;/
;/CODE U>	( n1 n2 -- f )
;/	cmp    0x0(%rbp),%rax


Ugreat:
/*	cmp	0x00(%rbp),%rax	\ 400679 	*/.byte 0x48,0x3B,0x45,0x0
;/	sbb    %rax,%rax
/*	sbb	%rax,%rax	\ 40067D 	*/.byte 0x48,0x19,0xC0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400680 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400684 C3 
;/END-CODE
;/
;/CODE U< ( a b -- f )
;/	cmp    %rax,0x0(%rbp)


Uless:
/*	cmp	%rax,0x00(%rbp)	\ 400685 	*/.byte 0x48,0x39,0x45,0x0
;/	sbb    %rax,%rax
/*	sbb	%rax,%rax	\ 400689 	*/.byte 0x48,0x19,0xC0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 40068C 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400690 C3 
;/END-CODE
;/
;/CODE WITHIN
;/	mov    0x8(%rbp),%rdx


WITHIN:
/*	mov	0x08(%rbp),%rdx	\ 400691 	*/.byte 0x48,0x8B,0x55,0x8
;/	sub    0x0(%rbp),%rax
/*	sub	0x00(%rbp),%rax	\ 400695 	*/.byte 0x48,0x2B,0x45,0x0
;/	sub    0x0(%rbp),%rdx
/*	sub	0x00(%rbp),%rdx	\ 400699 	*/.byte 0x48,0x2B,0x55,0x0
;/	sub    %rax,%rdx
/*	sub	%rax,%rdx	\ 40069D 	*/.byte 0x48,0x29,0xC2
;/	sbb    %rax,%rax
/*	sbb	%rax,%rax	\ 4006A0 	*/.byte 0x48,0x19,0xC0
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 4006A3 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 4006A7 C3 
;/END-CODE
;/
;/CODE ANDC	( N1,N2 -- N )
;/	not    %rax


ANDC:
/*		notq	%rax	\ 4006A8 	*/.byte 0x48,0xF7,0xD0
;/\ Perform bit-wise logical AND of top two items.
;/CODL AND	( N1,N2 -- N )
;/	and    0x0(%rbp),%rax
AND:
/*	and	0x00(%rbp),%rax	\ 4006AB 	*/.byte 0x48,0x23,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4006AF 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4006B3 C3 
;/END-CODE
;/
;/
;/\ Perform bit-wise logical OR of top two items on parameter stack.
;/CODE OR		( N1,N2 -- N )
;/	or     0x0(%rbp),%rax


OR:
/*	or	0x00(%rbp),%rax	\ 4006B4 	*/.byte 0x48,0xB,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4006B8 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4006BC C3 
;/END-CODE
;/
;/\ Perform bit-wise logical XOR of top two items on parameter stack.
;/CODE XOR	( N1,N2 -- N )
;/	xor	0x0(%rbp),%rax


XOR:
/*	xor	0x00(%rbp),%rax	\ 4006BD 	*/.byte 0x48,0x33,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4006C1 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4006C5 C3 
;/END-CODE
;/
;/
;/
;/\ Logically invert the bits of top stack item.
;/CODE INVERT	( N -- N1 )
;/CODL NOT	( N -- N1 )
;/	not    %rax


NOT:
/*		notq	%rax	\ 4006C6 	*/.byte 0x48,0xF7,0xD0
;/	NEXT
	ret		\ 4006C9 C3 
;/ASM_END
;/
;/\ Negate number on top of stack.
;/CODE NEGATE	( n - -n)
;/	neg    %rax


NEGATE:
/*		negq	%rax	\ 4006CA 	*/.byte 0x48,0xF7,0xD8
;/	NEXT
	ret		\ 4006CD C3 
;/ASM_END
;/
;/CODE DNEGATE ( d - -d)
;/	mov    0x0(%rbp),%rdx


DNEGATE:
/*	mov	0x00(%rbp),%rdx	\ 4006CE 	*/.byte 0x48,0x8B,0x55,0x0
;/	neg    %rax
/*		negq	%rax	\ 4006D2 	*/.byte 0x48,0xF7,0xD8
;/	neg    %rdx
/*		negq	%rdx	\ 4006D5 	*/.byte 0x48,0xF7,0xDA
;/     	sbb    $0x0,%rax \ $48 C, $83 C, $d8 C, $00 C, \
/*	sbbq	$0x00,%rax	\ 4006D8 	*/.byte 0x48,0x83,0xD8,0x0
;/	mov    %rdx,0x0(%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 4006DC 	*/.byte 0x48,0x89,0x55,0x0
;/	NEXT
	ret		\ 4006E0 C3 
;/ASM_END
;/
;/CODE -		( N1,N2 -- N1-N2 )
;/	neg    %rax


sub:
/*		negq	%rax	\ 4006E1 	*/.byte 0x48,0xF7,0xD8
;/CODL +		( N1 N2 -- N1+N2 )
;/	add    0x0(%rbp),%rax
add:
/*	add	0x00(%rbp),%rax	\ 4006E4 	*/.byte 0x48,0x3,0x45,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4006E8 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4006EC C3 
;/END-CODE
;/' + TO '+
;/
;/CODE D+ ( d1|ud1 d2|ud2 -- d3|ud3 ) \ 94 DOUBLE
;/	mov    0x0(%rbp),%rdx


Dadd:
/*	mov	0x00(%rbp),%rdx	\ 4006ED 	*/.byte 0x48,0x8B,0x55,0x0
;/	add    %rdx,0x10(%rbp)
/*	add	%rdx,0x10(%rbp)	\ 4006F1 	*/.byte 0x48,0x1,0x55,0x10
;/	adc    0x8(%rbp),%rax
/*	adc	0x08(%rbp),%rax	\ 4006F5 	*/.byte 0x48,0x13,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 4006F9 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 4006FD C3 
;/ASM_END
;/
;/
;/CODE D- ( d1|ud1 d2|ud2 -- d3|ud3 ) \ 94 DOUBLE
;/	mov    (%rbp),%rdx


Dsub:
/*	mov	0x00(%rbp),%rdx	\ 4006FE 	*/.byte 0x48,0x8B,0x55,0x0
;/	sub    %rdx,0x10(%rbp)
/*	sub	%rdx,0x10(%rbp)	\ 400702 	*/.byte 0x48,0x29,0x55,0x10
;/	mov    8(%rbp),%rdx
/*	mov	0x08(%rbp),%rdx	\ 400706 	*/.byte 0x48,0x8B,0x55,0x8
;/	sbb    %rax,%rdx
/*	sbb	%rax,%rdx	\ 40070A 	*/.byte 0x48,0x19,0xC2
;/	mov    %rdx,%rax
/*	mov	%rdx,%rax	\ 40070D 	*/.byte 0x48,0x89,0xD0
;/	lea	0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400710 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 400714 C3 
;/ASM_END
;/
;/CODE D< ( d1 d2 -- flg ) \ 94 DOUBLE
;/	mov    (%rbp),%rdx


Dless:
/*	mov	0x00(%rbp),%rdx	\ 400715 	*/.byte 0x48,0x8B,0x55,0x0
;/	cmp    %rdx,0x10(%rbp)
/*	cmp	%rdx,0x10(%rbp)	\ 400719 	*/.byte 0x48,0x39,0x55,0x10
;/	sbb    %rax,0x8(%rbp)
/*	sbb	%rax,0x08(%rbp)	\ 40071D 	*/.byte 0x48,0x19,0x45,0x8
;/	setl   %al
	setl	%al	\ 400721 F 9C C0 
;/	neg    %al
/*		neg	%al	\ 400724 	*/.byte 0xF6,0xD8
;/	movsbq %al,%rax
/*	movsbq	%al,%rax	\ 400726 	*/.byte 0x48,0xF,0xBE,0xC0
;/	lea	0x18(%rbp),%rbp
/*	lea	0x18(%rbp),%rbp	\ 40072A 	*/.byte 0x48,0x8D,0x6D,0x18
;/	NEXT
	ret		\ 40072E C3 
;/ASM_END
;/
;/CODE D2/ \ d1 -- d1/2
;/	sar    %rax


D2rsl:
	sarq	$1,%rax	\ 40072F 48 D1 F8 
;/	$48 C, $d1 C, $5d C, 0 C, \ rcrq   0x0(%rbp)
	rcrq	$1,0x00(%rbp)	\ 400732 48 D1 5D 0 
;/	NEXT
	ret		\ 400736 C3 
;/ASM_END
;/
;/CODE CELL+	( N -- N+8 )
;/	lea    4(%rax),%rax


CELLadd:
/*	lea	0x04(%rax),%rax	\ 400737 	*/.byte 0x48,0x8D,0x40,0x4
;/CODL 4+		( N -- N+4 )
;/	inc    %rax
4add:
/*	incq	%rax	\ 40073B 	*/.byte 0x48,0xFF,0xC0
;/CODL 3+		( N -- N+2 )
;/	inc    %rax
3add:
/*	incq	%rax	\ 40073E 	*/.byte 0x48,0xFF,0xC0
;/CODL 2+		( N -- N+2 )
;/	inc    %rax
2add:
/*	incq	%rax	\ 400741 	*/.byte 0x48,0xFF,0xC0
;/CODL 1+		( N -- N+1 )
;/CODL CHAR+
;/	inc    %rax
CHARadd:
/*	incq	%rax	\ 400744 	*/.byte 0x48,0xFF,0xC0
;/	NEXT
	ret		\ 400747 C3 
;/END-CODE
;/\ 4 TR> DECIMAL 1+ .
;/
;/CODE CELL-	( N -- N-8 )
;/	lea    -4(%rax),%rax


CELLsub:
/*	lea	-0x04(%rax),%rax	\ 400748 	*/.byte 0x48,0x8D,0x40,0xFC
;/CODL 4-		( N -- N+4 )
;/	lea    -2(%rax),%rax
4sub:
/*	lea	-0x02(%rax),%rax	\ 40074C 	*/.byte 0x48,0x8D,0x40,0xFE
;/CODL 2-		( N -- N-2 )
;/	dec    %rax
2sub:
/*	decq	%rax	\ 400750 	*/.byte 0x48,0xFF,0xC8
;/CODL 1-		( N -- N-1 )
;/	dec    %rax
1sub:
/*	decq	%rax	\ 400753 	*/.byte 0x48,0xFF,0xC8
;/	NEXT
	ret		\ 400756 C3 
;/END-CODE
;/
;/CODE CELLS	( N -- 8*N )
;/	lea    (%rax,%rax,1),%rax


CELLS:
/*	lea	(%rax,%rax,1),%rax	\ 400757 	*/.byte 0x48,0x8D,0x4,0x0
;/CODL 4*	( N -- 4*N )
;/	lea    (%rax,%rax,1),%rax
4mul:
/*	lea	(%rax,%rax,1),%rax	\ 40075B 	*/.byte 0x48,0x8D,0x4,0x0
;/CODL 2*		( N -- 2*N )
;/	lea    (%rax,%rax,1),%rax
2mul:
/*	lea	(%rax,%rax,1),%rax	\ 40075F 	*/.byte 0x48,0x8D,0x4,0x0
;/	NEXT
	ret		\ 400763 C3 
;/END-CODE
;/
;/CODE 2/		( N -- N/2 )
;/	sar    %rax


2rsl:
	sarq	$1,%rax	\ 400764 48 D1 F8 
;/	NEXT
	ret		\ 400767 C3 
;/END-CODE
;/
;/CODE U2/        ( N -- N/U2 )
;/	shr    %rax


U2rsl:
	shrq	$1,%rax	\ 400768 48 D1 E8 
;/        NEXT
	ret		\ 40076B C3 
;/END-CODE
;/
;/\ 32*32=lo(32)
;/CODE *		( a b -- a*b )
;/	imulq  0x0(%rbp)


mul:
/*		imulq	0x00(%rbp)	\ 40076C 	*/.byte 0x48,0xF7,0x6D,0x0
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400770 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400774 C3 
;/END-CODE
;/
;/CODE /
;/	mov    %rax,%rcx


rsl:
/*	mov	%rax,%rcx	\ 400775 	*/.byte 0x48,0x89,0xC1
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400778 	*/.byte 0x48,0x8B,0x45,0x0
;/	cqto
	dw 9948h		\ 40077C 48 99 
;/	idiv   %rcx
/*		idivq	%rcx	\ 40077E 	*/.byte 0x48,0xF7,0xF9
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400781 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400785 C3 
;/ASM_END
;/
;/CODE MOD
;/	mov    %rax,%rcx


MOD:
/*	mov	%rax,%rcx	\ 400786 	*/.byte 0x48,0x89,0xC1
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400789 	*/.byte 0x48,0x8B,0x45,0x0
;/	cqto
	dw 9948h		\ 40078D 48 99 
;/	idiv   %rcx
/*		idivq	%rcx	\ 40078F 	*/.byte 0x48,0xF7,0xF9
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400792 	*/.byte 0x48,0x8D,0x6D,0x8
;/	mov    %rdx,%rax
/*	mov	%rdx,%rax	\ 400796 	*/.byte 0x48,0x89,0xD0
;/	NEXT
	ret		\ 400799 C3 
;/ASM_END
;/
;/
;/CODE U/
;/	mov    %rax,%rcx


Ursl:
/*	mov	%rax,%rcx	\ 40079A 	*/.byte 0x48,0x89,0xC1
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 40079D 	*/.byte 0x48,0x8B,0x45,0x0
;/	xor    %rdx,%rdx
/*	xor	%rdx,%rdx	\ 4007A1 	*/.byte 0x48,0x31,0xD2
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4007A4 	*/.byte 0x48,0x8D,0x6D,0x8
;/	div    %rcx
/*		divq	%rcx	\ 4007A8 	*/.byte 0x48,0xF7,0xF1
;/	NEXT
	ret		\ 4007AB C3 
;/ASM_END
;/
;/CODE UM*
;/	mulq   0x0(%rbp)


UMmul:
/*		mulq	0x00(%rbp)	\ 4007AC 	*/.byte 0x48,0xF7,0x65,0x0
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 4007B0 	*/.byte 0x48,0x89,0x45,0x0
;/	mov    %rdx,%rax
/*	mov	%rdx,%rax	\ 4007B4 	*/.byte 0x48,0x89,0xD0
;/	NEXT
	ret		\ 4007B7 C3 
;/ASM_END
;/
;/CODE M*
;/     	imulq  0x0(%rbp)


Mmul:
/*		imulq	0x00(%rbp)	\ 4007B8 	*/.byte 0x48,0xF7,0x6D,0x0
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 4007BC 	*/.byte 0x48,0x89,0x45,0x0
;/	mov    %rdx,%rax
/*	mov	%rdx,%rax	\ 4007C0 	*/.byte 0x48,0x89,0xD0
;/	NEXT
	ret		\ 4007C3 C3 
;/ASM_END
;/
;/CODE /MOD ( n1 n2 -- rem quot )
;/	mov    %rax,%rcx


rslMOD:
/*	mov	%rax,%rcx	\ 4007C4 	*/.byte 0x48,0x89,0xC1
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 4007C7 	*/.byte 0x48,0x8B,0x45,0x0
;/	cqto
	dw 9948h		\ 4007CB 48 99 
;/	idiv   %rcx
/*		idivq	%rcx	\ 4007CD 	*/.byte 0x48,0xF7,0xF9
;/	mov    %rdx,0x0(%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 4007D0 	*/.byte 0x48,0x89,0x55,0x0
;/	NEXT
	ret		\ 4007D4 C3 
;/ASM_END
;/
;/CODE UM/MOD
;/	mov    %rax,%rcx


UMrslMOD:
/*	mov	%rax,%rcx	\ 4007D5 	*/.byte 0x48,0x89,0xC1
;/	mov    0x0(%rbp),%rdx
/*	mov	0x00(%rbp),%rdx	\ 4007D8 	*/.byte 0x48,0x8B,0x55,0x0
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4007DC 	*/.byte 0x48,0x8B,0x45,0x8
;/	div    %rcx
/*		divq	%rcx	\ 4007E0 	*/.byte 0x48,0xF7,0xF1
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4007E3 	*/.byte 0x48,0x8D,0x6D,0x8
;/	mov    %rdx,0x0(%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 4007E7 	*/.byte 0x48,0x89,0x55,0x0
;/	NEXT
	ret		\ 4007EB C3 
;/ASM_END
;/
;/\ duplicate n1 if <> 0
;/CODE ?DUP	( N -- N,N )  ( 0 -- 0 )
;/     	test     %rax,%rax


queDUP:
	test	%rax,%rax	\ 4007EC 48 85 C0 
;/	je	0f
	jz	0x4007F9  { DUP+8  } 	\ 4007EF 74 8 
;/CODL DUP	( N -- N,N )  \ Duplicate the top element of the stack.
;/	DUP,
DUP:
/*	lea	-0x08(%rbp),%rbp	\ 4007F1 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	mov	%rax,0x00(%rbp)	\ 4007F5 	*/.byte 0x48,0x89,0x45,0x0
;/0:	NEXT
	ret		\ 4007F9 C3 
;/ASM_END
;/\ END-CODE
;/' DUP TO 'DUP
;/
;/\ Duplicate double element of data stack.
;/CODE 2DUP	(  a b -- a b a b )
;/	mov    0x0(%rbp),%rdx


2DUP:
/*	mov	0x00(%rbp),%rdx	\ 4007FA 	*/.byte 0x48,0x8B,0x55,0x0
;/	mov    %rax,-0x8(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 4007FE 	*/.byte 0x48,0x89,0x45,0xF8
;/	mov    %rdx,-0x10(%rbp)
/*	mov	%rdx,-0x10(%rbp)	\ 400802 	*/.byte 0x48,0x89,0x55,0xF0
;/	lea    -0x10(%rbp),%rbp
/*	lea	-0x10(%rbp),%rbp	\ 400806 	*/.byte 0x48,0x8D,0x6D,0xF0
;/	NEXT
	ret		\ 40080A C3 
;/END-CODE
;/
;/\ Exchange the top two items on the stack
;/CODE SWAP	( N1,N2 -- N2,N1 )
;/	mov    0x0(%rbp),%rdx


SWAP:
/*	mov	0x00(%rbp),%rdx	\ 40080B 	*/.byte 0x48,0x8B,0x55,0x0
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 40080F 	*/.byte 0x48,0x89,0x45,0x0
;/	mov    %rdx,%rax
/*	mov	%rdx,%rax	\ 400813 	*/.byte 0x48,0x89,0xD0
;/	NEXT
	ret		\ 400816 C3 
;/END-CODE
;/
;/CODE CS-SWAP
;/	nop


CSsubSWAP:
	nop		\ 400817 90 
;/\ Swap double element of data stack.
;/CODL 2SWAP	( n1 n2  n3 n4 -- n3 n4  n1 n2 )
;/	mov    0x0(%rbp),%rcx
2SWAP:
/*	mov	0x00(%rbp),%rcx	\ 400818 	*/.byte 0x48,0x8B,0x4D,0x0
;/	mov    0x8(%rbp),%rdx
/*	mov	0x08(%rbp),%rdx	\ 40081C 	*/.byte 0x48,0x8B,0x55,0x8
;/	mov    0x10(%rbp),%rbx
/*	mov	0x10(%rbp),%rbx	\ 400820 	*/.byte 0x48,0x8B,0x5D,0x10
;/	mov    %rcx,0x10(%rbp)
/*	mov	%rcx,0x10(%rbp)	\ 400824 	*/.byte 0x48,0x89,0x4D,0x10
;/	mov    %rax,0x8(%rbp)
/*	mov	%rax,0x08(%rbp)	\ 400828 	*/.byte 0x48,0x89,0x45,0x8
;/	mov    %rbx,0x0(%rbp)
/*	mov	%rbx,0x00(%rbp)	\ 40082C 	*/.byte 0x48,0x89,0x5D,0x0
;/	mov    %rdx,%rax
/*	mov	%rdx,%rax	\ 400830 	*/.byte 0x48,0x89,0xD0
;/	NEXT
	ret		\ 400833 C3 
;/END-CODE
;/
;/\ Remove double element of data stack.
;/CODE CS-DROP
;/	nop


CSsubDROP:
	nop		\ 400834 90 
;/CODL 2DROP  	( D -- )
;/	mov    0x8(%rbp),%rax
2DROP:
/*	mov	0x08(%rbp),%rax	\ 400835 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400839 	*/.byte 0x48,0x8D,0x6D,0x10
;/	NEXT
	ret		\ 40083D C3 
;/END-CODE
;/
;/CODE CS-PICK  ( xu .. x0 u -- xu .. x0 xu )
;/	lea    (%rax,%rax),%rax


CSsubPICK:
/*	lea	(%rax,%rax,1),%rax	\ 40083E 	*/.byte 0x48,0x8D,0x4,0x0
;/	mov    8(%rbp,%rax,8),%rdx
/*	mov	0x08(%rbp,%rax,8),%rdx	\ 400842 	*/.byte 0x48,0x8B,0x54,0xC5,0x8
;/	lea	-0x08(%rbp),%rbp
/*	lea	-0x08(%rbp),%rbp	\ 400847 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov	%rdx,(%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 40084B 	*/.byte 0x48,0x89,0x55,0x0
;/	mov    8(%rbp,%rax,8),%rax
/*	mov	0x08(%rbp,%rax,8),%rax	\ 40084F 	*/.byte 0x48,0x8B,0x44,0xC5,0x8
;/	ret
	ret		\ 400854 C3 
;/END-CODE
;/
;/CODE 2NIP	( D -- )
;/	mov    (%rbp),%rdx


2NIP:
/*	mov	0x00(%rbp),%rdx	\ 400855 	*/.byte 0x48,0x8B,0x55,0x0
;/	lea    0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400859 	*/.byte 0x48,0x8D,0x6D,0x10
;/	mov    %rdx,(%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 40085D 	*/.byte 0x48,0x89,0x55,0x0
;/	NEXT
	ret		\ 400861 C3 
;/END-CODE
;/
;/\ Push a copy of the second stack item.
;/CODE OVER	( n1 n2 -- n1 n2 n1 )
;/	lea    -0x8(%rbp),%rbp


OVER:
/*	lea	-0x08(%rbp),%rbp	\ 400862 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 400866 	*/.byte 0x48,0x89,0x45,0x0
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 40086A 	*/.byte 0x48,0x8B,0x45,0x8
;/	NEXT
	ret		\ 40086E C3 
;/END-CODE
;/
;/' OVER	TO 'OVER
;/
;/CODE 2OVER	( n1 n2 -- n1 n2 n1 )
;/	mov 16(%rbp),%rdx


2OVER:
/*	mov	0x10(%rbp),%rdx	\ 40086F 	*/.byte 0x48,0x8B,0x55,0x10
;/	mov %rax,-8(%rbp)
/*	mov	%rax,-0x08(%rbp)	\ 400873 	*/.byte 0x48,0x89,0x45,0xF8
;/	mov %rdx,-16(%rbp)
/*	mov	%rdx,-0x10(%rbp)	\ 400877 	*/.byte 0x48,0x89,0x55,0xF0
;/	mov 8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 40087B 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea -16(%rbp),%rbp
/*	lea	-0x10(%rbp),%rbp	\ 40087F 	*/.byte 0x48,0x8D,0x6D,0xF0
;/	NEXT
	ret		\ 400883 C3 
;/END-CODE
;/
;/
;/
;/CODE PICK	( Nm,...,N1,K -- Nm,...,N1,Nk )
;/	mov    (%rbp,%rax,8),%rax


PICK:
/*	mov	0x00(%rbp,%rax,8),%rax	\ 400884 	*/.byte 0x48,0x8B,0x44,0xC5,0x0
;/	NEXT
	ret		\ 400889 C3 
;/END-CODE
;/
;/\ CODE PLUCK	( N1 N2 N3 -- N1 N2 N3 N1 ) 
;/\ Tuck the first element under the second one.
;/CODE TUCK	( n1 n2 --- n2 n1 n2 )
;/	lea    -0x8(%rbp),%rbp


TUCK:
/*	lea	-0x08(%rbp),%rbp	\ 40088A 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov    0x8(%rbp),%rdx
/*	mov	0x08(%rbp),%rdx	\ 40088E 	*/.byte 0x48,0x8B,0x55,0x8
;/	mov    %rax,0x8(%rbp)
/*	mov	%rax,0x08(%rbp)	\ 400892 	*/.byte 0x48,0x89,0x45,0x8
;/	mov    %rdx,0x0(%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 400896 	*/.byte 0x48,0x89,0x55,0x0
;/	NEXT
	ret		\ 40089A C3 
;/END-CODE
;/
;/CODE ROLL          \ nn..n0 n -- nn-1..n0 nn
;/\ *G Rotate the order of the top N stack items by one place such
;/\ ** that the current top of stack becomes the second item and
;/\ ** the Nth item becomes TOS. See also *\fo{ROT}.
;/	test   %rax,%rax


ROLL:
	test	%rax,%rax	\ 40089B 48 85 C0 
;/	je     1f
	jz	0x4008C9  { ROLL+2E  } 	\ 40089E 74 29 
;/	mov    %rax,%rcx
/*	mov	%rax,%rcx	\ 4008A0 	*/.byte 0x48,0x89,0xC1
;/	lea    (,%rax,8),%rax
/*	lea	0x0(,%rax,8),%rax	\ 4008A3 	*/.byte 0x48,0x8D,0x4,0xC5,0x0,0x0,0x0,0x0
;/	mov    %rbp,%rdx
/*	mov	%rbp,%rdx	\ 4008AB 	*/.byte 0x48,0x89,0xEA
;/	add    %rax,%rdx
/*	add	%rax,%rdx	\ 4008AE 	*/.byte 0x48,0x1,0xC2
;/	mov    (%rdx),%rbx
/*	mov	(%rdx),%rbx	\ 4008B1 	*/.byte 0x48,0x8B,0x1A
;/2:	lea    -8(%rdx),%rdx
/*	lea	-0x08(%rdx),%rdx	\ 4008B4 	*/.byte 0x48,0x8D,0x52,0xF8
;/	mov    (%rdx),%rax
/*	mov	(%rdx),%rax	\ 4008B8 	*/.byte 0x48,0x8B,0x2
;/	mov    %rax,8(%rdx)
/*	mov	%rax,0x08(%rdx)	\ 4008BB 	*/.byte 0x48,0x89,0x42,0x8
;/	dec    %rcx
/*	decq	%rcx	\ 4008BF 	*/.byte 0x48,0xFF,0xC9
;/	jne    2b
	jNz	0x4008B4  { ROLL+19  } 	\ 4008C2 75 F0 
;/	mov    %rbx,%rax
/*	mov	%rbx,%rax	\ 4008C4 	*/.byte 0x48,0x89,0xD8
;/	jmp    3f
	jmp	0x4008CD  { ROLL+32  } 	\ 4008C7 EB 4 
;/1:	mov    (%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 4008C9 	*/.byte 0x48,0x8B,0x45,0x0
;/3:	lea    8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4008CD 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4008D1 C3 
;/END-CODE
;/
;/
;/
;/\ Delete the second stack item.
;/CODE NIP	( n1 n2 -- n2 )
;/	lea    0x8(%rbp),%rbp


NIP:
/*	lea	0x08(%rbp),%rbp	\ 4008D2 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 4008D6 C3 
;/END-CODE
;/
;/\ Rotate top three stack values, bringing the third item to the top.
;/CODE ROT	( n1 n2 n3 -- n2 n3 n1 )
;/	mov    0x0(%rbp),%rdx


ROT:
/*	mov	0x00(%rbp),%rdx	\ 4008D7 	*/.byte 0x48,0x8B,0x55,0x0
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 4008DB 	*/.byte 0x48,0x89,0x45,0x0
;/	mov    0x8(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 4008DF 	*/.byte 0x48,0x8B,0x45,0x8
;/	mov    %rdx,0x8(%rbp)
/*	mov	%rdx,0x08(%rbp)	\ 4008E3 	*/.byte 0x48,0x89,0x55,0x8
;/	NEXT
	ret		\ 4008E7 C3 
;/END-CODE
;/
;/
;/\ Rotate top three stack values, bringing the top item to the third.
;/CODE -ROT	( n1 n2 n3 -- n3 n1 n2 )
;/	mov    0x8(%rbp),%rdx


subROT:
/*	mov	0x08(%rbp),%rdx	\ 4008E8 	*/.byte 0x48,0x8B,0x55,0x8
;/	mov    %rax,0x8(%rbp)
/*	mov	%rax,0x08(%rbp)	\ 4008EC 	*/.byte 0x48,0x89,0x45,0x8
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 4008F0 	*/.byte 0x48,0x8B,0x45,0x0
;/	mov    %rdx,0x0(%rbp)
/*	mov	%rdx,0x00(%rbp)	\ 4008F4 	*/.byte 0x48,0x89,0x55,0x0
;/	NEXT
	ret		\ 4008F8 C3 
;/END-CODE
;/
;/
;/CODE ARSHIFT	( a b -- a>>b ) \ arithmetic shift
;/	mov    %al,%cl


ARSHIFT:
/*	mov	%al,%cl	\ 4008F9 	*/.byte 0x88,0xC1
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 4008FB 	*/.byte 0x48,0x8B,0x45,0x0
;/	sar    %cl,%rax
	sarq	%cl,%rax	\ 4008FF 48 D3 F8 
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400902 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400906 C3 
;/END-CODE
;/
;/CODE RSHIFT	( a b -- a>>b )
;/CODL >>
;/	mov    %al,%cl


greatgreat:
/*	mov	%al,%cl	\ 400907 	*/.byte 0x88,0xC1
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400909 	*/.byte 0x48,0x8B,0x45,0x0
;/	shr    %cl,%rax	
	shrq	%cl,%rax	\ 40090D 48 D3 E8 
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400910 	*/.byte 0x48,0x8D,0x6D,0x8
;/	NEXT
	ret		\ 400914 C3 
;/END-CODE
;/
;/
;/CODE LSHIFT	( a b -- a<<b )
;/CODL <<
;/	mov    %al,%cl


lessless:
/*	mov	%al,%cl	\ 400915 	*/.byte 0x88,0xC1
;/	mov    0x0(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400917 	*/.byte 0x48,0x8B,0x45,0x0
;/	shl    %cl,%rax
	shlq	%cl,%rax	\ 40091B 48 D3 E0 
;/	lea    0x8(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 40091E 	*/.byte 0x48,0x8D,0x6D,0x8
;/
;/	NEXT
	ret		\ 400922 C3 
;/END-CODE
;/
;/
;/CODE TlsIndex!
;/     	mov    %rax,%r12


TlsIndexsave:
/*	mov	%rax,%r12	\ 400923 	*/.byte 0x49,0x89,0xC4
;/	' DROP BRANCH,
/*	jmp	0x4003FC  { D>S } 	\ 400926 	*/.byte 0xE9,0xD1,0xFA,0xFF,0xFF
;/END-CODE
;/
;/CODE TlsIndex@
;/	lea    -0x8(%rbp),%rbp


TlsIndexload:
/*	lea	-0x08(%rbp),%rbp	\ 40092B 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 40092F 	*/.byte 0x48,0x89,0x45,0x0
;/	mov	%r12, %rax
/*	mov	%r12,%rax	\ 400933 	*/.byte 0x4C,0x89,0xE0
;/	NEXT
	ret		\ 400936 C3 
;/END-CODE
;/
;/
;/CODE CDR
;/     	mov    -8(%rax),%rax


CDR:
/*	mov	-0x08(%rax),%rax	\ 400937 	*/.byte 0x48,0x8B,0x40,0xF8
;/	NEXT
	ret		\ 40093B C3 
;/END-CODE
;/
;/CODE NAME>C
;/	lea    -0x18(%rax),%rax


NAMEgreatC:
/*	lea	-0x18(%rax),%rax	\ 40093C 	*/.byte 0x48,0x8D,0x40,0xE8
;/	NEXT
	ret		\ 400940 C3 
;/END-CODE
;/
;/CODE NAME>
;/	mov    -0x18(%rax),%rax


NAMEgreat:
/*	mov	-0x18(%rax),%rax	\ 400941 	*/.byte 0x48,0x8B,0x40,0xE8
;/	NEXT
	ret		\ 400945 C3 
;/END-CODE
;/
;/CODE NAME>F
;/	lea    -0x10(%rax),%rax


NAMEgreatF:
/*	lea	-0x10(%rax),%rax	\ 400946 	*/.byte 0x48,0x8D,0x40,0xF0
;/	NEXT
	ret		\ 40094A C3 
;/END-CODE
;/
;/CODE ERASE ( addr len  -- )
;/	DUP,


ERASE:
/*	lea	-0x08(%rbp),%rbp	\ 40094B 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	mov	%rax,0x00(%rbp)	\ 40094F 	*/.byte 0x48,0x89,0x45,0x0
;/	MOV	$0,%rax
/*	movq	$0x0,%rax	\ 400953 	*/.byte 0x48,0xC7,0xC0,0x0,0x0,0x0,0x0
;/CODL FILL ( addr len c -- )
;/	mov    0x0(%rbp),%rcx
FILL:
/*	mov	0x00(%rbp),%rcx	\ 40095A 	*/.byte 0x48,0x8B,0x4D,0x0
;/	jrcxz  0f
	.byte	0xE3	\ 40095E E3 
/*	add	$0x48,%al	\ 40095F 	*/.byte 0x6,0x48
;/	mov    0x8(%rbp),%rdi
/*	mov	0x08(%rbp),%edi	\ 400961 	*/.byte 0x8B,0x7D,0x8
;/	rep stosb \ %al,%es:(%rdi)
	repz		\ 400964 F3 
	stosb		\ 400965 AA 
;/0:	mov    0x10(%rbp),%rax
/*	mov	0x10(%rbp),%rax	\ 400966 	*/.byte 0x48,0x8B,0x45,0x10
;/	lea    0x18(%rbp),%rbp
/*	lea	0x18(%rbp),%rbp	\ 40096A 	*/.byte 0x48,0x8D,0x6D,0x18
;/	NEXT
	ret		\ 40096E C3 
;/END-CODE
;/
;/CODE CCMOVE>
;/	mov    %rax,%rcx


CCMOVEgreat:
/*	mov	%rax,%rcx	\ 40096F 	*/.byte 0x48,0x89,0xC1
;/	mov    0x0(%rbp),%rdi
/*	mov	0x00(%rbp),%rdi	\ 400972 	*/.byte 0x48,0x8B,0x7D,0x0
;/	mov    0x8(%rbp),%rsi
/*	mov	0x08(%rbp),%rsi	\ 400976 	*/.byte 0x48,0x8B,0x75,0x8
;/	std    
stD	\ 40097A FD 
;/	add    %rcx,%rdi
/*	add	%rcx,%rdi	\ 40097B 	*/.byte 0x48,0x1,0xCF
;/	add    %rcx,%rsi
/*	add	%rcx,%rsi	\ 40097E 	*/.byte 0x48,0x1,0xCE
;/	dec    %rsi
/*	decq	%rsi	\ 400981 	*/.byte 0x48,0xFF,0xCE
;/	dec    %rdi
/*	decq	%rdi	\ 400984 	*/.byte 0x48,0xFF,0xCF
;/	rep movsb \ %ds:(%rsi),%es:(%rdi)
	repz		\ 400987 F3 
	movsb		\ 400988 A4 
;/	cld    
clD	\ 400989 FC 
;/	lea    0x18(%rbp),%rbp
/*	lea	0x18(%rbp),%rbp	\ 40098A 	*/.byte 0x48,0x8D,0x6D,0x18
;/	mov    -0x8(%rbp),%rax
/*	mov	-0x08(%rbp),%rax	\ 40098E 	*/.byte 0x48,0x8B,0x45,0xF8
;/	NEXT
	ret		\ 400992 C3 
;/END-CODE
;/
;/CODE CMOVE>
;/        mov     0x08(%rbp),%rcx


CMOVEgreat:
/*	mov	0x08(%rbp),%rcx	\ 400993 	*/.byte 0x48,0x8B,0x4D,0x8
;/        mov     0x00(%rbp),%rdx
/*	mov	0x00(%rbp),%rdx	\ 400997 	*/.byte 0x48,0x8B,0x55,0x0
;/        mov     %rax,%r8
/*	mov	%rax,%r8	\ 40099B 	*/.byte 0x49,0x89,0xC0
;/        lea     -0x08(%rcx,%rax,1),%rcx
/*	lea	-0x08(%rcx,%rax,1),%rcx	\ 40099E 	*/.byte 0x48,0x8D,0x4C,0x1,0xF8
;/        lea     -0x08(%rdx,%rax,1),%rdx
/*	lea	-0x08(%rdx,%rax,1),%rdx	\ 4009A3 	*/.byte 0x48,0x8D,0x54,0x2,0xF8
;/        shr     $0x03,%rax
/*	shr	$0x03,%rax	\ 4009A8 	*/.byte 0x48,0xC1,0xE8,0x3
;/        jz      0f
	jz	0x4009C2  { CMOVE>+2F  } 	\ 4009AC 74 14 
;/1:        mov     (%rcx),%rbx
/*	mov	(%rcx),%rbx	\ 4009AE 	*/.byte 0x48,0x8B,0x19
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 4009B1 	*/.byte 0x48,0x83,0xE8,0x1
;/        lea     -0x08(%rcx),%rcx
/*	lea	-0x08(%rcx),%rcx	\ 4009B5 	*/.byte 0x48,0x8D,0x49,0xF8
;/        mov     %rbx,(%rdx)
/*	mov	%rbx,(%rdx)	\ 4009B9 	*/.byte 0x48,0x89,0x1A
;/        lea     -0x08(%rdx),%rdx
/*	lea	-0x08(%rdx),%rdx	\ 4009BC 	*/.byte 0x48,0x8D,0x52,0xF8
;/        jNE     1b
	jNz	0x4009AE  { CMOVE>+1B  } 	\ 4009C0 75 EC 
;/0:	mov     %r8,%rax
/*	mov	%r8,%rax	\ 4009C2 	*/.byte 0x4C,0x89,0xC0
;/        and    $0x07,%rax
/*	andq	$0x07,%rax	\ 4009C5 	*/.byte 0x48,0x83,0xE0,0x7
;/        lea     0x07(%rcx),%rcx
/*	lea	0x07(%rcx),%rcx	\ 4009C9 	*/.byte 0x48,0x8D,0x49,0x7
;/        lea     0x07(%rdx),%rdx
/*	lea	0x07(%rdx),%rdx	\ 4009CD 	*/.byte 0x48,0x8D,0x52,0x7
;/        jz      0f
	jz	0x4009E5  { CMOVE>+52  } 	\ 4009D1 74 12 
;/1:        mov     (%rcx),%bl
/*	mov	(%rcx),%bl	\ 4009D3 	*/.byte 0x8A,0x19
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 4009D5 	*/.byte 0x48,0x83,0xE8,0x1
;/        lea     -0x01(%rcx),%rcx
/*	lea	-0x01(%rcx),%rcx	\ 4009D9 	*/.byte 0x48,0x8D,0x49,0xFF
;/        mov     %bl,(%rdx)
/*	mov	%bl,(%rdx)	\ 4009DD 	*/.byte 0x88,0x1A
;/        lea     -0x01(%rdx),%rdx
/*	lea	-0x01(%rdx),%rdx	\ 4009DF 	*/.byte 0x48,0x8D,0x52,0xFF
;/        jNE     1b
	jNz	0x4009D3  { CMOVE>+40  } 	\ 4009E3 75 EE 
;/0:        mov     0x10(%rbp),%rax
/*	mov	0x10(%rbp),%rax	\ 4009E5 	*/.byte 0x48,0x8B,0x45,0x10
;/        lea     0x18(%rbp),%rbp
/*	lea	0x18(%rbp),%rbp	\ 4009E9 	*/.byte 0x48,0x8D,0x6D,0x18
;/	NEXT
	ret		\ 4009ED C3 
;/END-CODE
;/
;/CODE CMOVE 
;/	mov    %rax,%rcx


CMOVE:
/*	mov	%rax,%rcx	\ 4009EE 	*/.byte 0x48,0x89,0xC1
;/	mov    0x0(%rbp),%rdi
/*	mov	0x00(%rbp),%rdi	\ 4009F1 	*/.byte 0x48,0x8B,0x7D,0x0
;/	mov    0x8(%rbp),%rsi
/*	mov	0x08(%rbp),%rsi	\ 4009F5 	*/.byte 0x48,0x8B,0x75,0x8
;/ 	cld    
clD	\ 4009F9 FC 
;/	rep movsb \ %ds:(%rsi),%es:(%rdi)
	repz		\ 4009FA F3 
	movsb		\ 4009FB A4 
;/	lea    0x18(%rbp),%rbp
/*	lea	0x18(%rbp),%rbp	\ 4009FC 	*/.byte 0x48,0x8D,0x6D,0x18
;/ 	mov    -0x8(%rbp),%rax
/*	mov	-0x08(%rbp),%rax	\ 400A00 	*/.byte 0x48,0x8B,0x45,0xF8
;/	NEXT
	ret		\ 400A04 C3 
;/END-CODE
;/
;/CODE SKIP
;/        mov     %rax,%rdx


SKIP:
/*	mov	%rax,%rdx	\ 400A05 	*/.byte 0x48,0x89,0xC2
;/        mov     0x00(%rbp),%rcx
/*	mov	0x00(%rbp),%rcx	\ 400A08 	*/.byte 0x48,0x8B,0x4D,0x0
;/        mov     0x08(%rbp),%rax
/*	mov	0x08(%rbp),%rax	\ 400A0C 	*/.byte 0x48,0x8B,0x45,0x8
;/1:      jrcxz	0f	
	.byte	0xE3	\ 400A10 E3 
/*	or	%edx,(%rdx,%rcx,4)	\ 400A11 	*/.byte 0x9,0x14,0x8A
;/        adc     $-0x76,%al
;/        add     %bh,(%rcx,%rcx,1)
/*	add	%bh,(%rcx,%rcx,1)	\ 400A14 	*/.byte 0x0,0x3C,0x9
;/        jNe     0f
	jNz	0x400A1B  { SKIP+16  } 	\ 400A17 75 2 
;/        mov     $0x14,%al
/*	mov	$0x14,%al	\ 400A19 	*/.byte 0xB0,0x14
;/0:        cmp     %dl,%al
/*	cmp	%dl,%al	\ 400A1B 	*/.byte 0x38,0xD0
;/        jNe     0f
	jNz	0x400A27  { SKIP+22  } 	\ 400A1D 75 8 
;/        decq    %rcx
/*	decq	%rcx	\ 400A1F 	*/.byte 0x48,0xFF,0xC9
;/        incq    %rax
/*	incq	%rax	\ 400A22 	*/.byte 0x48,0xFF,0xC0
;/        jmp     1b
	jmp	0x400A10  { SKIP+B  } 	\ 400A25 EB E9 
;/0:      mov     %rax,0x08(%rbp)
/*	mov	%rax,0x08(%rbp)	\ 400A27 	*/.byte 0x48,0x89,0x45,0x8
;/        mov     %rcx,%rax
/*	mov	%rcx,%rax	\ 400A2B 	*/.byte 0x48,0x89,0xC8
;/        lea     0x08(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400A2E 	*/.byte 0x48,0x8D,0x6D,0x8
;/        ret
	ret		\ 400A32 C3 
;/END-CODE
;/
;/
;/CODE DOVALUE
;/	nop


DOVALUE:
	nop		\ 400A33 90 
;/CODL DOCONSTANT
;/	lea    -0x8(%rbp),%rbp
DOCONSTANT:
/*	lea	-0x08(%rbp),%rbp	\ 400A34 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 400A38 	*/.byte 0x48,0x89,0x45,0x0
;/	pop    %rax
	pop	%rax	\ 400A3C 58 
;/	mov    (%rax),%rax
/*	mov	(%rax),%rax	\ 400A3D 	*/.byte 0x48,0x8B,0x0
;/	NEXT
	ret		\ 400A40 C3 
;/END-CODE
;/
;/CODE DOCREATE
;/	lea    -0x8(%rbp),%rbp


DOCREATE:
/*	lea	-0x08(%rbp),%rbp	\ 400A41 	*/.byte 0x48,0x8D,0x6D,0xF8
;/	mov    %rax,0x0(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 400A45 	*/.byte 0x48,0x89,0x45,0x0
;/	pop    %rax
	pop	%rax	\ 400A49 58 
;/	NEXT
	ret		\ 400A4A C3 
;/END-CODE
;/
;/CODE DOVECT
;/	pop    %rbx


DOVECT:
	pop	%rbx	\ 400A4B 5B 
;/	mov    (%rbx),%rbx
/*	mov	(%rbx),%rbx	\ 400A4C 	*/.byte 0x48,0x8B,0x1B
;/	jmp	%rbx
/*	jmp	*%rbx	\ 400A4F 	*/.byte 0xFF,0xE3
;/END-CODE 
;/
;/CREATE &NOOP 'NOOP ,

	DQ 0x404+fimg
;/
;/CODE (?DO) (  limit index -- )
;/	cmp    0x0(%rbp),%rax	\ index = limit

cbigqueDOcend:
/*	cmp	0x00(%rbp),%rax	\ 400A59 	*/.byte 0x48,0x3B,0x45,0x0
;/	je     0f
	jz	0x400A85  { (DO)+26  } 	\ 400A5D 74 26 
;/CODL (DO) (  limit index -- )
;/	pop    %rdx		\ rdx = return address
cbigDOcend:
	pop	%rdx	\ 400A5F 5A 
;/	mov    (%rdx),%rcx	\ exit address
/*	mov	(%rdx),%rcx	\ 400A60 	*/.byte 0x48,0x8B,0xA
;/	lea    0x8(%rdx),%rdx	\ step over it
/*	lea	0x08(%rdx),%rdx	\ 400A63 	*/.byte 0x48,0x8D,0x52,0x8
;/	push   %rcx		\ rcx = exit address  
	Push	%rcx	\ 400A67 51 
;/	push   %r15		\ r15 = old index - limit - msb
	Push	%r15	\ 400A68 41 57 
;/	push   %r14		\ r14 = old index     
	Push	%r14	\ 400A6A 41 56 
;/
;/	mov    %rax,%r15	\ rbx = index, r15 = index                                     
/*	mov	%rax,%r15	\ 400A6C 	*/.byte 0x49,0x89,0xC7
;/	sub    0x0(%rbp),%r15	\ r15 = index - limit 
/*	sub	0x00(%rbp),%r15	\ 400A6F 	*/.byte 0x4C,0x2B,0x7D,0x0
;/	btc    $0x3f,%r15	\ r15 = index - limit  - msb ; BTC=complement
	btc	$0x3F,%r15	\ 400A73 49 F BA FF 3F 
;/	mov    %rax,%r14 	\ r14 = index
/*	mov	%rax,%r14	\ 400A78 	*/.byte 0x49,0x89,0xC6
;/
;/	mov    0x8(%rbp),%rax	\ restore TOS
/*	mov	0x08(%rbp),%rax	\ 400A7B 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp	\ step data stack                               
/*	lea	0x10(%rbp),%rbp	\ 400A7F 	*/.byte 0x48,0x8D,0x6D,0x10
;/
;/	jmp	%rdx
/*	jmp	*%rdx	\ 400A83 	*/.byte 0xFF,0xE2
;/0:	mov    0x8(%rbp),%rax	\ restore TOS
/*	mov	0x08(%rbp),%rax	\ 400A85 	*/.byte 0x48,0x8B,0x45,0x8
;/	lea    0x10(%rbp),%rbp	\ step data stack
/*	lea	0x10(%rbp),%rbp	\ 400A89 	*/.byte 0x48,0x8D,0x6D,0x10
;/	pop    %rdx		\ rdx = return address
	pop	%rdx	\ 400A8D 5A 
;/	mov    (%rdx),%rdx	\ exit address
/*	mov	(%rdx),%rdx	\ 400A8E 	*/.byte 0x48,0x8B,0x12
;/	jmp	%rdx
/*	jmp	*%rdx	\ 400A91 	*/.byte 0xFF,0xE2
;/END-CODE
;/
;/' (?DO) TO '(?DO)
;/' (DO) TO '(DO)
;/
;/CODE LEAVE
;/\ RSP+18: ESP+C:  exit address
;/\ RSP+10: ESP+8:  old index-limit-$8000.0000  (incremented by LOOP)
;/\ RSP+08: ESP+4:  old index                   (incremented by LOOP)
;/\ RSP+00: return address
;/\ R15:    new index-limit-xorbit63
;/\ R14:    new index
;/        pop     %rdx	\ return address and discard it


LEAVE:
	pop	%rdx	\ 400A93 5A 
;/        pop	%r14	\ index
	pop	%r14	\ 400A94 41 5E 
;/        pop	%r15	\ index-limit-xorbit63
	pop	%r15	\ 400A96 41 5F 
;/	NEXT
	ret		\ 400A98 C3 
;/END-CODE
;/
;/
;/CODE UNLOOP
;/\ RSP+18: ESP+C:  exit address
;/\ RSP+10: ESP+8:  old index-limit-$8000.0000  (incremented by LOOP)
;/\ RSP+08: ESP+4:  old index                   (incremented by LOOP)
;/\ RSP+00: return address
;/\ R15:    new index-limit-xorbit63
;/\ R14:    new index
;/        pop     %rdx	\ return address and discard it


UNLOOP:
	pop	%rdx	\ 400A99 5A 
;/        pop	%r14	\ index
	pop	%r14	\ 400A9A 41 5E 
;/        pop	%r15	\ index-limit-xorbit63
	pop	%r15	\ 400A9C 41 5F 
;/	pop	%rcx
	pop	%rcx	\ 400A9E 59 
;/	jmp	%rdx
/*	jmp	*%rdx	\ 400A9F 	*/.byte 0xFF,0xE2
;/END-CODE
;/
;/CODE CALLBACKIN
;/	mov     %r13,%rax


CALLBACKIN:
/*	mov	%r13,%rax	\ 400AA1 	*/.byte 0x4C,0x89,0xE8
;/        lea     0x2800(%rsp),%rbp
/*	lea	0x2800(%rsp),%rbp	\ 400AA4 	*/.byte 0x48,0x8D,0xAC,0x24,0x0,0x28,0x0,0x0
;/	lea     0x200(%rsp),%r13
/*	lea	0x200(%rsp),%r13	\ 400AAC 	*/.byte 0x4C,0x8D,0xAC,0x24,0x0,0x2,0x0,0x0
;/        ret
	ret		\ 400AB4 C3 
;/END-CODE
;/
;/CODE PARAM	
;/        lea     -0x20(%rbp),%rbp


PARAM:
/*	lea	-0x20(%rbp),%rbp	\ 400AB5 	*/.byte 0x48,0x8D,0x6D,0xE0
;/        mov     %rax,0x18(%rbp)
/*	mov	%rax,0x18(%rbp)	\ 400AB9 	*/.byte 0x48,0x89,0x45,0x18
;/        mov     %rcx,0x10(%rbp)
/*	mov	%rcx,0x10(%rbp)	\ 400ABD 	*/.byte 0x48,0x89,0x4D,0x10
;/        mov     %rdx,0x08(%rbp)
/*	mov	%rdx,0x08(%rbp)	\ 400AC1 	*/.byte 0x48,0x89,0x55,0x8
;/	mov     %r8,0x00(%rbp)
/*	mov	%r8,0x00(%rbp)	\ 400AC5 	*/.byte 0x4C,0x89,0x45,0x0
;/	mov     %r9,%rax
/*	mov	%r9,%rax	\ 400AC9 	*/.byte 0x4C,0x89,0xC8
;/        ret
	ret		\ 400ACC C3 
;/END-CODE
;/
;/CODE MARAP
;/        mov     %rax,%r9


MARAP:
/*	mov	%rax,%r9	\ 400ACD 	*/.byte 0x49,0x89,0xC1
;/        mov     0x00(%rbp),%r8
/*	mov	0x00(%rbp),%r8	\ 400AD0 	*/.byte 0x4C,0x8B,0x45,0x0
;/        mov     0x08(%rbp),%rdx
/*	mov	0x08(%rbp),%rdx	\ 400AD4 	*/.byte 0x48,0x8B,0x55,0x8
;/        mov     0x10(%rbp),%rcx
/*	mov	0x10(%rbp),%rcx	\ 400AD8 	*/.byte 0x48,0x8B,0x4D,0x10
;/        mov     0x18(%rbp),%rax
/*	mov	0x18(%rbp),%rax	\ 400ADC 	*/.byte 0x48,0x8B,0x45,0x18
;/        lea     0x20(%rbp),%rbp
/*	lea	0x20(%rbp),%rbp	\ 400AE0 	*/.byte 0x48,0x8D,0x6D,0x20
;/     ret
	ret		\ 400AE4 C3 
;/END-CODE
;/
;/code LOCALS_EXIT
;/        pop     %rbx


LOCALS_EXIT:
	pop	%rbx	\ 400AE5 5B 
;/        add     %rbx,%rsp
/*	add	%rbx,%rsp	\ 400AE6 	*/.byte 0x48,0x1,0xDC
;/        ret
	ret		\ 400AE9 C3 
;/END-CODE
;/
;/CODE DOCREATE
;/	DUP,


DOCREATE:
/*	lea	-0x08(%rbp),%rbp	\ 400AEA 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	mov	%rax,0x00(%rbp)	\ 400AEE 	*/.byte 0x48,0x89,0x45,0x0
;/	POP	%rax
	pop	%rax	\ 400AF2 58 
;/	RET
	ret		\ 400AF3 C3 
;/END-CODE
;/
;/CODE DOVALUE
;/	NOP


DOVALUE:
	nop		\ 400AF4 90 
;/CODL DOCONSTANT
;/	DUP,
DOCONSTANT:
/*	lea	-0x08(%rbp),%rbp	\ 400AF5 	*/.byte 0x48,0x8D,0x6D,0xF8
/*	mov	%rax,0x00(%rbp)	\ 400AF9 	*/.byte 0x48,0x89,0x45,0x0
;/	POP	%rax
	pop	%rax	\ 400AFD 58 
;/	MOV	(%rax),%rax
/*	mov	(%rax),%rax	\ 400AFE 	*/.byte 0x48,0x8B,0x0
;/	RET
	ret		\ 400B01 C3 
;/END-CODE
;/
;/CODE DOVECT
;/	POP	%rbx


DOVECT:
	pop	%rbx	\ 400B02 5B 
;/	JMP	(%rbx)
/*	jmp	*(%rbx)	\ 400B03 	*/.byte 0xFF,0x23
;/END-CODE
;/
;/CODE DOFIELD
;/	POP	%rbx


DOFIELD:
	pop	%rbx	\ 400B05 5B 
;/	add	%rax,(%rbx)
/*	add	%rax,(%rbx)	\ 400B06 	*/.byte 0x48,0x1,0x3
;/	RET
	ret		\ 400B09 C3 
;/END-CODE
;/
;/' DOCREATE TO 'DOCREATE
;/' DOCONSTANT TO 'DOCONSTANT
;/' DOVALUE TO 'DOVALUE
;/' DOVECT TO 'DOVECT
;/' DOFIELD TO 'DOFIELD
;/
;/0 VALUE  H-STDIN    \ хэндл файла - стандартного ввода


HsubSTDIN:
	call	0x400AF4  { DOVALUE } 	\ 400B0A E8 E5 FF FF FF 

	DQ 0x0
;/1 VALUE  H-STDOUT   \ хэндл файла - стандартного вывода

HsubSTDOUT:
	call	0x400AF4  { DOVALUE } 	\ 400B17 E8 D8 FF FF FF 

	DQ 0x1
;/1 VALUE  H-STDERR   \ хэндл файла - стандартного вывода ошибок

HsubSTDERR:
	call	0x400AF4  { DOVALUE } 	\ 400B24 E8 CB FF FF FF 

	DQ 0x1
;/
;/
;/VARIABLE KEY_BUF  0 , 0 , 0 ,
	DQ 0x0,0x0,0x0,0x0
	DB 0x0,0x0,0x0,0x0,0x0,0x0,0x0
;/
;/CODE OS_KEY
;/        lea     -0x08(%rbp),%rbp

OS_KEY:
/*	lea	-0x08(%rbp),%rbp	\ 400B58 	*/.byte 0x48,0x8D,0x6D,0xF8
;/        mov     %rax,0x00(%rbp) 
/*	mov	%rax,0x00(%rbp)	\ 400B5C 	*/.byte 0x48,0x89,0x45,0x0
;/3:	movq    $-0x1,%rax
/*	movq	$-0x1,%rax	\ 400B60 	*/.byte 0x48,0xC7,0xC0,0xFF,0xFF,0xFF,0xFF
;/        mov     %rax,KEY_BUF  (%rip)
/*	mov	%rax,0x400B38  { H-STDERR+14  } (%rip)	\ 400B67 	*/.byte 0x48,0x89,0x5,0xCA,0xFF,0xFF,0xFF
;/        Push    %rsi
	Push	%rsi	\ 400B6E 56 
;/        sub    $0x30,%rsp
/*	subq	$0x30,%rsp	\ 400B6F 	*/.byte 0x48,0x83,0xEC,0x30
;/        mov     ' H-STDIN >BODY  (%rip),%rcx
/*	mov	0x400B0F  { H-STDIN+5  } (%rip),%rcx	\ 400B73 	*/.byte 0x48,0x8B,0xD,0x95,0xFF,0xFF,0xFF
;/        movq    $KEY_BUF ,%rdx
/*	movq	$fimg+0xB38,%rdx	\ 400B7A 	*/.byte 0x48,0xC7,0xC2,0x38,0xB,0x40,0x0
;/        mov     $0x1,%r8
/*	mov	$0x1,%r8	\ 400B81 	*/.byte 0x49,0xC7,0xC0,0x1,0x0,0x0,0x0
;/        mov     $KEY_BUF 8 + ,%r9
/*	mov	$fimg+0xB40,%r9	\ 400B88 	*/.byte 0x49,0xC7,0xC1,0x40,0xB,0x40,0x0
;/        movq    $0x0,0x20(%rsp)
/*	movq	$0x0,0x20(%rsp)	\ 400B8F 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x0,0x0,0x0,0x0
;/        call   'ReadConsoleInputA (%rip)
/*	call	*0x40035F  { READ_COUNT+2B780B  } (%rip)	\ 400B98 	*/.byte 0xFF,0x15,0xC1,0xF7,0xFF,0xFF
;/        add    $0x30,%rsp
/*	addq	$0x30,%rsp	\ 400B9E 	*/.byte 0x48,0x83,0xC4,0x30
;/        pop     %rsi
	pop	%rsi	\ 400BA2 5E 
;/	cmpq    $0x01,KEY_BUF (%rip)
/*	cmpq	$0x01,0x400B38  { H-STDERR+14  } (%rip)	\ 400BA3 	*/.byte 0x48,0x83,0x3D,0x8D,0xFF,0xFF,0xFF,0x1
;/        jz      3B
	jz	0x400B60  { OS_KEY+8  } 	\ 400BAB 74 B3 
;/        movzb  KEY_BUF 0xe +  (%rip),%rax
/*	movzbq	0x400B46  { H-STDERR+22  } (%rip),%rax	\ 400BAD 	*/.byte 0x48,0xF,0xB6,0x5,0x91,0xFF,0xFF,0xFF
;/        test    %rax,%rax
	test	%rax,%rax	\ 400BB5 48 85 C0 
;/        jz      3B
	jz	0x400B60  { OS_KEY+8  } 	\ 400BB8 74 A6 
;/	ret
	ret		\ 400BBA C3 
;/END-CODE
;/
;/VARIABLE EMIT_BUF

	DQ 0x0
	DB 0x0,0x0,0x0,0x0,0x0
;/
;/CODE EMIT_M
;/       mov     %al,EMIT_BUF (%rip)

EMIT_M:
/*	mov	%al,0x400BC0  { OS_KEY+68  } (%rip)	\ 400BC8 	*/.byte 0x88,0x5,0xF2,0xFF,0xFF,0xFF
;/        sub    $0x30,%rsp
/*	subq	$0x30,%rsp	\ 400BCE 	*/.byte 0x48,0x83,0xEC,0x30
;/        mov     ' H-STDOUT >BODY (%rip),%rcx
/*	mov	0x400B1C  { H-STDOUT+5  } (%rip),%rcx	\ 400BD2 	*/.byte 0x48,0x8B,0xD,0x43,0xFF,0xFF,0xFF
;/        movq    $EMIT_BUF,%rdx
/*	movq	$fimg+0xBC0,%rdx	\ 400BD9 	*/.byte 0x48,0xC7,0xC2,0xC0,0xB,0x40,0x0
;/        mov     $0x1,%r8
/*	mov	$0x1,%r8	\ 400BE0 	*/.byte 0x49,0xC7,0xC0,0x1,0x0,0x0,0x0
;/        mov     $0,%r9
/*	mov	$0x0,%r9	\ 400BE7 	*/.byte 0x49,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        movq    $0x0,0x20(%rsp)
/*	movq	$0x0,0x20(%rsp)	\ 400BEE 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x0,0x0,0x0,0x0
;/        call    'WriteFile  (%rip)
/*	call	*0x40038F  { READ_COUNT+2B783B  } (%rip)	\ 400BF7 	*/.byte 0xFF,0x15,0x92,0xF7,0xFF,0xFF
;/        add    $0x30,%rsp
/*	addq	$0x30,%rsp	\ 400BFD 	*/.byte 0x48,0x83,0xC4,0x30
;/        mov     0x00(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400C01 	*/.byte 0x48,0x8B,0x45,0x0
;/        lea     0x08(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400C05 	*/.byte 0x48,0x8D,0x6D,0x8
;/        ret
	ret		\ 400C09 C3 
;/END-CODE
;/
;/CODE WRITE-FILE
;/        sub    $0x30,%rsp


WRITEsubFILE:
/*	subq	$0x30,%rsp	\ 400C0A 	*/.byte 0x48,0x83,0xEC,0x30
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 400C0E 	*/.byte 0x48,0x89,0xC1
;/        mov     0x08(%rbp),%rdx
/*	mov	0x08(%rbp),%rdx	\ 400C11 	*/.byte 0x48,0x8B,0x55,0x8
;/        mov     0x00(%rbp),%r8
/*	mov	0x00(%rbp),%r8	\ 400C15 	*/.byte 0x4C,0x8B,0x45,0x0
;/        mov     $0 ,%r9
/*	mov	$0x0,%r9	\ 400C19 	*/.byte 0x49,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        movq    $0x0,0x20(%rsp)
/*	movq	$0x0,0x20(%rsp)	\ 400C20 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x0,0x0,0x0,0x0
;/        call   'WriteFile  (%rip)
/*	call	*0x40038F  { READ_COUNT+2B783B  } (%rip)	\ 400C29 	*/.byte 0xFF,0x15,0x60,0xF7,0xFF,0xFF
;/        add    $0x30,%rsp
/*	addq	$0x30,%rsp	\ 400C2F 	*/.byte 0x48,0x83,0xC4,0x30
;/        lea     0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400C33 	*/.byte 0x48,0x8D,0x6D,0x10
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 400C37 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax
/*	sbb	%rax,%rax	\ 400C3B 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 400C3E C3 
;/END-CODE
;/
;/VARIABLE READ_COUNT

	DQ 0x0
	DB 0x0
;/
;/CODE READ-FILE
;/
;/        mov     %rbx,READ_COUNT (%rip)

READsubFILE:
/*	mov	%rbx,0x400C40  { WRITE-FILE+36  } (%rip)	\ 400C48 	*/.byte 0x48,0x89,0x1D,0xF1,0xFF,0xFF,0xFF
;/        sub    $0x30,%rsp
/*	subq	$0x30,%rsp	\ 400C4F 	*/.byte 0x48,0x83,0xEC,0x30
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 400C53 	*/.byte 0x48,0x89,0xC1
;/        mov     0x08(%rbp),%rdx
/*	mov	0x08(%rbp),%rdx	\ 400C56 	*/.byte 0x48,0x8B,0x55,0x8
;/        mov     0x00(%rbp),%r8 
/*	mov	0x00(%rbp),%r8	\ 400C5A 	*/.byte 0x4C,0x8B,0x45,0x0
;/        mov     $READ_COUNT,%r9
/*	mov	$fimg+0xC40,%r9	\ 400C5E 	*/.byte 0x49,0xC7,0xC1,0x40,0xC,0x40,0x0
;/        movq    $0x0,0x20(%rsp)
/*	movq	$0x0,0x20(%rsp)	\ 400C65 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x0,0x0,0x0,0x0
;/        call    'ReadFile  (%rip)
/*	call	*0x400367  { READ_COUNT+2B7813  } (%rip)	\ 400C6E 	*/.byte 0xFF,0x15,0xF3,0xF6,0xFF,0xFF
;/        add    $0x30,%rsp
/*	addq	$0x30,%rsp	\ 400C74 	*/.byte 0x48,0x83,0xC4,0x30
;/        lea     0x08(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400C78 	*/.byte 0x48,0x8D,0x6D,0x8
;/        mov     READ_COUNT  (%rip),%ebx
/*	mov	0x400C40  { WRITE-FILE+36  } (%rip),%ebx	\ 400C7C 	*/.byte 0x8B,0x1D,0xBE,0xFF,0xFF,0xFF
;/        and    $0x7FFFFFFF,%rbx
/*	andq	$0x7FFFFFFF,%rbx	\ 400C82 	*/.byte 0x48,0x81,0xE3,0xFF,0xFF,0xFF,0x7F
;/        mov     %rbx,0x00(%rbp)
/*	mov	%rbx,0x00(%rbp)	\ 400C89 	*/.byte 0x48,0x89,0x5D,0x0
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 400C8D 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax
/*	sbb	%rax,%rax	\ 400C91 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 400C94 C3 
;/END-CODE
;/
;/CODE COMMAND_LINE
;/        lea    -0x08(%rbp),%rbp


COMMAND_LINE:
/*	lea	-0x08(%rbp),%rbp	\ 400C95 	*/.byte 0x48,0x8D,0x6D,0xF8
;/        mov    %rax,0x00(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 400C99 	*/.byte 0x48,0x89,0x45,0x0
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400C9D 	*/.byte 0x48,0x83,0xEC,0x20
;/        call   'GetCommandLineA (%rip)
/*	call	*0x40033F  { READ_COUNT+2B77EB  } (%rip)	\ 400CA1 	*/.byte 0xFF,0x15,0x98,0xF6,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 400CA7 	*/.byte 0x48,0x83,0xC4,0x20
;/        ret
	ret		\ 400CAB C3 
;/END-CODE
;/	
;/CODE ZOPEN-FILE
;/        sub    $0x40,%rsp


ZOPENsubFILE:
/*	subq	$0x40,%rsp	\ 400CAC 	*/.byte 0x48,0x83,0xEC,0x40
;/        mov     0x00(%rbp),%rcx
/*	mov	0x00(%rbp),%rcx	\ 400CB0 	*/.byte 0x48,0x8B,0x4D,0x0
;/        mov     %rax,%rdx
/*	mov	%rax,%rdx	\ 400CB4 	*/.byte 0x48,0x89,0xC2
;/        mov     $0x0,%r8
/*	mov	$0x0,%r8	\ 400CB7 	*/.byte 0x49,0xC7,0xC0,0x0,0x0,0x0,0x0
;/        mov     $0x0,%r9
/*	mov	$0x0,%r9	\ 400CBE 	*/.byte 0x49,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        movq    $0x3,0x20(%rsp)
/*	movq	$0x3,0x20(%rsp)	\ 400CC5 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x3,0x0,0x0,0x0
;/        movq    $0x20,0x28(%rsp)
/*	movq	$0x20,0x28(%rsp)	\ 400CCE 	*/.byte 0x48,0xC7,0x44,0x24,0x28,0x20,0x0,0x0,0x0
;/        movq    $0x0,0x30(%rsp)
/*	movq	$0x0,0x30(%rsp)	\ 400CD7 	*/.byte 0x48,0xC7,0x44,0x24,0x30,0x0,0x0,0x0,0x0
;/        call    'CreateFileA  (%rip)
/*	call	*0x400327  { READ_COUNT+2B77D3  } (%rip)	\ 400CE0 	*/.byte 0xFF,0x15,0x41,0xF6,0xFF,0xFF
;/        add    $0x40,%rsp
/*	addq	$0x40,%rsp	\ 400CE6 	*/.byte 0x48,0x83,0xC4,0x40
;/        and     $0x7FFFFFFF,%rax
/*	and	$0x7FFFFFFF,%rax	\ 400CEA 	*/.byte 0x48,0x25,0xFF,0xFF,0xFF,0x7F
;/        mov     %rax,0x00(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 400CF0 	*/.byte 0x48,0x89,0x45,0x0
;/        xor     $0x7FFFFFFF,%rax
/*	xor	$0x7FFFFFFF,%rax	\ 400CF4 	*/.byte 0x48,0x35,0xFF,0xFF,0xFF,0x7F
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 400CFA 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax
/*	sbb	%rax,%rax	\ 400CFE 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 400D01 C3 
;/
;/END-CODE
;/	
;/CODE ZOPEN-FILE-SHARED
;/        sub    $0x40,%rsp


ZOPENsubFILEsubSHARED:
/*	subq	$0x40,%rsp	\ 400D02 	*/.byte 0x48,0x83,0xEC,0x40
;/        mov     0x00(%rbp),%rcx
/*	mov	0x00(%rbp),%rcx	\ 400D06 	*/.byte 0x48,0x8B,0x4D,0x0
;/        mov     %rax,%rdx
/*	mov	%rax,%rdx	\ 400D0A 	*/.byte 0x48,0x89,0xC2
;/        mov     $0x3,%r8
/*	mov	$0x3,%r8	\ 400D0D 	*/.byte 0x49,0xC7,0xC0,0x3,0x0,0x0,0x0
;/        mov     $0x0,%r9
/*	mov	$0x0,%r9	\ 400D14 	*/.byte 0x49,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        movq    $0x3,0x20(%rsp)
/*	movq	$0x3,0x20(%rsp)	\ 400D1B 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x3,0x0,0x0,0x0
;/        movq    $0x20,0x28(%rsp)
/*	movq	$0x20,0x28(%rsp)	\ 400D24 	*/.byte 0x48,0xC7,0x44,0x24,0x28,0x20,0x0,0x0,0x0
;/        movq    $0x0,0x30(%rsp)
/*	movq	$0x0,0x30(%rsp)	\ 400D2D 	*/.byte 0x48,0xC7,0x44,0x24,0x30,0x0,0x0,0x0,0x0
;/        call    'CreateFileA  (%rip)
/*	call	*0x400327  { READ_COUNT+2B77D3  } (%rip)	\ 400D36 	*/.byte 0xFF,0x15,0xEB,0xF5,0xFF,0xFF
;/        add    $0x40,%rsp
/*	addq	$0x40,%rsp	\ 400D3C 	*/.byte 0x48,0x83,0xC4,0x40
;/        and     $0x7FFFFFFF,%rax
/*	and	$0x7FFFFFFF,%rax	\ 400D40 	*/.byte 0x48,0x25,0xFF,0xFF,0xFF,0x7F
;/        mov     %rax,0x00(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 400D46 	*/.byte 0x48,0x89,0x45,0x0
;/        xor     $0x7FFFFFFF,%rax
/*	xor	$0x7FFFFFFF,%rax	\ 400D4A 	*/.byte 0x48,0x35,0xFF,0xFF,0xFF,0x7F
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 400D50 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax
/*	sbb	%rax,%rax	\ 400D54 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 400D57 C3 
;/END-CODE
;/ 	
;/CODE ZCREATE-FILE
;/        sub    $0x40,%rsp


ZCREATEsubFILE:
/*	subq	$0x40,%rsp	\ 400D58 	*/.byte 0x48,0x83,0xEC,0x40
;/        mov     0x00(%rbp),%rcx
/*	mov	0x00(%rbp),%rcx	\ 400D5C 	*/.byte 0x48,0x8B,0x4D,0x0
;/        mov     %rax,%rdx
/*	mov	%rax,%rdx	\ 400D60 	*/.byte 0x48,0x89,0xC2
;/        mov     $0x0,%r8
/*	mov	$0x0,%r8	\ 400D63 	*/.byte 0x49,0xC7,0xC0,0x0,0x0,0x0,0x0
;/        mov     $0x0,%r9
/*	mov	$0x0,%r9	\ 400D6A 	*/.byte 0x49,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        movq    $0x2,0x20(%rsp)
/*	movq	$0x2,0x20(%rsp)	\ 400D71 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x2,0x0,0x0,0x0
;/        movq    $0x20,0x28(%rsp)
/*	movq	$0x20,0x28(%rsp)	\ 400D7A 	*/.byte 0x48,0xC7,0x44,0x24,0x28,0x20,0x0,0x0,0x0
;/        movq    $0x0,0x30(%rsp)
/*	movq	$0x0,0x30(%rsp)	\ 400D83 	*/.byte 0x48,0xC7,0x44,0x24,0x30,0x0,0x0,0x0,0x0
;/        call    'CreateFileA (%rip)
/*	call	*0x400327  { READ_COUNT+2B77D3  } (%rip)	\ 400D8C 	*/.byte 0xFF,0x15,0x95,0xF5,0xFF,0xFF
;/        add    $0x40,%rsp
/*	addq	$0x40,%rsp	\ 400D92 	*/.byte 0x48,0x83,0xC4,0x40
;/        and     $0x7FFFFFFF,%rax
/*	and	$0x7FFFFFFF,%rax	\ 400D96 	*/.byte 0x48,0x25,0xFF,0xFF,0xFF,0x7F
;/        mov     %rax,0x00(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 400D9C 	*/.byte 0x48,0x89,0x45,0x0
;/        xor     $0x7FFFFFFF,%rax
/*	xor	$0x7FFFFFFF,%rax	\ 400DA0 	*/.byte 0x48,0x35,0xFF,0xFF,0xFF,0x7F
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 400DA6 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax
/*	sbb	%rax,%rax	\ 400DAA 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 400DAD C3 
;/END-CODE
;/	
;/CODE ZCREATE-FILE-SHARED
;/        sub    $0x40,%rsp


ZCREATEsubFILEsubSHARED:
/*	subq	$0x40,%rsp	\ 400DAE 	*/.byte 0x48,0x83,0xEC,0x40
;/        mov     0x00(%rbp),%rcx
/*	mov	0x00(%rbp),%rcx	\ 400DB2 	*/.byte 0x48,0x8B,0x4D,0x0
;/        mov     %rax,%rdx
/*	mov	%rax,%rdx	\ 400DB6 	*/.byte 0x48,0x89,0xC2
;/        mov     $0x3,%r8
/*	mov	$0x3,%r8	\ 400DB9 	*/.byte 0x49,0xC7,0xC0,0x3,0x0,0x0,0x0
;/        mov     $0x0,%r9
/*	mov	$0x0,%r9	\ 400DC0 	*/.byte 0x49,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        movq    $0x2,0x20(%rsp)
/*	movq	$0x2,0x20(%rsp)	\ 400DC7 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x2,0x0,0x0,0x0
;/        movq    $0x20,0x28(%rsp)
/*	movq	$0x20,0x28(%rsp)	\ 400DD0 	*/.byte 0x48,0xC7,0x44,0x24,0x28,0x20,0x0,0x0,0x0
;/        movq    $0x0,0x30(%rsp)
/*	movq	$0x0,0x30(%rsp)	\ 400DD9 	*/.byte 0x48,0xC7,0x44,0x24,0x30,0x0,0x0,0x0,0x0
;/        call    'CreateFileA  (%rip)
/*	call	*0x400327  { READ_COUNT+2B77D3  } (%rip)	\ 400DE2 	*/.byte 0xFF,0x15,0x3F,0xF5,0xFF,0xFF
;/        add    $0x40,%rsp
/*	addq	$0x40,%rsp	\ 400DE8 	*/.byte 0x48,0x83,0xC4,0x40
;/        and     $0x7FFFFFFF,%rax
/*	and	$0x7FFFFFFF,%rax	\ 400DEC 	*/.byte 0x48,0x25,0xFF,0xFF,0xFF,0x7F
;/        mov     %rax,0x00(%rbp) 
/*	mov	%rax,0x00(%rbp)	\ 400DF2 	*/.byte 0x48,0x89,0x45,0x0
;/        xor     $0x7FFFFFFF,%rax
/*	xor	$0x7FFFFFFF,%rax	\ 400DF6 	*/.byte 0x48,0x35,0xFF,0xFF,0xFF,0x7F
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 400DFC 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax       
/*	sbb	%rax,%rax	\ 400E00 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 400E03 C3 
;/END-CODE
;/	
;/CODE CLOSE-FILE
;/        sub    $0x20,%rsp


CLOSEsubFILE:
/*	subq	$0x20,%rsp	\ 400E04 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 400E08 	*/.byte 0x48,0x89,0xC1
;/        call    'CloseHandle  (%rip)
/*	call	*0x40031F  { READ_COUNT+2B77CB  } (%rip)	\ 400E0B 	*/.byte 0xFF,0x15,0xE,0xF5,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 400E11 	*/.byte 0x48,0x83,0xC4,0x20
;/        movq    $0x0,%rax
/*	movq	$0x0,%rax	\ 400E15 	*/.byte 0x48,0xC7,0xC0,0x0,0x0,0x0,0x0
;/        ret
	ret		\ 400E1C C3 
;/END-CODE
;/
;/CODE HALT
;/        and    $-0x10,%rsp


HALT:
/*	andq	$-0x10,%rsp	\ 400E1D 	*/.byte 0x48,0x83,0xE4,0xF0
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400E21 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 400E25 	*/.byte 0x48,0x89,0xC1
;/        call    'ExitProcess (%rip)
/*	call	*0x400337  { READ_COUNT+2B77E3  } (%rip)	\ 400E28 	*/.byte 0xFF,0x15,0x9,0xF5,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 400E2E 	*/.byte 0x48,0x83,0xC4,0x20
;/        jmp    HERE
	jmp	0x400E32  { HALT+15  } 	\ 400E32 EB FE 
;/END-CODE
;/
;/CODE FILE-POSITION
;/        lea     -0x10(%rbp),%rbp


FILEsubPOSITION:
/*	lea	-0x10(%rbp),%rbp	\ 400E34 	*/.byte 0x48,0x8D,0x6D,0xF0
;/        movq    $0x0,0x08(%rbp)
/*	movq	$0x0,0x08(%rbp)	\ 400E38 	*/.byte 0x48,0xC7,0x45,0x8,0x0,0x0,0x0,0x0
;/        movq    $0x0,0x00(%rbp)
/*	movq	$0x0,0x00(%rbp)	\ 400E40 	*/.byte 0x48,0xC7,0x45,0x0,0x0,0x0,0x0,0x0
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400E48 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 400E4C 	*/.byte 0x48,0x89,0xC1
;/        movq    $0x0,%rdx
/*	movq	$0x0,%rdx	\ 400E4F 	*/.byte 0x48,0xC7,0xC2,0x0,0x0,0x0,0x0
;/        mov     0x00(%rbp),%r8
/*	mov	0x00(%rbp),%r8	\ 400E56 	*/.byte 0x4C,0x8B,0x45,0x0
;/        mov     $0x1,%r9
/*	mov	$0x1,%r9	\ 400E5A 	*/.byte 0x49,0xC7,0xC1,0x1,0x0,0x0,0x0
;/        call    'SetFilePointer (%rip)
/*	call	*0x40036F  { READ_COUNT+2B781B  } (%rip)	\ 400E61 	*/.byte 0xFF,0x15,0x8,0xF5,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 400E67 	*/.byte 0x48,0x83,0xC4,0x20
;/        mov     %rax,0x08(%rbp)
/*	mov	%rax,0x08(%rbp)	\ 400E6B 	*/.byte 0x48,0x89,0x45,0x8
;/        add    $0x01,%rax
/*	addq	$0x01,%rax	\ 400E6F 	*/.byte 0x48,0x83,0xC0,0x1
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 400E73 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax
/*	sbb	%rax,%rax	\ 400E77 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 400E7A C3 
;/END-CODE
;/	
;/	
;/CODE REPOSITION-FILE
;/        sub    $0x20,%rsp


REPOSITIONsubFILE:
/*	subq	$0x20,%rsp	\ 400E7B 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 400E7F 	*/.byte 0x48,0x89,0xC1
;/        mov     0x08(%rbp),%rdx
/*	mov	0x08(%rbp),%rdx	\ 400E82 	*/.byte 0x48,0x8B,0x55,0x8
;/        mov     0x00(%rbp),%r8 
/*	mov	0x00(%rbp),%r8	\ 400E86 	*/.byte 0x4C,0x8B,0x45,0x0
;/        mov     $0x0,%r9
/*	mov	$0x0,%r9	\ 400E8A 	*/.byte 0x49,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        call    'SetFilePointer  (%rip)
/*	call	*0x40036F  { READ_COUNT+2B781B  } (%rip)	\ 400E91 	*/.byte 0xFF,0x15,0xD8,0xF4,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 400E97 	*/.byte 0x48,0x83,0xC4,0x20
;/        lea     0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400E9B 	*/.byte 0x48,0x8D,0x6D,0x10
;/        add    $0x01,%rax
/*	addq	$0x01,%rax	\ 400E9F 	*/.byte 0x48,0x83,0xC0,0x1
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 400EA3 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax
/*	sbb	%rax,%rax	\ 400EA7 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 400EAA C3 
;/END-CODE
;/
;/
;/
;/CODE DLL_L
;/        mov     %rsp,%rbx


DLL_L:
/*	mov	%rsp,%rbx	\ 400EAB 	*/.byte 0x48,0x89,0xE3
;/        and    $0x0F,%rbx
/*	andq	$0x0F,%rbx	\ 400EAE 	*/.byte 0x48,0x83,0xE3,0xF
;/        jz     3f
	jz	0x400ED0  { DLL_L+25  } 	\ 400EB2 74 1C 
;/        lea     -0x08(%rsp),%rsp
/*	lea	-0x08(%rsp),%rsp	\ 400EB4 	*/.byte 0x48,0x8D,0x64,0x24,0xF8
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400EB9 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 400EBD 	*/.byte 0x48,0x89,0xC1
;/        call   'LoadLibraryA  (%rip)
/*	call	*0x400357  { READ_COUNT+2B7803  } (%rip)	\ 400EC0 	*/.byte 0xFF,0x15,0x91,0xF4,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 400EC6 	*/.byte 0x48,0x83,0xC4,0x20
;/        lea     0x08(%rsp),%rsp
/*	lea	0x08(%rsp),%rsp	\ 400ECA 	*/.byte 0x48,0x8D,0x64,0x24,0x8
;/        ret
	ret		\ 400ECF C3 
;/3:      sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400ED0 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 400ED4 	*/.byte 0x48,0x89,0xC1
;/        call   'LoadLibraryA  (%rip)
/*	call	*0x400357  { READ_COUNT+2B7803  } (%rip)	\ 400ED7 	*/.byte 0xFF,0x15,0x7A,0xF4,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 400EDD 	*/.byte 0x48,0x83,0xC4,0x20
;/        ret
	ret		\ 400EE1 C3 
;/END-CODE
;/
;/CODE DLL_S
;/
;/        mov     %rsp,%r12


DLL_S:
/*	mov	%rsp,%r12	\ 400EE2 	*/.byte 0x49,0x89,0xE4
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400EE5 	*/.byte 0x48,0x83,0xEC,0x20
;/        and    $-0x10,%rsp
/*	andq	$-0x10,%rsp	\ 400EE9 	*/.byte 0x48,0x83,0xE4,0xF0
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400EED 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     0x00(%rbp),%rcx
/*	mov	0x00(%rbp),%rcx	\ 400EF1 	*/.byte 0x48,0x8B,0x4D,0x0
;/        mov     %rax,%rdx
/*	mov	%rax,%rdx	\ 400EF5 	*/.byte 0x48,0x89,0xC2
;/        call   'GetProcAddress (%rip)
/*	call	*0x400347  { READ_COUNT+2B77F3  } (%rip)	\ 400EF8 	*/.byte 0xFF,0x15,0x49,0xF4,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 400EFE 	*/.byte 0x48,0x83,0xC4,0x20
;/	mov     %r12,%rsp
/*	mov	%r12,%rsp	\ 400F02 	*/.byte 0x4C,0x89,0xE4
;/        lea     0x08(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400F05 	*/.byte 0x48,0x8D,0x6D,0x8
;/        ret
	ret		\ 400F09 C3 
;/END-CODE
;/
;/CODE NXCALL0
;/HERE TO _NXCALL0
;/        mov     %rsp,%r12


NXCALL0:
/*	mov	%rsp,%r12	\ 400F0A 	*/.byte 0x49,0x89,0xE4
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400F0D 	*/.byte 0x48,0x83,0xEC,0x20
;/        and    $-0x10,%rsp
/*	andq	$-0x10,%rsp	\ 400F11 	*/.byte 0x48,0x83,0xE4,0xF0
;/        call    %rax
/*	call	*%rax	\ 400F15 	*/.byte 0xFF,0xD0
;/	mov     %r12,%rsp
/*	mov	%r12,%rsp	\ 400F17 	*/.byte 0x4C,0x89,0xE4
;/        ret
	ret		\ 400F1A C3 
;/END-CODE
;/
;/CODE NXCALL1
;/HERE TO _NXCALL1
;/        mov    %rsp,%r12


NXCALL1:
/*	mov	%rsp,%r12	\ 400F1B 	*/.byte 0x49,0x89,0xE4
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400F1E 	*/.byte 0x48,0x83,0xEC,0x20
;/        and    $-0x10,%rsp
/*	andq	$-0x10,%rsp	\ 400F22 	*/.byte 0x48,0x83,0xE4,0xF0
;/        mov     0x00(%rbp),%rcx
/*	mov	0x00(%rbp),%rcx	\ 400F26 	*/.byte 0x48,0x8B,0x4D,0x0
;/        call    %rax
/*	call	*%rax	\ 400F2A 	*/.byte 0xFF,0xD0
;/        lea     0x08(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400F2C 	*/.byte 0x48,0x8D,0x6D,0x8
;/	mov     %r12,%rsp
/*	mov	%r12,%rsp	\ 400F30 	*/.byte 0x4C,0x89,0xE4
;/        ret
	ret		\ 400F33 C3 
;/END-CODE
;/
;/CODE NXCALL2
;/HERE TO _NXCALL2
;/        mov     %rsp,%r12


NXCALL2:
/*	mov	%rsp,%r12	\ 400F34 	*/.byte 0x49,0x89,0xE4
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400F37 	*/.byte 0x48,0x83,0xEC,0x20
;/        and    $-0x10,%rsp
/*	andq	$-0x10,%rsp	\ 400F3B 	*/.byte 0x48,0x83,0xE4,0xF0
;/        mov     0x08(%rbp),%rcx
/*	mov	0x08(%rbp),%rcx	\ 400F3F 	*/.byte 0x48,0x8B,0x4D,0x8
;/        mov     0x00(%rbp),%rdx
/*	mov	0x00(%rbp),%rdx	\ 400F43 	*/.byte 0x48,0x8B,0x55,0x0
;/        call    %rax
/*	call	*%rax	\ 400F47 	*/.byte 0xFF,0xD0
;/        lea     0x10(%rbp),%rbp
/*	lea	0x10(%rbp),%rbp	\ 400F49 	*/.byte 0x48,0x8D,0x6D,0x10
;/	mov     %r12,%rsp
/*	mov	%r12,%rsp	\ 400F4D 	*/.byte 0x4C,0x89,0xE4
;/        ret
	ret		\ 400F50 C3 
;/END-CODE
;/
;/CODE NXCALL3
;/HERE TO _NXCALL3
;/        mov     %rsp,%r12


NXCALL3:
/*	mov	%rsp,%r12	\ 400F51 	*/.byte 0x49,0x89,0xE4
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400F54 	*/.byte 0x48,0x83,0xEC,0x20
;/        and    $-0x10,%rsp
/*	andq	$-0x10,%rsp	\ 400F58 	*/.byte 0x48,0x83,0xE4,0xF0
;/        mov     0x10(%rbp),%rcx
/*	mov	0x10(%rbp),%rcx	\ 400F5C 	*/.byte 0x48,0x8B,0x4D,0x10
;/        mov     0x08(%rbp),%rdx
/*	mov	0x08(%rbp),%rdx	\ 400F60 	*/.byte 0x48,0x8B,0x55,0x8
;/        mov     0x00(%rbp),%r8
/*	mov	0x00(%rbp),%r8	\ 400F64 	*/.byte 0x4C,0x8B,0x45,0x0
;/        call    %rax
/*	call	*%rax	\ 400F68 	*/.byte 0xFF,0xD0
;/        lea     0x18(%rbp),%rbp
/*	lea	0x18(%rbp),%rbp	\ 400F6A 	*/.byte 0x48,0x8D,0x6D,0x18
;/	mov     %r12,%rsp
/*	mov	%r12,%rsp	\ 400F6E 	*/.byte 0x4C,0x89,0xE4
;/        ret
	ret		\ 400F71 C3 
;/END-CODE
;/	
;/CODE NXCALL4
;/HERE TO _NXCALL4
;/        mov     %rsp,%r12


NXCALL4:
/*	mov	%rsp,%r12	\ 400F72 	*/.byte 0x49,0x89,0xE4
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 400F75 	*/.byte 0x48,0x83,0xEC,0x20
;/        and    $-0x10,%rsp
/*	andq	$-0x10,%rsp	\ 400F79 	*/.byte 0x48,0x83,0xE4,0xF0
;/        mov     0x18(%rbp),%rcx
/*	mov	0x18(%rbp),%rcx	\ 400F7D 	*/.byte 0x48,0x8B,0x4D,0x18
;/        mov     0x10(%rbp),%rdx
/*	mov	0x10(%rbp),%rdx	\ 400F81 	*/.byte 0x48,0x8B,0x55,0x10
;/        mov     0x08(%rbp),%r8
/*	mov	0x08(%rbp),%r8	\ 400F85 	*/.byte 0x4C,0x8B,0x45,0x8
;/        mov     0x00(%rbp),%r9
/*	mov	0x00(%rbp),%r9	\ 400F89 	*/.byte 0x4C,0x8B,0x4D,0x0
;/        call    %rax
/*	call	*%rax	\ 400F8D 	*/.byte 0xFF,0xD0
;/        lea     0x20(%rbp),%rbp
/*	lea	0x20(%rbp),%rbp	\ 400F8F 	*/.byte 0x48,0x8D,0x6D,0x20
;/	mov     %r12,%rsp
/*	mov	%r12,%rsp	\ 400F93 	*/.byte 0x4C,0x89,0xE4
;/        ret
	ret		\ 400F96 C3 
;/
;/
;/\ NXCALLS: dq   _NXCALL0,_NXCALL1,_NXCALL2,_NXCALL3,_NXCALL4
;/5:
;/    _NXCALL0 , _NXCALL1 ,  _NXCALL2 ,  _NXCALL3 , _NXCALL4 ,
/*	or	(%rdi),%cl	\ 400F97 	*/.byte 0xA,0xF
/*	add	%al,(%rax)	\ 400F99 	*/.byte 0x40,0x0,0x0
/*	add	%al,(%rax)	\ 400F9C 	*/.byte 0x0,0x0
/*	add	%bl,(%rbx)	\ 400F9E 	*/.byte 0x0,0x1B
/*	cmovo/*	cmov	(%rax),%eax	\ 400FA0 	*/.byte 0xF,0x40,0x0
/*	add	%al,(%rax)	\ 400FA3 	*/.byte 0x0,0x0
/*	add	%al,(%rax)	\ 400FA5 	*/.byte 0x0,0x0
/*	xor	$0x0F,%al	\ 400FA7 	*/.byte 0x34,0xF
/*	add	%al,(%rax)	\ 400FA9 	*/.byte 0x40,0x0,0x0
/*	add	%al,(%rax)	\ 400FAC 	*/.byte 0x0,0x0
/*	add	%dl,0x0F(%rcx)	\ 400FAE 	*/.byte 0x0,0x51,0xF
/*	add	%al,(%rax)	\ 400FB1 	*/.byte 0x40,0x0,0x0
/*	add	%al,(%rax)	\ 400FB4 	*/.byte 0x0,0x0
/*	add	%dh,0x0F(%rdx)	\ 400FB6 	*/.byte 0x0,0x72,0xF
/*	add	%al,(%rax)	\ 400FB9 	*/.byte 0x40,0x0,0x0
/*	add	%al,(%rax)	\ 400FBC 	*/.byte 0x0,0x0
/*	add	%cl,-0x77(%rax)	\ 400FBE 	*/.byte 0x0,0x48,0x89
;/    
;/    
;/\  NXCALLS4
;/4:        mov     %rax,%rbx
	ret		\ 400FC1 C3 
;/        mov     0x00(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 400FC2 	*/.byte 0x48,0x8B,0x45,0x0
;/        lea     0x08(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 400FC6 	*/.byte 0x48,0x8D,0x6D,0x8
;/        jmp     5b (%rbx,8)
/*	jmp	*fimg+0xF97(,%rbx,8)	\ 400FCA 	*/.byte 0xFF,0x24,0xDD,0x97,0xF,0x40,0x0
;/	
;/CODL NXCALL
;/        cmp    $0x04,%rax
NXCALL:
/*	cmpq	$0x04,%rax	\ 400FD1 	*/.byte 0x48,0x83,0xF8,0x4
;/	jle     4B
	jle	0x400FBF  { NXCALL4+4D  } 	\ 400FD5 7E E8 
;/        Push    %r13
	Push	%r13	\ 400FD7 41 55 
;/        mov     %rsp,%r12
/*	mov	%rsp,%r12	\ 400FD9 	*/.byte 0x49,0x89,0xE4
;/        lea     0x0(,%rax,8),%rbx
/*	lea	0x0(,%rax,8),%rbx	\ 400FDC 	*/.byte 0x48,0x8D,0x1C,0xC5,0x0,0x0,0x0,0x0
;/        mov     0x00(%rbp),%r11
/*	mov	0x00(%rbp),%r11	\ 400FE4 	*/.byte 0x4C,0x8B,0x5D,0x0
;/        sub     %rbx,%rsp
/*	sub	%rbx,%rsp	\ 400FE8 	*/.byte 0x48,0x29,0xDC
;/        and    $-0x10,%rsp
/*	andq	$-0x10,%rsp	\ 400FEB 	*/.byte 0x48,0x83,0xE4,0xF0
;/        mov     %rbx,%r10
/*	mov	%rbx,%r10	\ 400FEF 	*/.byte 0x49,0x89,0xDA
;/        mov     (%r10,%rbp,1),%rcx
/*	mov	(%r10,%rbp,1),%rcx	\ 400FF2 	*/.byte 0x49,0x8B,0xC,0x2A
;/        sub     $0x08,%r10
/*	sub	$0x08,%r10	\ 400FF6 	*/.byte 0x49,0x83,0xEA,0x8
;/        mov     (%r10,%rbp,1),%rdx
/*	mov	(%r10,%rbp,1),%rdx	\ 400FFA 	*/.byte 0x49,0x8B,0x14,0x2A
;/        sub     $0x08,%r10
/*	sub	$0x08,%r10	\ 400FFE 	*/.byte 0x49,0x83,0xEA,0x8
;/        mov     (%r10,%rbp,1),%r8
/*	mov	(%r10,%rbp,1),%r8	\ 401002 	*/.byte 0x4D,0x8B,0x4,0x2A
;/        sub     $0x08,%r10
/*	sub	$0x08,%r10	\ 401006 	*/.byte 0x49,0x83,0xEA,0x8
;/        mov     (%r10,%rbp,1),%r9
/*	mov	(%r10,%rbp,1),%r9	\ 40100A 	*/.byte 0x4D,0x8B,0xC,0x2A
;/        sub     $0x08,%r10
/*	sub	$0x08,%r10	\ 40100E 	*/.byte 0x49,0x83,0xEA,0x8
;/        mov     $0x20,%r13
/*	mov	$0x20,%r13	\ 401012 	*/.byte 0x49,0xC7,0xC5,0x20,0x0,0x0,0x0
;/4:      mov     (%r10,%rbp,1),%rax
/*	mov	(%r10,%rbp,1),%rax	\ 401019 	*/.byte 0x49,0x8B,0x4,0x2A
;/        mov     %rax,(%rsp,%r13,1)
/*	mov	%rax,(%rsp,%r13,1)	\ 40101D 	*/.byte 0x4A,0x89,0x4,0x2C
;/        add     $0x08,%r13
/*	add	$0x08,%r13	\ 401021 	*/.byte 0x49,0x83,0xC5,0x8
;/        sub     $0x08,%r10
/*	sub	$0x08,%r10	\ 401025 	*/.byte 0x49,0x83,0xEA,0x8
;/        jNE     4B
	jNz	0x401019  { NXCALL+48  } 	\ 401029 75 EE 
;/        $41  c, $FF  c, $D3 c, \ call    %r11   \ 418BDE 41 FF D3
/*	call	*%r11	\ 40102B 	*/.byte 0x41,0xFF,0xD3
;/        lea     0x08(%rbx,%rbp,1),%rbp
/*	lea	0x08(%rbx,%rbp,1),%rbp	\ 40102E 	*/.byte 0x48,0x8D,0x6C,0x2B,0x8
;/	mov     %r12,%rsp
/*	mov	%r12,%rsp	\ 401033 	*/.byte 0x4C,0x89,0xE4
;/        pop     %r13
	pop	%r13	\ 401036 41 5D 
;/        ret
	ret		\ 401038 C3 
;/END-CODE
;/	
;/
;/CODE TSTART
;/        sub    $0x30,%rsp


TSTART:
/*	subq	$0x30,%rsp	\ 401039 	*/.byte 0x48,0x83,0xEC,0x30
;/        movq    $0x0,%rcx
/*	movq	$0x0,%rcx	\ 40103D 	*/.byte 0x48,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        movq    $0x20000,%rdx
/*	movq	$0x20000,%rdx	\ 401044 	*/.byte 0x48,0xC7,0xC2,0x0,0x0,0x2,0x0
;/        mov     %rax,%r8
/*	mov	%rax,%r8	\ 40104B 	*/.byte 0x49,0x89,0xC0
;/        mov     $0x0,%r9
/*	mov	$0x0,%r9	\ 40104E 	*/.byte 0x49,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        movq    $0x0,0x20(%rsp)
/*	movq	$0x0,0x20(%rsp)	\ 401055 	*/.byte 0x48,0xC7,0x44,0x24,0x20,0x0,0x0,0x0,0x0
;/        movq    $0x0,0x28(%rsp)
/*	movq	$0x0,0x28(%rsp)	\ 40105E 	*/.byte 0x48,0xC7,0x44,0x24,0x28,0x0,0x0,0x0,0x0
;/        call    'CreateThread  (%rip)
/*	call	*0x40032F  { READ_COUNT+2B77DB  } (%rip)	\ 401067 	*/.byte 0xFF,0x15,0xC2,0xF2,0xFF,0xFF
;/        add    $0x30,%rsp
/*	addq	$0x30,%rsp	\ 40106D 	*/.byte 0x48,0x83,0xC4,0x30
;/        ret
	ret		\ 401071 C3 
;/END-CODE
;/
;/
;/
;/CODE ALLOCATE
;/        sub    $0x20,%rsp


ALLOCATE:
/*	subq	$0x20,%rsp	\ 401072 	*/.byte 0x48,0x83,0xEC,0x20
;/        movq    $0x0,%rcx
/*	movq	$0x0,%rcx	\ 401076 	*/.byte 0x48,0xC7,0xC1,0x0,0x0,0x0,0x0
;/        mov     %rax,%rdx
/*	mov	%rax,%rdx	\ 40107D 	*/.byte 0x48,0x89,0xC2
;/        mov     $0x1000,%r8
/*	mov	$0x1000,%r8	\ 401080 	*/.byte 0x49,0xC7,0xC0,0x0,0x10,0x0,0x0
;/        mov     $0x40,%r9
/*	mov	$0x40,%r9	\ 401087 	*/.byte 0x49,0xC7,0xC1,0x40,0x0,0x0,0x0
;/        call    'VirtualAlloc (%rip)
/*	call	*0x40037F  { READ_COUNT+2B782B  } (%rip)	\ 40108E 	*/.byte 0xFF,0x15,0xEB,0xF2,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 401094 	*/.byte 0x48,0x83,0xC4,0x20
;/        lea     -0x08(%rbp),%rbp
/*	lea	-0x08(%rbp),%rbp	\ 401098 	*/.byte 0x48,0x8D,0x6D,0xF8
;/        mov     %rax,0x00(%rbp)
/*	mov	%rax,0x00(%rbp)	\ 40109C 	*/.byte 0x48,0x89,0x45,0x0
;/        sub    $0x01,%rax
/*	subq	$0x01,%rax	\ 4010A0 	*/.byte 0x48,0x83,0xE8,0x1
;/        sbb     %rax,%rax
/*	sbb	%rax,%rax	\ 4010A4 	*/.byte 0x48,0x19,0xC0
;/        ret
	ret		\ 4010A7 C3 
;/END-CODE
;/
;/CODE FREE
;/        sub    $0x20,%rsp


FREE:
/*	subq	$0x20,%rsp	\ 4010A8 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 4010AC 	*/.byte 0x48,0x89,0xC1
;/        movq    $0x0,%rdx
/*	movq	$0x0,%rdx	\ 4010AF 	*/.byte 0x48,0xC7,0xC2,0x0,0x0,0x0,0x0
;/        mov     $0x8000,%r8
/*	mov	$0x8000,%r8	\ 4010B6 	*/.byte 0x49,0xC7,0xC0,0x0,0x80,0x0,0x0
;/        call    'VirtualFree (%rip)
/*	call	*0x400387  { READ_COUNT+2B7833  } (%rip)	\ 4010BD 	*/.byte 0xFF,0x15,0xC4,0xF2,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 4010C3 	*/.byte 0x48,0x83,0xC4,0x20
;/        mov     $0x0,%eax
/*	mov	$0x0,%eax	\ 4010C7 	*/.byte 0xB8,0x0,0x0,0x0,0x0
;/        ret
	ret		\ 4010CC C3 
;/
;/END-CODE
;/
;/CODE SLEEP
;/        mov     %rsp,%r12


SLEEP:
/*	mov	%rsp,%r12	\ 4010CD 	*/.byte 0x49,0x89,0xE4
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 4010D0 	*/.byte 0x48,0x83,0xEC,0x20
;/        and    $-0x10,%rsp
/*	andq	$-0x10,%rsp	\ 4010D4 	*/.byte 0x48,0x83,0xE4,0xF0
;/        sub    $0x20,%rsp
/*	subq	$0x20,%rsp	\ 4010D8 	*/.byte 0x48,0x83,0xEC,0x20
;/        mov     %rax,%rcx
/*	mov	%rax,%rcx	\ 4010DC 	*/.byte 0x48,0x89,0xC1
;/        call   'Sleep  (%rip)
/*	call	*0x400377  { READ_COUNT+2B7823  } (%rip)	\ 4010DF 	*/.byte 0xFF,0x15,0x92,0xF2,0xFF,0xFF
;/        add    $0x20,%rsp
/*	addq	$0x20,%rsp	\ 4010E5 	*/.byte 0x48,0x83,0xC4,0x20
;/	mov     %r12,%rsp
/*	mov	%r12,%rsp	\ 4010E9 	*/.byte 0x4C,0x89,0xE4
;/        mov     0x00(%rbp),%rax
/*	mov	0x00(%rbp),%rax	\ 4010EC 	*/.byte 0x48,0x8B,0x45,0x0
;/        lea     0x08(%rbp),%rbp
/*	lea	0x08(%rbp),%rbp	\ 4010F0 	*/.byte 0x48,0x8D,0x6D,0x8
;/        ret
	ret		\ 4010F4 C3 
;/END-CODE
